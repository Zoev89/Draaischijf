
DraaiSchijfController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d30  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d30  00000de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d7  00800062  00800062  00000de6  2**0
                  ALLOC
  3 .eeprom       000000c3  00810000  00810000  00000de6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00001818  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001029  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000036ed  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003700  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c1       	rjmp	.+548    	; 0x226 <__ctors_end>
   2:	2c c1       	rjmp	.+600    	; 0x25c <__bad_interrupt>
   4:	2b c1       	rjmp	.+598    	; 0x25c <__bad_interrupt>
   6:	2a c1       	rjmp	.+596    	; 0x25c <__bad_interrupt>
   8:	29 c1       	rjmp	.+594    	; 0x25c <__bad_interrupt>
   a:	28 c1       	rjmp	.+592    	; 0x25c <__bad_interrupt>
   c:	27 c1       	rjmp	.+590    	; 0x25c <__bad_interrupt>
   e:	26 c1       	rjmp	.+588    	; 0x25c <__bad_interrupt>
  10:	25 c1       	rjmp	.+586    	; 0x25c <__bad_interrupt>
  12:	24 c1       	rjmp	.+584    	; 0x25c <__bad_interrupt>
  14:	23 c1       	rjmp	.+582    	; 0x25c <__bad_interrupt>
  16:	fc c1       	rjmp	.+1016   	; 0x410 <__vector_11>
  18:	a3 c2       	rjmp	.+1350   	; 0x560 <__vector_12>
  1a:	20 c1       	rjmp	.+576    	; 0x25c <__bad_interrupt>
  1c:	ab c2       	rjmp	.+1366   	; 0x574 <__vector_14>
  1e:	1e c1       	rjmp	.+572    	; 0x25c <__bad_interrupt>
  20:	1d c1       	rjmp	.+570    	; 0x25c <__bad_interrupt>
  22:	1c c1       	rjmp	.+568    	; 0x25c <__bad_interrupt>
  24:	1b c1       	rjmp	.+566    	; 0x25c <__bad_interrupt>

00000026 <__trampolines_end>:
	...
  3e:	03 00       	.word	0x0003	; ????
  40:	00 00       	nop
  42:	01 00       	.word	0x0001	; ????
  44:	00 00       	nop
  46:	03 00       	.word	0x0003	; ????
  48:	00 00       	nop
  4a:	03 00       	.word	0x0003	; ????
  4c:	00 00       	nop
  4e:	07 00       	.word	0x0007	; ????
  50:	00 00       	nop
  52:	03 00       	.word	0x0003	; ????
  54:	00 00       	nop
  56:	07 00       	.word	0x0007	; ????
  58:	00 00       	nop
  5a:	07 00       	.word	0x0007	; ????
  5c:	00 00       	nop
  5e:	0f 00       	.word	0x000f	; ????
  60:	00 00       	nop
  62:	07 00       	.word	0x0007	; ????
  64:	00 00       	nop
  66:	0f 00       	.word	0x000f	; ????
  68:	00 00       	nop
  6a:	0f 00       	.word	0x000f	; ????
  6c:	00 00       	nop
  6e:	1f 00       	.word	0x001f	; ????
  70:	00 00       	nop
  72:	0f 00       	.word	0x000f	; ????
  74:	00 00       	nop
  76:	1f 00       	.word	0x001f	; ????
  78:	00 00       	nop
  7a:	1f 00       	.word	0x001f	; ????
  7c:	00 00       	nop
  7e:	3f 00       	.word	0x003f	; ????
  80:	00 00       	nop
  82:	1f 00       	.word	0x001f	; ????
  84:	00 00       	nop
  86:	3f 00       	.word	0x003f	; ????
  88:	00 00       	nop
  8a:	3f 00       	.word	0x003f	; ????
  8c:	00 00       	nop
  8e:	7f 00       	.word	0x007f	; ????
  90:	00 00       	nop
  92:	3f 00       	.word	0x003f	; ????
  94:	00 00       	nop
  96:	7f 00       	.word	0x007f	; ????
  98:	00 00       	nop
  9a:	7f 00       	.word	0x007f	; ????
  9c:	00 00       	nop
  9e:	ff 00       	.word	0x00ff	; ????
  a0:	00 00       	nop
  a2:	7f 00       	.word	0x007f	; ????
  a4:	00 00       	nop
  a6:	ff 00       	.word	0x00ff	; ????
  a8:	00 00       	nop
  aa:	ff 00       	.word	0x00ff	; ????
  ac:	00 00       	nop
  ae:	ff 01       	movw	r30, r30
  b0:	00 00       	nop
  b2:	ff 00       	.word	0x00ff	; ????
  b4:	00 00       	nop
  b6:	ff 01       	movw	r30, r30
  b8:	00 00       	nop
  ba:	ff 01       	movw	r30, r30
  bc:	00 00       	nop
  be:	ff 03       	fmulsu	r23, r23
  c0:	00 00       	nop
  c2:	ff 01       	movw	r30, r30
  c4:	00 00       	nop
  c6:	ff 03       	fmulsu	r23, r23
  c8:	00 00       	nop
  ca:	ff 03       	fmulsu	r23, r23
  cc:	00 00       	nop
  ce:	ff 07       	cpc	r31, r31
  d0:	00 00       	nop
  d2:	ff 03       	fmulsu	r23, r23
  d4:	00 00       	nop
  d6:	ff 07       	cpc	r31, r31
  d8:	00 00       	nop
  da:	ff 07       	cpc	r31, r31
  dc:	00 00       	nop
  de:	ff 0f       	add	r31, r31
  e0:	00 00       	nop
  e2:	ff 07       	cpc	r31, r31
  e4:	00 00       	nop
  e6:	ff 0f       	add	r31, r31
  e8:	00 00       	nop
  ea:	ff 0f       	add	r31, r31
  ec:	00 00       	nop
  ee:	ff 1f       	adc	r31, r31
  f0:	00 00       	nop
  f2:	ff 0f       	add	r31, r31
  f4:	00 00       	nop
  f6:	ff 1f       	adc	r31, r31
  f8:	00 00       	nop
  fa:	ff 1f       	adc	r31, r31
  fc:	00 00       	nop
  fe:	ff 3f       	cpi	r31, 0xFF	; 255
 100:	00 00       	nop
 102:	ff 1f       	adc	r31, r31
 104:	00 00       	nop
 106:	ff 3f       	cpi	r31, 0xFF	; 255
 108:	00 00       	nop
 10a:	ff 3f       	cpi	r31, 0xFF	; 255
 10c:	00 00       	nop
 10e:	ff 7f       	andi	r31, 0xFF	; 255
 110:	00 00       	nop
 112:	ff 3f       	cpi	r31, 0xFF	; 255
 114:	00 00       	nop
 116:	ff 7f       	andi	r31, 0xFF	; 255
 118:	00 00       	nop
 11a:	ff 7f       	andi	r31, 0xFF	; 255
 11c:	00 00       	nop
 11e:	ff ff       	.word	0xffff	; ????
 120:	00 00       	nop
 122:	ff 7f       	andi	r31, 0xFF	; 255
 124:	00 00       	nop
 126:	ff ff       	.word	0xffff	; ????
 128:	00 00       	nop
 12a:	ff ff       	.word	0xffff	; ????
 12c:	00 00       	nop
 12e:	ff ff       	.word	0xffff	; ????
 130:	01 00       	.word	0x0001	; ????
 132:	ff ff       	.word	0xffff	; ????
 134:	00 00       	nop
 136:	ff ff       	.word	0xffff	; ????
 138:	01 00       	.word	0x0001	; ????
 13a:	ff ff       	.word	0xffff	; ????
 13c:	01 00       	.word	0x0001	; ????
 13e:	ff ff       	.word	0xffff	; ????
 140:	03 00       	.word	0x0003	; ????
 142:	ff ff       	.word	0xffff	; ????
 144:	01 00       	.word	0x0001	; ????
 146:	ff ff       	.word	0xffff	; ????
 148:	03 00       	.word	0x0003	; ????
 14a:	ff ff       	.word	0xffff	; ????
 14c:	03 00       	.word	0x0003	; ????
 14e:	ff ff       	.word	0xffff	; ????
 150:	07 00       	.word	0x0007	; ????
 152:	ff ff       	.word	0xffff	; ????
 154:	03 00       	.word	0x0003	; ????
 156:	ff ff       	.word	0xffff	; ????
 158:	07 00       	.word	0x0007	; ????
 15a:	ff ff       	.word	0xffff	; ????
 15c:	07 00       	.word	0x0007	; ????
 15e:	ff ff       	.word	0xffff	; ????
 160:	0f 00       	.word	0x000f	; ????
 162:	ff ff       	.word	0xffff	; ????
 164:	07 00       	.word	0x0007	; ????
 166:	ff ff       	.word	0xffff	; ????
 168:	0f 00       	.word	0x000f	; ????
 16a:	ff ff       	.word	0xffff	; ????
 16c:	0f 00       	.word	0x000f	; ????
 16e:	ff ff       	.word	0xffff	; ????
 170:	1f 00       	.word	0x001f	; ????
 172:	ff ff       	.word	0xffff	; ????
 174:	0f 00       	.word	0x000f	; ????
 176:	ff ff       	.word	0xffff	; ????
 178:	1f 00       	.word	0x001f	; ????
 17a:	ff ff       	.word	0xffff	; ????
 17c:	1f 00       	.word	0x001f	; ????
 17e:	ff ff       	.word	0xffff	; ????
 180:	3f 00       	.word	0x003f	; ????
 182:	ff ff       	.word	0xffff	; ????
 184:	1f 00       	.word	0x001f	; ????
 186:	ff ff       	.word	0xffff	; ????
 188:	3f 00       	.word	0x003f	; ????
 18a:	ff ff       	.word	0xffff	; ????
 18c:	3f 00       	.word	0x003f	; ????
 18e:	ff ff       	.word	0xffff	; ????
 190:	7f 00       	.word	0x007f	; ????
 192:	ff ff       	.word	0xffff	; ????
 194:	3f 00       	.word	0x003f	; ????
 196:	ff ff       	.word	0xffff	; ????
 198:	7f 00       	.word	0x007f	; ????
 19a:	ff ff       	.word	0xffff	; ????
 19c:	7f 00       	.word	0x007f	; ????
 19e:	ff ff       	.word	0xffff	; ????
 1a0:	ff 00       	.word	0x00ff	; ????
 1a2:	ff ff       	.word	0xffff	; ????
 1a4:	7f 00       	.word	0x007f	; ????
 1a6:	ff ff       	.word	0xffff	; ????
 1a8:	ff 00       	.word	0x00ff	; ????
 1aa:	ff ff       	.word	0xffff	; ????
 1ac:	ff 00       	.word	0x00ff	; ????
 1ae:	ff ff       	.word	0xffff	; ????
 1b0:	ff 01       	movw	r30, r30
 1b2:	ff ff       	.word	0xffff	; ????
 1b4:	ff 00       	.word	0x00ff	; ????
 1b6:	ff ff       	.word	0xffff	; ????
 1b8:	ff 01       	movw	r30, r30
 1ba:	ff ff       	.word	0xffff	; ????
 1bc:	ff 01       	movw	r30, r30
 1be:	ff ff       	.word	0xffff	; ????
 1c0:	ff 03       	fmulsu	r23, r23
 1c2:	ff ff       	.word	0xffff	; ????
 1c4:	ff 01       	movw	r30, r30
 1c6:	ff ff       	.word	0xffff	; ????
 1c8:	ff 03       	fmulsu	r23, r23
 1ca:	ff ff       	.word	0xffff	; ????
 1cc:	ff 03       	fmulsu	r23, r23
 1ce:	ff ff       	.word	0xffff	; ????
 1d0:	ff 07       	cpc	r31, r31
 1d2:	ff ff       	.word	0xffff	; ????
 1d4:	ff 03       	fmulsu	r23, r23
 1d6:	ff ff       	.word	0xffff	; ????
 1d8:	ff 07       	cpc	r31, r31
 1da:	ff ff       	.word	0xffff	; ????
 1dc:	ff 07       	cpc	r31, r31
 1de:	ff ff       	.word	0xffff	; ????
 1e0:	ff 0f       	add	r31, r31
 1e2:	ff ff       	.word	0xffff	; ????
 1e4:	ff 07       	cpc	r31, r31
 1e6:	ff ff       	.word	0xffff	; ????
 1e8:	ff 0f       	add	r31, r31
 1ea:	ff ff       	.word	0xffff	; ????
 1ec:	ff 0f       	add	r31, r31
 1ee:	ff ff       	.word	0xffff	; ????
 1f0:	ff 1f       	adc	r31, r31
 1f2:	ff ff       	.word	0xffff	; ????
 1f4:	ff 0f       	add	r31, r31
 1f6:	ff ff       	.word	0xffff	; ????
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ff ff       	.word	0xffff	; ????
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ff ff       	.word	0xffff	; ????
 200:	ff 3f       	cpi	r31, 0xFF	; 255
 202:	ff ff       	.word	0xffff	; ????
 204:	ff 1f       	adc	r31, r31
 206:	ff ff       	.word	0xffff	; ????
 208:	ff 3f       	cpi	r31, 0xFF	; 255
 20a:	ff ff       	.word	0xffff	; ????
 20c:	ff 3f       	cpi	r31, 0xFF	; 255
 20e:	ff ff       	.word	0xffff	; ????
 210:	ff 7f       	andi	r31, 0xFF	; 255
 212:	ff ff       	.word	0xffff	; ????
 214:	ff 3f       	cpi	r31, 0xFF	; 255
 216:	ff ff       	.word	0xffff	; ????
 218:	ff 7f       	andi	r31, 0xFF	; 255
 21a:	ff ff       	.word	0xffff	; ????
 21c:	ff 7f       	andi	r31, 0xFF	; 255
 21e:	ff ff       	.word	0xffff	; ????
 220:	ff ff       	.word	0xffff	; ????
 222:	ff ff       	.word	0xffff	; ????
 224:	ff 7f       	andi	r31, 0xFF	; 255

00000226 <__ctors_end>:
 226:	11 24       	eor	r1, r1
 228:	1f be       	out	0x3f, r1	; 63
 22a:	cf e5       	ldi	r28, 0x5F	; 95
 22c:	d4 e0       	ldi	r29, 0x04	; 4
 22e:	de bf       	out	0x3e, r29	; 62
 230:	cd bf       	out	0x3d, r28	; 61

00000232 <__do_copy_data>:
 232:	10 e0       	ldi	r17, 0x00	; 0
 234:	a0 e6       	ldi	r26, 0x60	; 96
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e0 e3       	ldi	r30, 0x30	; 48
 23a:	fd e0       	ldi	r31, 0x0D	; 13
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__do_copy_data+0x10>
 23e:	05 90       	lpm	r0, Z+
 240:	0d 92       	st	X+, r0
 242:	a2 36       	cpi	r26, 0x62	; 98
 244:	b1 07       	cpc	r27, r17
 246:	d9 f7       	brne	.-10     	; 0x23e <__do_copy_data+0xc>

00000248 <__do_clear_bss>:
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	a2 e6       	ldi	r26, 0x62	; 98
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	01 c0       	rjmp	.+2      	; 0x252 <.do_clear_bss_start>

00000250 <.do_clear_bss_loop>:
 250:	1d 92       	st	X+, r1

00000252 <.do_clear_bss_start>:
 252:	a9 33       	cpi	r26, 0x39	; 57
 254:	b2 07       	cpc	r27, r18
 256:	e1 f7       	brne	.-8      	; 0x250 <.do_clear_bss_loop>
 258:	20 d2       	rcall	.+1088   	; 0x69a <main>
 25a:	68 c5       	rjmp	.+2768   	; 0xd2c <_exit>

0000025c <__bad_interrupt>:
 25c:	d1 ce       	rjmp	.-606    	; 0x0 <__vectors>

0000025e <Homing>:
uint8_t huisDecimation;   // het huislampje is maar tijdelijk aan deze variable regelt dat
bool needsHoming = true;

void Homing()
{
    if (doHoming)
 25e:	80 91 33 01 	lds	r24, 0x0133
 262:	88 23       	and	r24, r24
 264:	29 f1       	breq	.+74     	; 0x2b0 <Homing+0x52>
    {
        if (homingReverse)
 266:	80 91 38 01 	lds	r24, 0x0138
 26a:	88 23       	and	r24, r24
 26c:	49 f0       	breq	.+18     	; 0x280 <Homing+0x22>
        {
            if (step == 0)
 26e:	80 91 63 00 	lds	r24, 0x0063
 272:	90 91 64 00 	lds	r25, 0x0064
 276:	89 2b       	or	r24, r25
 278:	d9 f4       	brne	.+54     	; 0x2b0 <Homing+0x52>
            {
                homingReverse = false;
 27a:	10 92 38 01 	sts	0x0138, r1
 27e:	08 95       	ret
            }
        }
        else if (PINC & (1<<PC2))
 280:	9a 99       	sbic	0x13, 2	; 19
 282:	17 c0       	rjmp	.+46     	; 0x2b2 <Homing+0x54>
            decimateDrempel = 4;
        }
        else
        {
            // klaar
            decimateDrempel = 40;
 284:	88 e2       	ldi	r24, 0x28	; 40
 286:	80 93 61 00 	sts	0x0061, r24
            step = stepTabel[0][0];
 28a:	80 91 67 00 	lds	r24, 0x0067
 28e:	90 91 68 00 	lds	r25, 0x0068
 292:	90 93 64 00 	sts	0x0064, r25
 296:	80 93 63 00 	sts	0x0063, r24
            if (step>=0)
 29a:	80 91 63 00 	lds	r24, 0x0063
 29e:	90 91 64 00 	lds	r25, 0x0064
 2a2:	97 fd       	sbrc	r25, 7
 2a4:	13 c0       	rjmp	.+38     	; 0x2cc <Homing+0x6e>
            {
                PORTB &= ~(1<<PB0); //vooruit
 2a6:	c0 98       	cbi	0x18, 0	; 24
            else
            {
                PORTB |= (1<<PB0); // terug
                step = -step;
            }
            doHoming = false;
 2a8:	10 92 33 01 	sts	0x0133, r1
            needsHoming = false;
 2ac:	10 92 60 00 	sts	0x0060, r1
 2b0:	08 95       	ret
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
        {
            huidigePositie = 0;
 2b2:	10 92 62 00 	sts	0x0062, r1
            PORTB |= (1<<PB0); // terug
 2b6:	c0 9a       	sbi	0x18, 0	; 24
            step = 32000;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	9d e7       	ldi	r25, 0x7D	; 125
 2bc:	90 93 64 00 	sts	0x0064, r25
 2c0:	80 93 63 00 	sts	0x0063, r24
            decimateDrempel = 4;
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	80 93 61 00 	sts	0x0061, r24
 2ca:	08 95       	ret
            {
                PORTB &= ~(1<<PB0); //vooruit
            }
            else
            {
                PORTB |= (1<<PB0); // terug
 2cc:	c0 9a       	sbi	0x18, 0	; 24
                step = -step;
 2ce:	80 91 63 00 	lds	r24, 0x0063
 2d2:	90 91 64 00 	lds	r25, 0x0064
 2d6:	91 95       	neg	r25
 2d8:	81 95       	neg	r24
 2da:	91 09       	sbc	r25, r1
 2dc:	90 93 64 00 	sts	0x0064, r25
 2e0:	80 93 63 00 	sts	0x0063, r24
 2e4:	e1 cf       	rjmp	.-62     	; 0x2a8 <Homing+0x4a>

000002e6 <StepControl>:
uint8_t huisDecimation;   // het huislampje is maar tijdelijk aan deze variable regelt dat
bool needsHoming = true;

void Homing()
{
    if (doHoming)
 2e6:	80 91 33 01 	lds	r24, 0x0133
 2ea:	88 23       	and	r24, r24
 2ec:	59 f0       	breq	.+22     	; 0x304 <StepControl+0x1e>
    {
        if (homingReverse)
 2ee:	80 91 38 01 	lds	r24, 0x0138
 2f2:	88 23       	and	r24, r24
 2f4:	71 f1       	breq	.+92     	; 0x352 <StepControl+0x6c>
        {
            if (step == 0)
 2f6:	80 91 63 00 	lds	r24, 0x0063
 2fa:	90 91 64 00 	lds	r25, 0x0064
 2fe:	89 2b       	or	r24, r25
 300:	09 f4       	brne	.+2      	; 0x304 <StepControl+0x1e>
 302:	61 c0       	rjmp	.+194    	; 0x3c6 <StepControl+0xe0>
 304:	90 91 61 00 	lds	r25, 0x0061

void StepControl()
{
    static uint8_t decimate;
    Homing();
    decimate+=1;
 308:	80 91 66 00 	lds	r24, 0x0066
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 66 00 	sts	0x0066, r24
    if ((decimate>(decimateDrempel)) && (step!=0))
 312:	98 17       	cp	r25, r24
 314:	30 f4       	brcc	.+12     	; 0x322 <StepControl+0x3c>
 316:	80 91 63 00 	lds	r24, 0x0063
 31a:	90 91 64 00 	lds	r25, 0x0064
 31e:	89 2b       	or	r24, r25
 320:	89 f5       	brne	.+98     	; 0x384 <StepControl+0x9e>
        step -= 1;
        PORTB |= (1<<DDB1);
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
 322:	80 91 65 00 	lds	r24, 0x0065
 326:	8f 5f       	subi	r24, 0xFF	; 255
    if (drempelSturing > 250)
 328:	8b 3f       	cpi	r24, 0xFB	; 251
 32a:	e8 f1       	brcs	.+122    	; 0x3a6 <StepControl+0xc0>
    {
        drempelSturing =0;
 32c:	10 92 65 00 	sts	0x0065, r1
        if (step>800)
 330:	80 91 63 00 	lds	r24, 0x0063
 334:	90 91 64 00 	lds	r25, 0x0064
 338:	81 32       	cpi	r24, 0x21	; 33
 33a:	93 40       	sbci	r25, 0x03	; 3
 33c:	c4 f5       	brge	.+112    	; 0x3ae <StepControl+0xc8>
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
        }
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
 33e:	80 91 61 00 	lds	r24, 0x0061
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	8e 31       	cpi	r24, 0x1E	; 30
 346:	e8 f5       	brcc	.+122    	; 0x3c2 <StepControl+0xdc>
 348:	89 0f       	add	r24, r25
 34a:	80 93 61 00 	sts	0x0061, r24
        }
    }
    PORTB &= ~(1<<DDB1);
 34e:	c1 98       	cbi	0x18, 1	; 24
 350:	08 95       	ret
            if (step == 0)
            {
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
 352:	9a 99       	sbic	0x13, 2	; 19
 354:	42 c0       	rjmp	.+132    	; 0x3da <StepControl+0xf4>
            decimateDrempel = 4;
        }
        else
        {
            // klaar
            decimateDrempel = 40;
 356:	88 e2       	ldi	r24, 0x28	; 40
 358:	80 93 61 00 	sts	0x0061, r24
            step = stepTabel[0][0];
 35c:	80 91 67 00 	lds	r24, 0x0067
 360:	90 91 68 00 	lds	r25, 0x0068
 364:	90 93 64 00 	sts	0x0064, r25
 368:	80 93 63 00 	sts	0x0063, r24
            if (step>=0)
 36c:	80 91 63 00 	lds	r24, 0x0063
 370:	90 91 64 00 	lds	r25, 0x0064
 374:	97 fd       	sbrc	r25, 7
 376:	3f c0       	rjmp	.+126    	; 0x3f6 <StepControl+0x110>
            {
                PORTB &= ~(1<<PB0); //vooruit
 378:	c0 98       	cbi	0x18, 0	; 24
            else
            {
                PORTB |= (1<<PB0); // terug
                step = -step;
            }
            doHoming = false;
 37a:	10 92 33 01 	sts	0x0133, r1
            needsHoming = false;
 37e:	10 92 60 00 	sts	0x0060, r1
 382:	c0 cf       	rjmp	.-128    	; 0x304 <StepControl+0x1e>
    static uint8_t decimate;
    Homing();
    decimate+=1;
    if ((decimate>(decimateDrempel)) && (step!=0))
    {
        decimate=0;
 384:	10 92 66 00 	sts	0x0066, r1
        step -= 1;
 388:	80 91 63 00 	lds	r24, 0x0063
 38c:	90 91 64 00 	lds	r25, 0x0064
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	90 93 64 00 	sts	0x0064, r25
 396:	80 93 63 00 	sts	0x0063, r24
        PORTB |= (1<<DDB1);
 39a:	c1 9a       	sbi	0x18, 1	; 24
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
 39c:	80 91 65 00 	lds	r24, 0x0065
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
    if (drempelSturing > 250)
 3a2:	8b 3f       	cpi	r24, 0xFB	; 251
 3a4:	18 f6       	brcc	.-122    	; 0x32c <StepControl+0x46>
        step -= 1;
        PORTB |= (1<<DDB1);
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
 3a6:	80 93 65 00 	sts	0x0065, r24
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
        }
    }
    PORTB &= ~(1<<DDB1);
 3aa:	c1 98       	cbi	0x18, 1	; 24
 3ac:	08 95       	ret
    if (drempelSturing > 250)
    {
        drempelSturing =0;
        if (step>800)
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
 3ae:	80 91 61 00 	lds	r24, 0x0061
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	60 f0       	brcs	.+24     	; 0x3d0 <StepControl+0xea>
 3b8:	89 1b       	sub	r24, r25
 3ba:	80 93 61 00 	sts	0x0061, r24
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
        }
    }
    PORTB &= ~(1<<DDB1);
 3be:	c1 98       	cbi	0x18, 1	; 24
 3c0:	08 95       	ret
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
        }
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	c1 cf       	rjmp	.-126    	; 0x348 <StepControl+0x62>
    {
        if (homingReverse)
        {
            if (step == 0)
            {
                homingReverse = false;
 3c6:	10 92 38 01 	sts	0x0138, r1
 3ca:	90 91 61 00 	lds	r25, 0x0061
 3ce:	9c cf       	rjmp	.-200    	; 0x308 <StepControl+0x22>
    if (drempelSturing > 250)
    {
        drempelSturing =0;
        if (step>800)
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	89 1b       	sub	r24, r25
 3d4:	80 93 61 00 	sts	0x0061, r24
 3d8:	f2 cf       	rjmp	.-28     	; 0x3be <StepControl+0xd8>
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
        {
            huidigePositie = 0;
 3da:	10 92 62 00 	sts	0x0062, r1
            PORTB |= (1<<PB0); // terug
 3de:	c0 9a       	sbi	0x18, 0	; 24
            step = 32000;
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	9d e7       	ldi	r25, 0x7D	; 125
 3e4:	90 93 64 00 	sts	0x0064, r25
 3e8:	80 93 63 00 	sts	0x0063, r24
            decimateDrempel = 4;
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	80 93 61 00 	sts	0x0061, r24
 3f2:	94 e0       	ldi	r25, 0x04	; 4
 3f4:	89 cf       	rjmp	.-238    	; 0x308 <StepControl+0x22>
            {
                PORTB &= ~(1<<PB0); //vooruit
            }
            else
            {
                PORTB |= (1<<PB0); // terug
 3f6:	c0 9a       	sbi	0x18, 0	; 24
                step = -step;
 3f8:	80 91 63 00 	lds	r24, 0x0063
 3fc:	90 91 64 00 	lds	r25, 0x0064
 400:	91 95       	neg	r25
 402:	81 95       	neg	r24
 404:	91 09       	sbc	r25, r1
 406:	90 93 64 00 	sts	0x0064, r25
 40a:	80 93 63 00 	sts	0x0063, r24
 40e:	b5 cf       	rjmp	.-150    	; 0x37a <StepControl+0x94>

00000410 <__vector_11>:
    }
    PORTB &= ~(1<<DDB1);
}

ISR(USART_RXC_vect)
{
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
 418:	11 24       	eor	r1, r1
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	00 d0       	rcall	.+0      	; 0x438 <__vector_11+0x28>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
    uartData1 = uartData2;
 43c:	80 91 32 01 	lds	r24, 0x0132
 440:	80 93 2a 01 	sts	0x012A, r24
    uartData2 = UDR;
 444:	8c b1       	in	r24, 0x0c	; 12
 446:	80 93 32 01 	sts	0x0132, r24
    if (!inSync)
 44a:	80 91 31 01 	lds	r24, 0x0131
 44e:	81 11       	cpse	r24, r1
 450:	22 c0       	rjmp	.+68     	; 0x496 <__stack+0x37>
    {
        // out of sync
        // set het brugblok uit
        DDRD &= ~(1<<PD7);
 452:	8f 98       	cbi	0x11, 7	; 17
        PORTD &= ~(1<<PD7);
 454:	97 98       	cbi	0x12, 7	; 18
        if ((uartData1 ==0) && (uartData2==0))
 456:	80 91 2a 01 	lds	r24, 0x012A
 45a:	81 11       	cpse	r24, r1
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__stack+0xd>
 45e:	80 91 32 01 	lds	r24, 0x0132
 462:	81 11       	cpse	r24, r1
 464:	03 c0       	rjmp	.+6      	; 0x46c <__stack+0xd>
        {
            // sync gevonden
            byteCount = 2;
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	80 93 27 01 	sts	0x0127, r24
            pulseBreedteCount=0;
            // zit nog iets meer aanvast
        }

    }
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0f be       	out	0x3f, r0	; 63
 490:	0f 90       	pop	r0
 492:	1f 90       	pop	r1
 494:	18 95       	reti
        }
    }
    else
    {
        // main programma zet deze op 0 als we 2 bytes bereiken
        byteCount += 1;
 496:	80 91 27 01 	lds	r24, 0x0127
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	80 93 27 01 	sts	0x0127, r24
        // nu eerst de DA converter starten
        // save de status van het brugblok bij de start van de AD converter
        brugBlokDDR = DDRD;
 4a0:	81 b3       	in	r24, 0x11	; 17
 4a2:	80 93 34 01 	sts	0x0134, r24
        ADCSR |= (1<<ADSC); // start de AD conversie de multiplexer word nu niet ingesteld ik neem aan dat die goed staat voor 1 blok
 4a6:	36 9a       	sbi	0x06, 6	; 6

        // wacht lus want anders is de adc nog niet klaar met sample hold voordat de uitgang wijzigd.
        // nu 48us voordat de uitgang wijzigd en grogweg 70us nadat de uitgang wijzigd (heb 1.5 adc clock out of 13.5 nodig voor sample hold)
        for (volatile int i=0;i<30;i++);
 4a8:	1a 82       	std	Y+2, r1	; 0x02
 4aa:	19 82       	std	Y+1, r1	; 0x01
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	9a 81       	ldd	r25, Y+2	; 0x02
 4b0:	4e 97       	sbiw	r24, 0x1e	; 30
 4b2:	4c f4       	brge	.+18     	; 0x4c6 <__stack+0x67>
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	9a 81       	ldd	r25, Y+2	; 0x02
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	9a 83       	std	Y+2, r25	; 0x02
 4bc:	89 83       	std	Y+1, r24	; 0x01
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	9a 81       	ldd	r25, Y+2	; 0x02
 4c2:	4e 97       	sbiw	r24, 0x1e	; 30
 4c4:	bc f3       	brlt	.-18     	; 0x4b4 <__stack+0x55>

        StepControl();
 4c6:	0f df       	rcall	.-482    	; 0x2e6 <StepControl>
        if (middenDetectie)
 4c8:	80 91 2d 01 	lds	r24, 0x012D
 4cc:	88 23       	and	r24, r24
 4ce:	51 f0       	breq	.+20     	; 0x4e4 <__stack+0x85>
        {
            if ((PINC & (1<<PC3)) == 0)
 4d0:	9b 99       	sbic	0x13, 3	; 19
 4d2:	08 c0       	rjmp	.+16     	; 0x4e4 <__stack+0x85>
            {
                // loc detected
                middenDetected = true;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 2e 01 	sts	0x012E, r24
                snelheid = snelheid &0x80; // onthoud richting
 4da:	80 91 2f 01 	lds	r24, 0x012F
 4de:	80 78       	andi	r24, 0x80	; 128
 4e0:	80 93 2f 01 	sts	0x012F, r24
            }
        }

        uint8_t snel = (snelheid & 0x40) ? 0: snelheid; // als er kortsluiting is dan 0 gebruiken
 4e4:	80 91 2f 01 	lds	r24, 0x012F
 4e8:	86 ff       	sbrs	r24, 6
 4ea:	32 c0       	rjmp	.+100    	; 0x550 <__stack+0xf1>
 4ec:	e0 e0       	ldi	r30, 0x00	; 0
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
        uint8_t pulse = pgm_read_byte(&pulseTabel[snel&0x3f][pulseBreedteCount>>3]);
 4f0:	80 91 35 01 	lds	r24, 0x0135
 4f4:	ee 0f       	add	r30, r30
 4f6:	ff 1f       	adc	r31, r31
 4f8:	ee 0f       	add	r30, r30
 4fa:	ff 1f       	adc	r31, r31
 4fc:	ee 0f       	add	r30, r30
 4fe:	ff 1f       	adc	r31, r31
 500:	86 95       	lsr	r24
 502:	86 95       	lsr	r24
 504:	86 95       	lsr	r24
 506:	e8 0f       	add	r30, r24
 508:	f1 1d       	adc	r31, r1
 50a:	ea 5d       	subi	r30, 0xDA	; 218
 50c:	ff 4f       	sbci	r31, 0xFF	; 255
 50e:	e4 91       	lpm	r30, Z
        if (pulse & (1<<(pulseBreedteCount&0x7)))
 510:	80 91 35 01 	lds	r24, 0x0135
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	87 70       	andi	r24, 0x07	; 7
 518:	02 c0       	rjmp	.+4      	; 0x51e <__stack+0xbf>
 51a:	f5 95       	asr	r31
 51c:	e7 95       	ror	r30
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <__stack+0xbb>
 522:	e0 ff       	sbrs	r30, 0
 524:	1a c0       	rjmp	.+52     	; 0x55a <__stack+0xfb>
        {
            // moet spanning geleverd worden
            // toevalig zit brugBlok op bit 7 en is riching bepaald door bit 7 in snelheid:)
            PORTD = (snelheid&0x80) | (PORTD&0x7f);
 526:	80 91 2f 01 	lds	r24, 0x012F
 52a:	92 b3       	in	r25, 0x12	; 18
 52c:	9f 77       	andi	r25, 0x7F	; 127
 52e:	80 78       	andi	r24, 0x80	; 128
 530:	89 2b       	or	r24, r25
 532:	82 bb       	out	0x12, r24	; 18
            DDRD |= (1<<DDD7);
 534:	8f 9a       	sbi	0x11, 7	; 17
            PORTD &= ~(1<<DDD7);
            DDRD &= ~(1<<DDD7);
        }


        pulseBreedteCount += 1;
 536:	80 91 35 01 	lds	r24, 0x0135
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 35 01 	sts	0x0135, r24
        if (pulseBreedteCount == AANTAL_PULSEN)
 540:	80 91 35 01 	lds	r24, 0x0135
 544:	8f 33       	cpi	r24, 0x3F	; 63
 546:	09 f0       	breq	.+2      	; 0x54a <__stack+0xeb>
 548:	91 cf       	rjmp	.-222    	; 0x46c <__stack+0xd>
        {
            pulseBreedteCount=0;
 54a:	10 92 35 01 	sts	0x0135, r1
 54e:	8e cf       	rjmp	.-228    	; 0x46c <__stack+0xd>
                middenDetected = true;
                snelheid = snelheid &0x80; // onthoud richting
            }
        }

        uint8_t snel = (snelheid & 0x40) ? 0: snelheid; // als er kortsluiting is dan 0 gebruiken
 550:	e0 91 2f 01 	lds	r30, 0x012F
 554:	ef 73       	andi	r30, 0x3F	; 63
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	cb cf       	rjmp	.-106    	; 0x4f0 <__stack+0x91>
            DDRD |= (1<<DDD7);
        }
        else
        {
            // geen spanning dus uitgang zwevend (geen pullup dus port op 0
            PORTD &= ~(1<<DDD7);
 55a:	97 98       	cbi	0x12, 7	; 18
            DDRD &= ~(1<<DDD7);
 55c:	8f 98       	cbi	0x11, 7	; 17
 55e:	eb cf       	rjmp	.-42     	; 0x536 <__stack+0xd7>

00000560 <__vector_12>:



// tijdelijk voor testen
ISR(USART_UDRE_vect)
{
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
//    UDR = 0xf0;
}
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_14>:


ISR(ADC_vect)
{
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	2f 93       	push	r18
 580:	3f 93       	push	r19
 582:	4f 93       	push	r20
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
    // LSB x x x x x x x x
    // waarbij x een AD bit is. Tezien is dat het 16bit getal uit de AD
    // geheel naar beneden is geschaald. Wil ik zodadelijk alleen het MSB
    // uit het filter pakken dan gooi ik bijna alle bitten weg. Dus moet
    // het AD getal met 64 vermenigvuldigd worden
    uint16_t input = ADCL + (ADCH<<8);
 588:	24 b1       	in	r18, 0x04	; 4
 58a:	85 b1       	in	r24, 0x05	; 5
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	98 2f       	mov	r25, r24
 590:	88 27       	eor	r24, r24
 592:	82 0f       	add	r24, r18
 594:	91 1d       	adc	r25, r1
    // elk kanaal een appart filter en ook een
    // apart filter voor spanning en geen spanning
    //
    // convert adInput number to a bit mask

    uint16_t output = blokOff;
 596:	20 91 2b 01 	lds	r18, 0x012B
 59a:	30 91 2c 01 	lds	r19, 0x012C
    if (brugBlokDDR & (1<<DDD7))
 59e:	40 91 34 01 	lds	r20, 0x0134
 5a2:	47 fd       	sbrc	r20, 7
 5a4:	1f c0       	rjmp	.+62     	; 0x5e4 <__vector_14+0x70>
    // optellen. Bij deze optelling kan een overflow onstaan gelukkig
    // is het filter zo dat ik kan garanderen dat input en output binnen
    // een 16bit word passen dus zal een evetuele tijdelijk overflow in een
    // tussen resultaat geen probleem opleveren.
    //output = input+output - (output>>4);
    output = input+output - (output>>6);
 5a6:	82 0f       	add	r24, r18
 5a8:	93 1f       	adc	r25, r19
 5aa:	00 24       	eor	r0, r0
 5ac:	22 0f       	add	r18, r18
 5ae:	33 1f       	adc	r19, r19
 5b0:	00 1c       	adc	r0, r0
 5b2:	22 0f       	add	r18, r18
 5b4:	33 1f       	adc	r19, r19
 5b6:	00 1c       	adc	r0, r0
 5b8:	23 2f       	mov	r18, r19
 5ba:	30 2d       	mov	r19, r0
 5bc:	82 1b       	sub	r24, r18
 5be:	93 0b       	sbc	r25, r19

    if (brugBlokDDR & (1<<DDD7))
 5c0:	20 91 34 01 	lds	r18, 0x0134
 5c4:	27 fd       	sbrc	r18, 7
 5c6:	13 c0       	rjmp	.+38     	; 0x5ee <__vector_14+0x7a>
        }
        blokOn = output;
    }
    else
    {
        blokOff = output;
 5c8:	90 93 2c 01 	sts	0x012C, r25
 5cc:	80 93 2b 01 	sts	0x012B, r24
    }
}
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	4f 91       	pop	r20
 5d6:	3f 91       	pop	r19
 5d8:	2f 91       	pop	r18
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti
    // convert adInput number to a bit mask

    uint16_t output = blokOff;
    if (brugBlokDDR & (1<<DDD7))
    {
        output = blokOn;
 5e4:	20 91 28 01 	lds	r18, 0x0128
 5e8:	30 91 29 01 	lds	r19, 0x0129
 5ec:	dc cf       	rjmp	.-72     	; 0x5a6 <__vector_14+0x32>
    output = input+output - (output>>6);

    if (brugBlokDDR & (1<<DDD7))
    {
        // blok heeft spanning
        if ((output > LOW_LEVEL_DREMPEL) && (output < HIGH_LEVEL_DREMPEL))
 5ee:	9c 01       	movw	r18, r24
 5f0:	21 50       	subi	r18, 0x01	; 1
 5f2:	36 44       	sbci	r19, 0x46	; 70
 5f4:	2f 3f       	cpi	r18, 0xFF	; 255
 5f6:	32 47       	sbci	r19, 0x72	; 114
 5f8:	30 f4       	brcc	.+12     	; 0x606 <__vector_14+0x92>
        {
            // spanning binnen low en high dus concludeer ik kortsluiting
            // zet dit blok nu uit
            DDRD &= ~(1<<DDD7);
 5fa:	8f 98       	cbi	0x11, 7	; 17
            snelheid |= 0x40;  // zet bit 6 om kortsluiting te melden
 5fc:	20 91 2f 01 	lds	r18, 0x012F
 600:	20 64       	ori	r18, 0x40	; 64
 602:	20 93 2f 01 	sts	0x012F, r18
        }
        blokOn = output;
 606:	90 93 29 01 	sts	0x0129, r25
 60a:	80 93 28 01 	sts	0x0128, r24
 60e:	e0 cf       	rjmp	.-64     	; 0x5d0 <__vector_14+0x5c>

00000610 <updatePosition>:
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
 610:	90 91 62 00 	lds	r25, 0x0062
 614:	e9 2f       	mov	r30, r25
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	40 91 37 01 	lds	r20, 0x0137
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	68 2f       	mov	r22, r24
 620:	08 2e       	mov	r0, r24
 622:	00 0c       	add	r0, r0
 624:	77 0b       	sbc	r23, r23
 626:	ee 0f       	add	r30, r30
 628:	ff 1f       	adc	r31, r31
 62a:	e4 0f       	add	r30, r20
 62c:	f5 1f       	adc	r31, r21
 62e:	ee 0f       	add	r30, r30
 630:	ff 1f       	adc	r31, r31
 632:	e9 59       	subi	r30, 0x99	; 153
 634:	ff 4f       	sbci	r31, 0xFF	; 255
 636:	20 81       	ld	r18, Z
 638:	31 81       	ldd	r19, Z+1	; 0x01
 63a:	26 0f       	add	r18, r22
 63c:	37 1f       	adc	r19, r23
 63e:	31 83       	std	Z+1, r19	; 0x01
 640:	20 83       	st	Z, r18
    if (huidigePositie == 0)
 642:	91 11       	cpse	r25, r1
 644:	11 c0       	rjmp	.+34     	; 0x668 <updatePosition+0x58>
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	fa 01       	movw	r30, r20
 64c:	e9 59       	subi	r30, 0x99	; 153
 64e:	ff 4f       	sbci	r31, 0xFF	; 255
 650:	4d 5d       	subi	r20, 0xDD	; 221
 652:	5e 4f       	sbci	r21, 0xFE	; 254
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
 654:	24 81       	ldd	r18, Z+4	; 0x04
 656:	35 81       	ldd	r19, Z+5	; 0x05
 658:	26 0f       	add	r18, r22
 65a:	37 1f       	adc	r19, r23
 65c:	35 83       	std	Z+5, r19	; 0x05
 65e:	24 83       	std	Z+4, r18	; 0x04
 660:	34 96       	adiw	r30, 0x04	; 4
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
 662:	e4 17       	cp	r30, r20
 664:	f5 07       	cpc	r31, r21
 666:	b1 f7       	brne	.-20     	; 0x654 <updatePosition+0x44>
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
 668:	87 fd       	sbrc	r24, 7
 66a:	06 c0       	rjmp	.+12     	; 0x678 <updatePosition+0x68>
    {
        PORTB &= ~(1<<PB0);
 66c:	c0 98       	cbi	0x18, 0	; 24
        step = update;
 66e:	70 93 64 00 	sts	0x0064, r23
 672:	60 93 63 00 	sts	0x0063, r22
 676:	08 95       	ret
    }
    else
    {
        PORTB |= (1<<PB0);
 678:	c0 9a       	sbi	0x18, 0	; 24
        step = -update;
 67a:	71 95       	neg	r23
 67c:	61 95       	neg	r22
 67e:	71 09       	sbc	r23, r1
 680:	70 93 64 00 	sts	0x0064, r23
 684:	60 93 63 00 	sts	0x0063, r22
 688:	08 95       	ret

0000068a <huisVerlichting>:
    }
}

void huisVerlichting( bool aan)
{
    if (aan)
 68a:	81 11       	cpse	r24, r1
 68c:	02 c0       	rjmp	.+4      	; 0x692 <huisVerlichting+0x8>
    {
        PORTC &= ~(1<<PC4);
        huisDecimation = 0;
    }
    else
        PORTC |= (1<<PC4);
 68e:	ac 9a       	sbi	0x15, 4	; 21
 690:	08 95       	ret

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
 692:	ac 98       	cbi	0x15, 4	; 21
        huisDecimation = 0;
 694:	10 92 30 01 	sts	0x0130, r1
 698:	08 95       	ret

0000069a <main>:
    else
        PORTC |= (1<<PC4);
}

void main()
{
 69a:	2f 92       	push	r2
 69c:	3f 92       	push	r3
 69e:	4f 92       	push	r4
 6a0:	5f 92       	push	r5
 6a2:	6f 92       	push	r6
 6a4:	7f 92       	push	r7
 6a6:	8f 92       	push	r8
 6a8:	9f 92       	push	r9
 6aa:	af 92       	push	r10
 6ac:	bf 92       	push	r11
 6ae:	cf 92       	push	r12
 6b0:	df 92       	push	r13
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
    //PORTD = (1 << DDD6) | (1 << DDD7); // bit 6..7 pullup
    DDRD = (1 << DDD2)| (1 << DDD3)| (1 << DDD4)| (1 << DDD5)| (1 << DDD6); // 2..6 output 7 input
 6be:	8c e7       	ldi	r24, 0x7C	; 124
 6c0:	81 bb       	out	0x11, r24	; 17
    PORTD = 31 <<2; // alle Blok Relais uit d2..d6
 6c2:	82 bb       	out	0x12, r24	; 18
    // PC4 Led Lamp
    // ingang
    // PC2 Homing
    // PC3 Platform middel
    // PC5 locloods lamp
    DDRC = (1 << DDC1) | (1 << DDC4) | (1<<DDC5);
 6c4:	82 e3       	ldi	r24, 0x32	; 50
 6c6:	84 bb       	out	0x14, r24	; 20

    DDRB = (1 << DDB0)| (1 << DDB1)| (1 << DDB2)| (1 << DDB3)| (1 << DDB4)| (1 << DDB5); // 0..5 output
 6c8:	8f e3       	ldi	r24, 0x3F	; 63
 6ca:	87 bb       	out	0x17, r24	; 23
    PORTB = (1<<PB2) + STEPPING;  // motor disabled and fullstep enable alleen als we een draai commando krijgen
 6cc:	8c e1       	ldi	r24, 0x1C	; 28
 6ce:	88 bb       	out	0x18, r24	; 24
    // ADEN  ADSC  ADFR  ADIF  ADIE  ADPS2 ADPS1 ADPS0
    // we enablen de ad converter ADEN en enablen de interrupt ADIE
    // en we selecteren division factor 128 en dat geeft
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);
 6d0:	8f e8       	ldi	r24, 0x8F	; 143
 6d2:	86 b9       	out	0x06, r24	; 6
 6d4:	03 e0       	ldi	r16, 0x03	; 3
 6d6:	10 e0       	ldi	r17, 0x00	; 0
 6d8:	b7 e6       	ldi	r27, 0x67	; 103
 6da:	eb 2e       	mov	r14, r27
 6dc:	b0 e0       	ldi	r27, 0x00	; 0
 6de:	fb 2e       	mov	r15, r27
 6e0:	c3 ec       	ldi	r28, 0xC3	; 195
 6e2:	4c 2e       	mov	r4, r28
 6e4:	c0 e0       	ldi	r28, 0x00	; 0
 6e6:	5c 2e       	mov	r5, r28
 6e8:	67 01       	movw	r12, r14
 6ea:	e8 01       	movw	r28, r16


    for (uint8_t i=0;i<48;i++)
    {
        stepTabel[i][0] = eeprom_read_word((uint16_t*)&stepTabelRom[i][0]);
 6ec:	ce 01       	movw	r24, r28
 6ee:	f9 d2       	rcall	.+1522   	; 0xce2 <eeprom_read_word>
 6f0:	f6 01       	movw	r30, r12
 6f2:	91 83       	std	Z+1, r25	; 0x01
 6f4:	80 83       	st	Z, r24
        stepTabel[i][1] = eeprom_read_word((uint16_t*)&stepTabelRom[i][1]);
 6f6:	ce 01       	movw	r24, r28
 6f8:	02 96       	adiw	r24, 0x02	; 2
 6fa:	f3 d2       	rcall	.+1510   	; 0xce2 <eeprom_read_word>
 6fc:	f6 01       	movw	r30, r12
 6fe:	93 83       	std	Z+3, r25	; 0x03
 700:	82 83       	std	Z+2, r24	; 0x02
 702:	24 96       	adiw	r28, 0x04	; 4
 704:	f4 e0       	ldi	r31, 0x04	; 4
 706:	cf 0e       	add	r12, r31
 708:	d1 1c       	adc	r13, r1
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);


    for (uint8_t i=0;i<48;i++)
 70a:	20 e0       	ldi	r18, 0x00	; 0
 70c:	c3 3c       	cpi	r28, 0xC3	; 195
 70e:	d2 07       	cpc	r29, r18
 710:	69 f7       	brne	.-38     	; 0x6ec <main+0x52>
    }


    //zet de baud rate van de uart 28800 met 14.7456Mhz
    // klok.geeft 31 voor de deler
    UBRRL = 31;
 712:	8f e1       	ldi	r24, 0x1F	; 31
 714:	89 b9       	out	0x09, r24	; 9

    // zet de uart aan
    //   7     6     5     4     3     2     1     0
    // RXCIE TXCIE UDRIE RXEN  TXEN  CHR9  RXB8  TXB8
    // dit is voor een blok
    UCSRB = (1<<RXCIE)+(1<<RXEN)+(1<<TXEN);
 716:	88 e9       	ldi	r24, 0x98	; 152
 718:	8a b9       	out	0x0a, r24	; 10
    // tijdelijk voor test
    //UCSRB =(1<<RXCIE)+(1<<UDRIE)+(1<<RXEN)+(1<<TXEN);
    //UDR = 0xf0;
    //UCSRA = 0; //(1<<UDRE);

    byteCount = 0;
 71a:	10 92 27 01 	sts	0x0127, r1
    syncCount = SYNC_COUNT;
 71e:	8f e7       	ldi	r24, 0x7F	; 127
 720:	80 93 36 01 	sts	0x0136, r24
    uartData1 = uartData2 = 1; // geen 0 want er is geen sync
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	80 93 32 01 	sts	0x0132, r24
 72a:	80 93 2a 01 	sts	0x012A, r24
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 72e:	9a e0       	ldi	r25, 0x0A	; 10
 730:	88 e1       	ldi	r24, 0x18	; 24
 732:	0f b6       	in	r0, 0x3f	; 63
 734:	f8 94       	cli
 736:	a8 95       	wdr
 738:	81 bd       	out	0x21, r24	; 33
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	91 bd       	out	0x21, r25	; 33
    wdt_enable(WDTO_60MS);
    sei ();
 73e:	78 94       	sei

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
 740:	ac 98       	cbi	0x15, 4	; 21
        huisDecimation = 0;
 742:	10 92 30 01 	sts	0x0130, r1
 746:	90 91 36 01 	lds	r25, 0x0136
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
 74a:	d1 e0       	ldi	r29, 0x01	; 1
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
                    {
                        step = 1; // correct status
 74c:	cc 24       	eor	r12, r12
 74e:	c3 94       	inc	r12
 750:	d1 2c       	mov	r13, r1
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
        step = -update;
 752:	e2 e0       	ldi	r30, 0x02	; 2
 754:	ae 2e       	mov	r10, r30
 756:	b1 2c       	mov	r11, r1
                    {

                        UDR = blokOff >> 8;
                        snelheid = snelheid &0x80; // onthoud richting
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
 758:	61 2c       	mov	r6, r1
 75a:	f6 ee       	ldi	r31, 0xE6	; 230
 75c:	7f 2e       	mov	r7, r31
 75e:	21 2c       	mov	r2, r1
 760:	a9 e1       	ldi	r26, 0x19	; 25
 762:	3a 2e       	mov	r3, r26
    sei ();
    huisVerlichting(true);

    do
    {
        while(byteCount!=2);
 764:	80 91 27 01 	lds	r24, 0x0127
 768:	82 30       	cpi	r24, 0x02	; 2
 76a:	e1 f7       	brne	.-8      	; 0x764 <main+0xca>
        byteCount = 0;
 76c:	10 92 27 01 	sts	0x0127, r1
        // er zijn 2 bytes
        syncCount -= 1;
 770:	91 50       	subi	r25, 0x01	; 1
        if (syncCount)
 772:	c1 f3       	breq	.-16     	; 0x764 <main+0xca>
 774:	90 93 36 01 	sts	0x0136, r25
        {

            if ((uartData1==0) && (uartData2==0))
 778:	80 91 2a 01 	lds	r24, 0x012A
 77c:	81 11       	cpse	r24, r1
 77e:	23 c0       	rjmp	.+70     	; 0x7c6 <main+0x12c>
 780:	80 91 32 01 	lds	r24, 0x0132
 784:	81 11       	cpse	r24, r1
 786:	1f c0       	rjmp	.+62     	; 0x7c6 <main+0x12c>
            {
                // we hebben een sync
                syncCount = SYNC_COUNT;
 788:	8f e7       	ldi	r24, 0x7F	; 127
 78a:	80 93 36 01 	sts	0x0136, r24
                pulseBreedteCount = 0;
 78e:	10 92 35 01 	sts	0x0135, r1
                uartData1 = uartData2 = 1;// geen 0 want er is geen sync
 792:	d0 93 32 01 	sts	0x0132, r29
 796:	d0 93 2a 01 	sts	0x012A, r29
                inSync = true;
 79a:	d0 93 31 01 	sts	0x0131, r29
                if (step == 0)
 79e:	80 91 63 00 	lds	r24, 0x0063
 7a2:	90 91 64 00 	lds	r25, 0x0064
 7a6:	89 2b       	or	r24, r25
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <main+0x11e>
                {
                    huisDecimation += 1;
 7aa:	80 91 30 01 	lds	r24, 0x0130
 7ae:	8f 5f       	subi	r24, 0xFF	; 255
 7b0:	80 93 30 01 	sts	0x0130, r24
                    if (huisDecimation == 250)
 7b4:	8a 3f       	cpi	r24, 0xFA	; 250
 7b6:	19 f0       	breq	.+6      	; 0x7be <main+0x124>
    // ADEN  ADSC  ADFR  ADIF  ADIE  ADPS2 ADPS1 ADPS0
    // we enablen de ad converter ADEN en enablen de interrupt ADIE
    // en we selecteren division factor 128 en dat geeft
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);
 7b8:	9f e7       	ldi	r25, 0x7F	; 127
                    if (huisDecimation == 250)
                    {
                        huisVerlichting(false);
                    }
                }
                wdt_reset();
 7ba:	a8 95       	wdr
 7bc:	d3 cf       	rjmp	.-90     	; 0x764 <main+0xca>
    {
        PORTC &= ~(1<<PC4);
        huisDecimation = 0;
    }
    else
        PORTC |= (1<<PC4);
 7be:	ac 9a       	sbi	0x15, 4	; 21
 7c0:	90 91 36 01 	lds	r25, 0x0136
 7c4:	fa cf       	rjmp	.-12     	; 0x7ba <main+0x120>
                wdt_reset();
            }
            else
            {
                // in de assembly van de blok controller word naar een adres 0 gekeken naar een reset commando, Ik geloof niet dat ik daar gebruik van maak
                uint16_t adres = uartData1 | ((uartData2&0x3)<<8);
 7c6:	80 90 2a 01 	lds	r8, 0x012A
 7ca:	80 91 32 01 	lds	r24, 0x0132
 7ce:	83 70       	andi	r24, 0x03	; 3
 7d0:	91 2c       	mov	r9, r1
 7d2:	98 2a       	or	r9, r24
                uint8_t data = uartData2 >> 2;
 7d4:	c0 91 32 01 	lds	r28, 0x0132
 7d8:	c6 95       	lsr	r28
 7da:	c6 95       	lsr	r28

                uint16_t startAdres = eeprom_read_word (&EepromAdres);
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	80 d2       	rcall	.+1280   	; 0xce2 <eeprom_read_word>
                cli();
 7e2:	f8 94       	cli
                if (startAdres == adres)
 7e4:	88 15       	cp	r24, r8
 7e6:	99 05       	cpc	r25, r9
 7e8:	a9 f0       	breq	.+42     	; 0x814 <main+0x17a>
                        }

                    }

                }
                else if ((startAdres+1) == adres)
 7ea:	9c 01       	movw	r18, r24
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
 7ee:	3f 4f       	sbci	r19, 0xFF	; 255
 7f0:	28 15       	cp	r18, r8
 7f2:	39 05       	cpc	r19, r9
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <main+0x15e>
 7f6:	61 c0       	rjmp	.+194    	; 0x8ba <main+0x220>
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
                }
                else if (((startAdres+2) == adres) || ((startAdres+3) == adres))
 7f8:	9c 01       	movw	r18, r24
 7fa:	2e 5f       	subi	r18, 0xFE	; 254
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	03 96       	adiw	r24, 0x03	; 3
 800:	28 15       	cp	r18, r8
 802:	39 05       	cpc	r19, r9
 804:	d9 f0       	breq	.+54     	; 0x83c <main+0x1a2>
 806:	88 15       	cp	r24, r8
 808:	99 05       	cpc	r25, r9
 80a:	c1 f0       	breq	.+48     	; 0x83c <main+0x1a2>
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
                    }

                }
                sei ();
 80c:	78 94       	sei
 80e:	90 91 36 01 	lds	r25, 0x0136
 812:	a8 cf       	rjmp	.-176    	; 0x764 <main+0xca>
                uint16_t startAdres = eeprom_read_word (&EepromAdres);
                cli();
                if (startAdres == adres)
                {
                    //blok ccommandos
                    if (data==VOORUIT)
 814:	c1 30       	cpi	r28, 0x01	; 1
 816:	09 f4       	brne	.+2      	; 0x81a <main+0x180>
 818:	a3 c0       	rjmp	.+326    	; 0x960 <main+0x2c6>
                    {
                        snelheid |= 0x80;
                        UDR = blokOn >> 8;
                        blokOn = HIGH_LEVEL;
                    }
                    else if (data==ACHTERUIT)
 81a:	c2 30       	cpi	r28, 0x02	; 2
 81c:	09 f4       	brne	.+2      	; 0x820 <main+0x186>
 81e:	c6 c0       	rjmp	.+396    	; 0x9ac <main+0x312>
                    {
                        snelheid &= ~0x80;
                        UDR = blokOn >> 8;
                        blokOn = LOW_LEVEL;
                    }
                    else if (data>= GROEN)
 820:	cd 33       	cpi	r28, 0x3D	; 61
 822:	08 f4       	brcc	.+2      	; 0x826 <main+0x18c>
 824:	ac c0       	rjmp	.+344    	; 0x97e <main+0x2e4>
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
 826:	80 91 2f 01 	lds	r24, 0x012F
 82a:	86 fd       	sbrc	r24, 6
 82c:	ee c0       	rjmp	.+476    	; 0xa0a <main+0x370>
 82e:	80 91 2b 01 	lds	r24, 0x012B
 832:	90 91 2c 01 	lds	r25, 0x012C
 836:	89 2f       	mov	r24, r25
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
 838:	8c b9       	out	0x0c, r24	; 12
 83a:	e8 cf       	rjmp	.-48     	; 0x80c <main+0x172>

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
 83c:	ac 98       	cbi	0x15, 4	; 21
        huisDecimation = 0;
 83e:	10 92 30 01 	sts	0x0130, r1
                {
                    bool tweedeIndex = ((startAdres+3) == adres);

                    // draai commando
                    huisVerlichting(true);
                    if (data<=60)
 842:	cd 33       	cpi	r28, 0x3D	; 61
 844:	08 f4       	brcc	.+2      	; 0x848 <main+0x1ae>
 846:	55 c0       	rjmp	.+170    	; 0x8f2 <main+0x258>

                    else if (data==48)
                    {
                        updatePosition(1);
                    }
                    else if (data==49)
 848:	c1 33       	cpi	r28, 0x31	; 49
 84a:	09 f4       	brne	.+2      	; 0x84e <main+0x1b4>
 84c:	07 c1       	rjmp	.+526    	; 0xa5c <main+0x3c2>
                    {
                        updatePosition(-1);
                    }
                    else if (data==50)
 84e:	c2 33       	cpi	r28, 0x32	; 50
 850:	09 f4       	brne	.+2      	; 0x854 <main+0x1ba>
 852:	e7 c0       	rjmp	.+462    	; 0xa22 <main+0x388>
                    {
                        updatePosition(2);
                    }
                    else if (data==51)
 854:	c3 33       	cpi	r28, 0x33	; 51
 856:	09 f4       	brne	.+2      	; 0x85a <main+0x1c0>
 858:	70 c1       	rjmp	.+736    	; 0xb3a <main+0x4a0>
                    {
                        updatePosition(-2);
                    }
                    else if (data==52)
 85a:	c4 33       	cpi	r28, 0x34	; 52
 85c:	09 f4       	brne	.+2      	; 0x860 <main+0x1c6>
 85e:	4e c1       	rjmp	.+668    	; 0xafc <main+0x462>
                    {
                        updatePosition(4);
                    }
                    else if (data==53)
 860:	c5 33       	cpi	r28, 0x35	; 53
 862:	09 f4       	brne	.+2      	; 0x866 <main+0x1cc>
 864:	ae c1       	rjmp	.+860    	; 0xbc2 <main+0x528>
                    {
                        updatePosition(-4);
                    }
                    else if (data==54)
 866:	c6 33       	cpi	r28, 0x36	; 54
 868:	09 f4       	brne	.+2      	; 0x86c <main+0x1d2>
 86a:	a8 c1       	rjmp	.+848    	; 0xbbc <main+0x522>
                    {
                        updatePosition(8);
                    }
                    else if (data==55)
 86c:	c7 33       	cpi	r28, 0x37	; 55
 86e:	09 f4       	brne	.+2      	; 0x872 <main+0x1d8>
 870:	32 c2       	rjmp	.+1124   	; 0xcd6 <main+0x63c>
                    {
                        updatePosition(-8);
                    }
                    else if (data==56)
 872:	c8 33       	cpi	r28, 0x38	; 56
 874:	09 f4       	brne	.+2      	; 0x878 <main+0x1de>
 876:	2c c2       	rjmp	.+1112   	; 0xcd0 <main+0x636>
                    {
                        updatePosition(16);
                    }
                    else if (data==57)
 878:	c9 33       	cpi	r28, 0x39	; 57
 87a:	09 f4       	brne	.+2      	; 0x87e <main+0x1e4>
 87c:	2f c2       	rjmp	.+1118   	; 0xcdc <main+0x642>
                    {
                        updatePosition(-16);
                    }
                    else if (data==58)
 87e:	ca 33       	cpi	r28, 0x3A	; 58
 880:	09 f4       	brne	.+2      	; 0x884 <main+0x1ea>
 882:	23 c2       	rjmp	.+1094   	; 0xcca <main+0x630>
                    {
                        updatePosition(32);
                    }
                    else if (data==59)
 884:	cb 33       	cpi	r28, 0x3B	; 59
 886:	09 f4       	brne	.+2      	; 0x88a <main+0x1f0>
 888:	b3 c1       	rjmp	.+870    	; 0xbf0 <main+0x556>
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
 88a:	cc 33       	cpi	r28, 0x3C	; 60
 88c:	09 f4       	brne	.+2      	; 0x890 <main+0x1f6>
 88e:	9c c1       	rjmp	.+824    	; 0xbc8 <main+0x52e>
                            step = stepTabel[1][0];
                            homingReverse = true;
                        }
                        doHoming = true;
                    }
                    else if (data==62)
 890:	ce 33       	cpi	r28, 0x3E	; 62
 892:	09 f4       	brne	.+2      	; 0x896 <main+0x1fc>
 894:	e1 c1       	rjmp	.+962    	; 0xc58 <main+0x5be>
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
 896:	20 91 63 00 	lds	r18, 0x0063
 89a:	30 91 64 00 	lds	r19, 0x0064
 89e:	80 91 2e 01 	lds	r24, 0x012E
 8a2:	90 91 60 00 	lds	r25, 0x0060
 8a6:	99 0f       	add	r25, r25
 8a8:	89 0f       	add	r24, r25
 8aa:	88 0f       	add	r24, r24
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	23 2b       	or	r18, r19
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <main+0x21a>
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	89 0f       	add	r24, r25
 8b6:	8c b9       	out	0x0c, r24	; 12
 8b8:	a9 cf       	rjmp	.-174    	; 0x80c <main+0x172>
                    }

                }
                else if ((startAdres+1) == adres)
                {
                    if (data == 63)
 8ba:	cf 33       	cpi	r28, 0x3F	; 63
 8bc:	09 f4       	brne	.+2      	; 0x8c0 <main+0x226>
 8be:	8d c0       	rjmp	.+282    	; 0x9da <main+0x340>
                    {
                        PORTC |= (1<<PC1);
                    }
                    else if (data == 62)
 8c0:	ce 33       	cpi	r28, 0x3E	; 62
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <main+0x22c>
 8c4:	a9 c0       	rjmp	.+338    	; 0xa18 <main+0x37e>
                    {
                        PORTC &= ~(1<<PC1);
                    }
                    else if (data==60)
 8c6:	cc 33       	cpi	r28, 0x3C	; 60
 8c8:	09 f4       	brne	.+2      	; 0x8cc <main+0x232>
 8ca:	a2 c0       	rjmp	.+324    	; 0xa10 <main+0x376>
                    {
                        middenDetectie = true;
                    }
                    else if (data==61)
 8cc:	cd 33       	cpi	r28, 0x3D	; 61
 8ce:	09 f4       	brne	.+2      	; 0x8d2 <main+0x238>
 8d0:	09 c1       	rjmp	.+530    	; 0xae4 <main+0x44a>
                    {
                        middenDetected = false;
                        middenDetectie = false;
                    }
                    else if (data==58)
 8d2:	ca 33       	cpi	r28, 0x3A	; 58
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <main+0x23e>
 8d6:	0f c1       	rjmp	.+542    	; 0xaf6 <main+0x45c>
                    {
                        PORTC |= (1<<PC5);
                    }
                    else if (data==59)
 8d8:	cb 33       	cpi	r28, 0x3B	; 59
 8da:	09 f4       	brne	.+2      	; 0x8de <main+0x244>
 8dc:	09 c1       	rjmp	.+530    	; 0xaf0 <main+0x456>
                    }
                    else
                    {
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
 8de:	82 b3       	in	r24, 0x12	; 18
 8e0:	9c 2f       	mov	r25, r28
 8e2:	9f 71       	andi	r25, 0x1F	; 31
 8e4:	99 0f       	add	r25, r25
 8e6:	99 0f       	add	r25, r25
 8e8:	83 78       	andi	r24, 0x83	; 131
 8ea:	89 2b       	or	r24, r25
 8ec:	82 bb       	out	0x12, r24	; 18
                    }

                    UDR = 0; // misschien iets van de detectors
 8ee:	1c b8       	out	0x0c, r1	; 12
 8f0:	8d cf       	rjmp	.-230    	; 0x80c <main+0x172>

                    // draai commando
                    huisVerlichting(true);
                    if (data<=60)
                    {
                        PORTB = STEPPING;  // motor enabled and fullstep
 8f2:	e8 e1       	ldi	r30, 0x18	; 24
 8f4:	e8 bb       	out	0x18, r30	; 24
                    }

                    if (data<48)
 8f6:	c0 33       	cpi	r28, 0x30	; 48
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <main+0x262>
 8fa:	7d c1       	rjmp	.+762    	; 0xbf6 <main+0x55c>
                    {
                        if (huidigePositie == data)
 8fc:	50 91 62 00 	lds	r21, 0x0062
 900:	5c 17       	cp	r21, r28
 902:	49 f2       	breq	.-110    	; 0x896 <main+0x1fc>

                    UDR = 0; // misschien iets van de detectors
                }
                else if (((startAdres+2) == adres) || ((startAdres+3) == adres))
                {
                    bool tweedeIndex = ((startAdres+3) == adres);
 904:	41 e0       	ldi	r20, 0x01	; 1
 906:	88 16       	cp	r8, r24
 908:	99 06       	cpc	r9, r25
 90a:	09 f0       	breq	.+2      	; 0x90e <main+0x274>
 90c:	40 e0       	ldi	r20, 0x00	; 0
                        if (huidigePositie == data)
                        {
                        }
                        else
                        {
                            int16_t naar = stepTabel[data][tweedeIndex];
 90e:	ec 2f       	mov	r30, r28
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	e4 0f       	add	r30, r20
 918:	f1 1d       	adc	r31, r1
 91a:	ee 0f       	add	r30, r30
 91c:	ff 1f       	adc	r31, r31
 91e:	e9 59       	subi	r30, 0x99	; 153
 920:	ff 4f       	sbci	r31, 0xFF	; 255
 922:	80 81       	ld	r24, Z
 924:	91 81       	ldd	r25, Z+1	; 0x01
                            int16_t van = stepTabel[huidigePositie][huidigePosititieTweedeIndex];
 926:	e5 2f       	mov	r30, r21
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	20 91 37 01 	lds	r18, 0x0137
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	e2 0f       	add	r30, r18
 934:	f1 1d       	adc	r31, r1
 936:	ee 0f       	add	r30, r30
 938:	ff 1f       	adc	r31, r31
 93a:	e9 59       	subi	r30, 0x99	; 153
 93c:	ff 4f       	sbci	r31, 0xFF	; 255
 93e:	20 81       	ld	r18, Z
 940:	31 81       	ldd	r19, Z+1	; 0x01
                            if (huidigePositie < data)
 942:	5c 17       	cp	r21, r28
 944:	08 f0       	brcs	.+2      	; 0x948 <main+0x2ae>
 946:	41 c0       	rjmp	.+130    	; 0x9ca <main+0x330>
                            {
                                PORTB &= ~(1<<PB0);
 948:	c0 98       	cbi	0x18, 0	; 24
                                step = naar - van;
 94a:	82 1b       	sub	r24, r18
 94c:	93 0b       	sbc	r25, r19
 94e:	90 93 64 00 	sts	0x0064, r25
 952:	80 93 63 00 	sts	0x0063, r24
                            else
                            {
                                PORTB |= (1<<PB0);
                                step = van - naar;
                            }
                            huidigePositie = data;
 956:	c0 93 62 00 	sts	0x0062, r28
                            huidigePosititieTweedeIndex = tweedeIndex;
 95a:	40 93 37 01 	sts	0x0137, r20
 95e:	9b cf       	rjmp	.-202    	; 0x896 <main+0x1fc>
                if (startAdres == adres)
                {
                    //blok ccommandos
                    if (data==VOORUIT)
                    {
                        snelheid |= 0x80;
 960:	80 91 2f 01 	lds	r24, 0x012F
 964:	80 68       	ori	r24, 0x80	; 128
 966:	80 93 2f 01 	sts	0x012F, r24
                        UDR = blokOn >> 8;
 96a:	80 91 28 01 	lds	r24, 0x0128
 96e:	90 91 29 01 	lds	r25, 0x0129
 972:	9c b9       	out	0x0c, r25	; 12
                        blokOn = HIGH_LEVEL;
 974:	70 92 29 01 	sts	0x0129, r7
 978:	60 92 28 01 	sts	0x0128, r6
 97c:	47 cf       	rjmp	.-370    	; 0x80c <main+0x172>
                    else if (data>= GROEN)
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
                    }
                    else if (data ==0)
 97e:	c1 11       	cpse	r28, r1
 980:	2f c0       	rjmp	.+94     	; 0x9e0 <main+0x346>
                    {

                        UDR = blokOff >> 8;
 982:	80 91 2b 01 	lds	r24, 0x012B
 986:	90 91 2c 01 	lds	r25, 0x012C
 98a:	9c b9       	out	0x0c, r25	; 12
                        snelheid = snelheid &0x80; // onthoud richting
 98c:	80 91 2f 01 	lds	r24, 0x012F
 990:	80 78       	andi	r24, 0x80	; 128
 992:	80 93 2f 01 	sts	0x012F, r24
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
 996:	80 91 2f 01 	lds	r24, 0x012F
 99a:	87 fd       	sbrc	r24, 7
 99c:	a0 c0       	rjmp	.+320    	; 0xade <main+0x444>
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	99 e1       	ldi	r25, 0x19	; 25
 9a2:	90 93 29 01 	sts	0x0129, r25
 9a6:	80 93 28 01 	sts	0x0128, r24
 9aa:	30 cf       	rjmp	.-416    	; 0x80c <main+0x172>
                        UDR = blokOn >> 8;
                        blokOn = HIGH_LEVEL;
                    }
                    else if (data==ACHTERUIT)
                    {
                        snelheid &= ~0x80;
 9ac:	80 91 2f 01 	lds	r24, 0x012F
 9b0:	8f 77       	andi	r24, 0x7F	; 127
 9b2:	80 93 2f 01 	sts	0x012F, r24
                        UDR = blokOn >> 8;
 9b6:	80 91 28 01 	lds	r24, 0x0128
 9ba:	90 91 29 01 	lds	r25, 0x0129
 9be:	9c b9       	out	0x0c, r25	; 12
                        blokOn = LOW_LEVEL;
 9c0:	30 92 29 01 	sts	0x0129, r3
 9c4:	20 92 28 01 	sts	0x0128, r2
 9c8:	21 cf       	rjmp	.-446    	; 0x80c <main+0x172>
                                step = naar - van;

                            }
                            else
                            {
                                PORTB |= (1<<PB0);
 9ca:	c0 9a       	sbi	0x18, 0	; 24
                                step = van - naar;
 9cc:	28 1b       	sub	r18, r24
 9ce:	39 0b       	sbc	r19, r25
 9d0:	30 93 64 00 	sts	0x0064, r19
 9d4:	20 93 63 00 	sts	0x0063, r18
 9d8:	be cf       	rjmp	.-132    	; 0x956 <main+0x2bc>
                }
                else if ((startAdres+1) == adres)
                {
                    if (data == 63)
                    {
                        PORTC |= (1<<PC1);
 9da:	a9 9a       	sbi	0x15, 1	; 21
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
 9dc:	1c b8       	out	0x0c, r1	; 12
 9de:	16 cf       	rjmp	.-468    	; 0x80c <main+0x172>
                    }
                    else
                    {
                        // snelheid commando
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
 9e0:	80 91 2f 01 	lds	r24, 0x012F
 9e4:	86 fd       	sbrc	r24, 6
 9e6:	1b c0       	rjmp	.+54     	; 0xa1e <main+0x384>
 9e8:	80 91 2b 01 	lds	r24, 0x012B
 9ec:	90 91 2c 01 	lds	r25, 0x012C
 9f0:	89 2f       	mov	r24, r25
 9f2:	8c b9       	out	0x0c, r24	; 12
                        if (middenDetected == false)
 9f4:	80 91 2e 01 	lds	r24, 0x012E
 9f8:	81 11       	cpse	r24, r1
 9fa:	08 cf       	rjmp	.-496    	; 0x80c <main+0x172>
                        {
                            // alleen een snelheid update als er nog geen midden detectie gedaan is.
                            snelheid = (snelheid &0xc0) | data; // onthoud richting en kortsluiting
 9fc:	80 91 2f 01 	lds	r24, 0x012F
 a00:	80 7c       	andi	r24, 0xC0	; 192
 a02:	c8 2b       	or	r28, r24
 a04:	c0 93 2f 01 	sts	0x012F, r28
 a08:	01 cf       	rjmp	.-510    	; 0x80c <main+0x172>
                        blokOn = LOW_LEVEL;
                    }
                    else if (data>= GROEN)
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
 a0a:	80 e0       	ldi	r24, 0x00	; 0
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
 a0c:	8c b9       	out	0x0c, r24	; 12
 a0e:	fe ce       	rjmp	.-516    	; 0x80c <main+0x172>
                    {
                        PORTC &= ~(1<<PC1);
                    }
                    else if (data==60)
                    {
                        middenDetectie = true;
 a10:	d0 93 2d 01 	sts	0x012D, r29
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
 a14:	1c b8       	out	0x0c, r1	; 12
 a16:	fa ce       	rjmp	.-524    	; 0x80c <main+0x172>
                    {
                        PORTC |= (1<<PC1);
                    }
                    else if (data == 62)
                    {
                        PORTC &= ~(1<<PC1);
 a18:	a9 98       	cbi	0x15, 1	; 21
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
 a1a:	1c b8       	out	0x0c, r1	; 12
 a1c:	f7 ce       	rjmp	.-530    	; 0x80c <main+0x172>
                    }
                    else
                    {
                        // snelheid commando
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	e8 cf       	rjmp	.-48     	; 0x9f2 <main+0x358>
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
 a22:	40 91 62 00 	lds	r20, 0x0062
 a26:	e4 2f       	mov	r30, r20
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 91 37 01 	lds	r24, 0x0137
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	ee 0f       	add	r30, r30
 a32:	ff 1f       	adc	r31, r31
 a34:	e8 0f       	add	r30, r24
 a36:	f9 1f       	adc	r31, r25
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	e9 59       	subi	r30, 0x99	; 153
 a3e:	ff 4f       	sbci	r31, 0xFF	; 255
 a40:	20 81       	ld	r18, Z
 a42:	31 81       	ldd	r19, Z+1	; 0x01
 a44:	2e 5f       	subi	r18, 0xFE	; 254
 a46:	3f 4f       	sbci	r19, 0xFF	; 255
 a48:	31 83       	std	Z+1, r19	; 0x01
 a4a:	20 83       	st	Z, r18
    if (huidigePositie == 0)
 a4c:	44 23       	and	r20, r20
 a4e:	19 f1       	breq	.+70     	; 0xa96 <main+0x3fc>
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
 a50:	c0 98       	cbi	0x18, 0	; 24
        step = update;
 a52:	b0 92 64 00 	sts	0x0064, r11
 a56:	a0 92 63 00 	sts	0x0063, r10
 a5a:	1d cf       	rjmp	.-454    	; 0x896 <main+0x1fc>
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
 a5c:	40 91 62 00 	lds	r20, 0x0062
 a60:	e4 2f       	mov	r30, r20
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	80 91 37 01 	lds	r24, 0x0137
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	ee 0f       	add	r30, r30
 a6c:	ff 1f       	adc	r31, r31
 a6e:	e8 0f       	add	r30, r24
 a70:	f9 1f       	adc	r31, r25
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	e9 59       	subi	r30, 0x99	; 153
 a78:	ff 4f       	sbci	r31, 0xFF	; 255
 a7a:	20 81       	ld	r18, Z
 a7c:	31 81       	ldd	r19, Z+1	; 0x01
 a7e:	21 50       	subi	r18, 0x01	; 1
 a80:	31 09       	sbc	r19, r1
 a82:	31 83       	std	Z+1, r19	; 0x01
 a84:	20 83       	st	Z, r18
    if (huidigePositie == 0)
 a86:	44 23       	and	r20, r20
 a88:	c1 f0       	breq	.+48     	; 0xaba <main+0x420>
        PORTB &= ~(1<<PB0);
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
 a8a:	c0 9a       	sbi	0x18, 0	; 24
        step = -update;
 a8c:	d0 92 64 00 	sts	0x0064, r13
 a90:	c0 92 63 00 	sts	0x0063, r12
 a94:	00 cf       	rjmp	.-512    	; 0x896 <main+0x1fc>
 a96:	88 0f       	add	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	fc 01       	movw	r30, r24
 a9c:	e9 59       	subi	r30, 0x99	; 153
 a9e:	ff 4f       	sbci	r31, 0xFF	; 255
 aa0:	8d 5d       	subi	r24, 0xDD	; 221
 aa2:	9e 4f       	sbci	r25, 0xFE	; 254
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
 aa4:	24 81       	ldd	r18, Z+4	; 0x04
 aa6:	35 81       	ldd	r19, Z+5	; 0x05
 aa8:	2e 5f       	subi	r18, 0xFE	; 254
 aaa:	3f 4f       	sbci	r19, 0xFF	; 255
 aac:	35 83       	std	Z+5, r19	; 0x05
 aae:	24 83       	std	Z+4, r18	; 0x04
 ab0:	34 96       	adiw	r30, 0x04	; 4
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
 ab2:	e8 17       	cp	r30, r24
 ab4:	f9 07       	cpc	r31, r25
 ab6:	b1 f7       	brne	.-20     	; 0xaa4 <main+0x40a>
 ab8:	cb cf       	rjmp	.-106    	; 0xa50 <main+0x3b6>
 aba:	88 0f       	add	r24, r24
 abc:	99 1f       	adc	r25, r25
 abe:	fc 01       	movw	r30, r24
 ac0:	e9 59       	subi	r30, 0x99	; 153
 ac2:	ff 4f       	sbci	r31, 0xFF	; 255
 ac4:	8d 5d       	subi	r24, 0xDD	; 221
 ac6:	9e 4f       	sbci	r25, 0xFE	; 254
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
 ac8:	24 81       	ldd	r18, Z+4	; 0x04
 aca:	35 81       	ldd	r19, Z+5	; 0x05
 acc:	21 50       	subi	r18, 0x01	; 1
 ace:	31 09       	sbc	r19, r1
 ad0:	35 83       	std	Z+5, r19	; 0x05
 ad2:	24 83       	std	Z+4, r18	; 0x04
 ad4:	34 96       	adiw	r30, 0x04	; 4
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
 ad6:	e8 17       	cp	r30, r24
 ad8:	f9 07       	cpc	r31, r25
 ada:	b1 f7       	brne	.-20     	; 0xac8 <main+0x42e>
 adc:	d6 cf       	rjmp	.-84     	; 0xa8a <main+0x3f0>
                    {

                        UDR = blokOff >> 8;
                        snelheid = snelheid &0x80; // onthoud richting
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	96 ee       	ldi	r25, 0xE6	; 230
 ae2:	5f cf       	rjmp	.-322    	; 0x9a2 <main+0x308>
                    {
                        middenDetectie = true;
                    }
                    else if (data==61)
                    {
                        middenDetected = false;
 ae4:	10 92 2e 01 	sts	0x012E, r1
                        middenDetectie = false;
 ae8:	10 92 2d 01 	sts	0x012D, r1
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
 aec:	1c b8       	out	0x0c, r1	; 12
 aee:	8e ce       	rjmp	.-740    	; 0x80c <main+0x172>
                    {
                        PORTC |= (1<<PC5);
                    }
                    else if (data==59)
                    {
                        PORTC &= ~(1<<PC5);
 af0:	ad 98       	cbi	0x15, 5	; 21
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
 af2:	1c b8       	out	0x0c, r1	; 12
 af4:	8b ce       	rjmp	.-746    	; 0x80c <main+0x172>
                        middenDetected = false;
                        middenDetectie = false;
                    }
                    else if (data==58)
                    {
                        PORTC |= (1<<PC5);
 af6:	ad 9a       	sbi	0x15, 5	; 21
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
 af8:	1c b8       	out	0x0c, r1	; 12
 afa:	88 ce       	rjmp	.-752    	; 0x80c <main+0x172>
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
 afc:	40 91 62 00 	lds	r20, 0x0062
 b00:	e4 2f       	mov	r30, r20
 b02:	f0 e0       	ldi	r31, 0x00	; 0
 b04:	80 91 37 01 	lds	r24, 0x0137
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	e8 0f       	add	r30, r24
 b10:	f9 1f       	adc	r31, r25
 b12:	ee 0f       	add	r30, r30
 b14:	ff 1f       	adc	r31, r31
 b16:	e9 59       	subi	r30, 0x99	; 153
 b18:	ff 4f       	sbci	r31, 0xFF	; 255
 b1a:	20 81       	ld	r18, Z
 b1c:	31 81       	ldd	r19, Z+1	; 0x01
 b1e:	2c 5f       	subi	r18, 0xFC	; 252
 b20:	3f 4f       	sbci	r19, 0xFF	; 255
 b22:	31 83       	std	Z+1, r19	; 0x01
 b24:	20 83       	st	Z, r18
    if (huidigePositie == 0)
 b26:	44 23       	and	r20, r20
 b28:	29 f1       	breq	.+74     	; 0xb74 <main+0x4da>
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
 b2a:	c0 98       	cbi	0x18, 0	; 24
        step = update;
 b2c:	84 e0       	ldi	r24, 0x04	; 4
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	90 93 64 00 	sts	0x0064, r25
 b34:	80 93 63 00 	sts	0x0063, r24
 b38:	ae ce       	rjmp	.-676    	; 0x896 <main+0x1fc>
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
 b3a:	40 91 62 00 	lds	r20, 0x0062
 b3e:	e4 2f       	mov	r30, r20
 b40:	f0 e0       	ldi	r31, 0x00	; 0
 b42:	80 91 37 01 	lds	r24, 0x0137
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	ee 0f       	add	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	e8 0f       	add	r30, r24
 b4e:	f9 1f       	adc	r31, r25
 b50:	ee 0f       	add	r30, r30
 b52:	ff 1f       	adc	r31, r31
 b54:	e9 59       	subi	r30, 0x99	; 153
 b56:	ff 4f       	sbci	r31, 0xFF	; 255
 b58:	20 81       	ld	r18, Z
 b5a:	31 81       	ldd	r19, Z+1	; 0x01
 b5c:	22 50       	subi	r18, 0x02	; 2
 b5e:	31 09       	sbc	r19, r1
 b60:	31 83       	std	Z+1, r19	; 0x01
 b62:	20 83       	st	Z, r18
    if (huidigePositie == 0)
 b64:	44 23       	and	r20, r20
 b66:	c1 f0       	breq	.+48     	; 0xb98 <main+0x4fe>
        PORTB &= ~(1<<PB0);
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
 b68:	c0 9a       	sbi	0x18, 0	; 24
        step = -update;
 b6a:	b0 92 64 00 	sts	0x0064, r11
 b6e:	a0 92 63 00 	sts	0x0063, r10
 b72:	91 ce       	rjmp	.-734    	; 0x896 <main+0x1fc>
 b74:	88 0f       	add	r24, r24
 b76:	99 1f       	adc	r25, r25
 b78:	fc 01       	movw	r30, r24
 b7a:	e9 59       	subi	r30, 0x99	; 153
 b7c:	ff 4f       	sbci	r31, 0xFF	; 255
 b7e:	8d 5d       	subi	r24, 0xDD	; 221
 b80:	9e 4f       	sbci	r25, 0xFE	; 254
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
 b82:	24 81       	ldd	r18, Z+4	; 0x04
 b84:	35 81       	ldd	r19, Z+5	; 0x05
 b86:	2c 5f       	subi	r18, 0xFC	; 252
 b88:	3f 4f       	sbci	r19, 0xFF	; 255
 b8a:	35 83       	std	Z+5, r19	; 0x05
 b8c:	24 83       	std	Z+4, r18	; 0x04
 b8e:	34 96       	adiw	r30, 0x04	; 4
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
 b90:	e8 17       	cp	r30, r24
 b92:	f9 07       	cpc	r31, r25
 b94:	b1 f7       	brne	.-20     	; 0xb82 <main+0x4e8>
 b96:	c9 cf       	rjmp	.-110    	; 0xb2a <main+0x490>
 b98:	88 0f       	add	r24, r24
 b9a:	99 1f       	adc	r25, r25
 b9c:	fc 01       	movw	r30, r24
 b9e:	e9 59       	subi	r30, 0x99	; 153
 ba0:	ff 4f       	sbci	r31, 0xFF	; 255
 ba2:	8d 5d       	subi	r24, 0xDD	; 221
 ba4:	9e 4f       	sbci	r25, 0xFE	; 254
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
 ba6:	24 81       	ldd	r18, Z+4	; 0x04
 ba8:	35 81       	ldd	r19, Z+5	; 0x05
 baa:	22 50       	subi	r18, 0x02	; 2
 bac:	31 09       	sbc	r19, r1
 bae:	35 83       	std	Z+5, r19	; 0x05
 bb0:	24 83       	std	Z+4, r18	; 0x04
 bb2:	34 96       	adiw	r30, 0x04	; 4
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
 bb4:	e8 17       	cp	r30, r24
 bb6:	f9 07       	cpc	r31, r25
 bb8:	b1 f7       	brne	.-20     	; 0xba6 <main+0x50c>
 bba:	d6 cf       	rjmp	.-84     	; 0xb68 <main+0x4ce>
                    {
                        updatePosition(-4);
                    }
                    else if (data==54)
                    {
                        updatePosition(8);
 bbc:	88 e0       	ldi	r24, 0x08	; 8
 bbe:	28 dd       	rcall	.-1456   	; 0x610 <updatePosition>
 bc0:	6a ce       	rjmp	.-812    	; 0x896 <main+0x1fc>
                    {
                        updatePosition(4);
                    }
                    else if (data==53)
                    {
                        updatePosition(-4);
 bc2:	8c ef       	ldi	r24, 0xFC	; 252
 bc4:	25 dd       	rcall	.-1462   	; 0x610 <updatePosition>
 bc6:	67 ce       	rjmp	.-818    	; 0x896 <main+0x1fc>
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
                    {
                        step = 1; // correct status
 bc8:	d0 92 64 00 	sts	0x0064, r13
 bcc:	c0 92 63 00 	sts	0x0063, r12
                        if ((PINC & (1<<PC2)) == 0)
 bd0:	9a 99       	sbic	0x13, 2	; 19
 bd2:	0b c0       	rjmp	.+22     	; 0xbea <main+0x550>
                        {
                            // we zijn al thuis dus rij even weg
                            PORTB &= ~(1<<PB0); // voorwaarts
 bd4:	c0 98       	cbi	0x18, 0	; 24
                            step = stepTabel[1][0];
 bd6:	80 91 6b 00 	lds	r24, 0x006B
 bda:	90 91 6c 00 	lds	r25, 0x006C
 bde:	90 93 64 00 	sts	0x0064, r25
 be2:	80 93 63 00 	sts	0x0063, r24
                            homingReverse = true;
 be6:	d0 93 38 01 	sts	0x0138, r29
                        }
                        doHoming = true;
 bea:	d0 93 33 01 	sts	0x0133, r29
 bee:	53 ce       	rjmp	.-858    	; 0x896 <main+0x1fc>
                    {
                        updatePosition(32);
                    }
                    else if (data==59)
                    {
                        updatePosition(-32);
 bf0:	80 ee       	ldi	r24, 0xE0	; 224
 bf2:	0e dd       	rcall	.-1508   	; 0x610 <updatePosition>
 bf4:	50 ce       	rjmp	.-864    	; 0x896 <main+0x1fc>
                    // eind updates in de stap tabel
                    // 60 home
                    // 62 write eeprom staptabel
                    // 63 get bitfiled status bit 0 = TURNING  bit 1 = middenDetected  bit 2 = needsHoming

                    else if (data==48)
 bf6:	c0 33       	cpi	r28, 0x30	; 48
 bf8:	09 f0       	breq	.+2      	; 0xbfc <main+0x562>
 bfa:	26 ce       	rjmp	.-948    	; 0x848 <main+0x1ae>
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
 bfc:	40 91 62 00 	lds	r20, 0x0062
 c00:	e4 2f       	mov	r30, r20
 c02:	f0 e0       	ldi	r31, 0x00	; 0
 c04:	80 91 37 01 	lds	r24, 0x0137
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	ee 0f       	add	r30, r30
 c0c:	ff 1f       	adc	r31, r31
 c0e:	e8 0f       	add	r30, r24
 c10:	f9 1f       	adc	r31, r25
 c12:	ee 0f       	add	r30, r30
 c14:	ff 1f       	adc	r31, r31
 c16:	e9 59       	subi	r30, 0x99	; 153
 c18:	ff 4f       	sbci	r31, 0xFF	; 255
 c1a:	20 81       	ld	r18, Z
 c1c:	31 81       	ldd	r19, Z+1	; 0x01
 c1e:	2f 5f       	subi	r18, 0xFF	; 255
 c20:	3f 4f       	sbci	r19, 0xFF	; 255
 c22:	31 83       	std	Z+1, r19	; 0x01
 c24:	20 83       	st	Z, r18
    if (huidigePositie == 0)
 c26:	41 11       	cpse	r20, r1
 c28:	11 c0       	rjmp	.+34     	; 0xc4c <main+0x5b2>
 c2a:	88 0f       	add	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	fc 01       	movw	r30, r24
 c30:	e9 59       	subi	r30, 0x99	; 153
 c32:	ff 4f       	sbci	r31, 0xFF	; 255
 c34:	8d 5d       	subi	r24, 0xDD	; 221
 c36:	9e 4f       	sbci	r25, 0xFE	; 254
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
 c38:	24 81       	ldd	r18, Z+4	; 0x04
 c3a:	35 81       	ldd	r19, Z+5	; 0x05
 c3c:	2f 5f       	subi	r18, 0xFF	; 255
 c3e:	3f 4f       	sbci	r19, 0xFF	; 255
 c40:	35 83       	std	Z+5, r19	; 0x05
 c42:	24 83       	std	Z+4, r18	; 0x04
 c44:	34 96       	adiw	r30, 0x04	; 4
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
 c46:	e8 17       	cp	r30, r24
 c48:	f9 07       	cpc	r31, r25
 c4a:	b1 f7       	brne	.-20     	; 0xc38 <main+0x59e>
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
 c4c:	c0 98       	cbi	0x18, 0	; 24
        step = update;
 c4e:	d0 92 64 00 	sts	0x0064, r13
 c52:	c0 92 63 00 	sts	0x0063, r12
 c56:	1f ce       	rjmp	.-962    	; 0x896 <main+0x1fc>
                        doHoming = true;
                    }
                    else if (data==62)
                    {
                        // dit duurt telang zodat het antwoord niet optijd is.
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
 c58:	20 91 63 00 	lds	r18, 0x0063
 c5c:	30 91 64 00 	lds	r19, 0x0064
 c60:	80 91 2e 01 	lds	r24, 0x012E
 c64:	90 91 60 00 	lds	r25, 0x0060
 c68:	99 0f       	add	r25, r25
 c6a:	89 0f       	add	r24, r25
 c6c:	88 0f       	add	r24, r24
 c6e:	91 e0       	ldi	r25, 0x01	; 1
 c70:	23 2b       	or	r18, r19
 c72:	09 f4       	brne	.+2      	; 0xc76 <main+0x5dc>
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	89 0f       	add	r24, r25
 c78:	8c b9       	out	0x0c, r24	; 12
                        // grofweg 800 ms duren
                        // daarna is alle communicatie verloren dus wachten tot de watch dog een reset door voerd.
                        // Houd de watchdog in leven zolang we in de loop zitten.
                        for (uint8_t i=0;i<48;i++)
                        {
                            eeprom_write_word((uint16_t*)&stepTabelRom[i][0], (uint16_t)stepTabel[i][0]);
 c7a:	f7 01       	movw	r30, r14
 c7c:	60 81       	ld	r22, Z
 c7e:	71 81       	ldd	r23, Z+1	; 0x01
 c80:	c8 01       	movw	r24, r16
 c82:	34 d0       	rcall	.+104    	; 0xcec <eeprom_write_word>
                            wdt_reset();
 c84:	a8 95       	wdr
                            eeprom_write_word((uint16_t*)&stepTabelRom[i][1], (uint16_t)stepTabel[i][1]);
 c86:	f7 01       	movw	r30, r14
 c88:	62 81       	ldd	r22, Z+2	; 0x02
 c8a:	73 81       	ldd	r23, Z+3	; 0x03
 c8c:	c8 01       	movw	r24, r16
 c8e:	02 96       	adiw	r24, 0x02	; 2
 c90:	2d d0       	rcall	.+90     	; 0xcec <eeprom_write_word>
                            wdt_reset();
 c92:	a8 95       	wdr
 c94:	f4 e0       	ldi	r31, 0x04	; 4
 c96:	ef 0e       	add	r14, r31
 c98:	f1 1c       	adc	r15, r1
 c9a:	0c 5f       	subi	r16, 0xFC	; 252
 c9c:	1f 4f       	sbci	r17, 0xFF	; 255
                        // houd de interrupt disabled want deze loop kan lang duren.
                        // het duurd 8.5ms per byte voor een write dus totaal voor de gehele table kan het dus
                        // grofweg 800 ms duren
                        // daarna is alle communicatie verloren dus wachten tot de watch dog een reset door voerd.
                        // Houd de watchdog in leven zolang we in de loop zitten.
                        for (uint8_t i=0;i<48;i++)
 c9e:	40 16       	cp	r4, r16
 ca0:	51 06       	cpc	r5, r17
 ca2:	59 f7       	brne	.-42     	; 0xc7a <main+0x5e0>
        }


    }
    while(1);
}
 ca4:	df 91       	pop	r29
 ca6:	cf 91       	pop	r28
 ca8:	1f 91       	pop	r17
 caa:	0f 91       	pop	r16
 cac:	ff 90       	pop	r15
 cae:	ef 90       	pop	r14
 cb0:	df 90       	pop	r13
 cb2:	cf 90       	pop	r12
 cb4:	bf 90       	pop	r11
 cb6:	af 90       	pop	r10
 cb8:	9f 90       	pop	r9
 cba:	8f 90       	pop	r8
 cbc:	7f 90       	pop	r7
 cbe:	6f 90       	pop	r6
 cc0:	5f 90       	pop	r5
 cc2:	4f 90       	pop	r4
 cc4:	3f 90       	pop	r3
 cc6:	2f 90       	pop	r2
 cc8:	08 95       	ret
                    {
                        updatePosition(-16);
                    }
                    else if (data==58)
                    {
                        updatePosition(32);
 cca:	80 e2       	ldi	r24, 0x20	; 32
 ccc:	a1 dc       	rcall	.-1726   	; 0x610 <updatePosition>
 cce:	e3 cd       	rjmp	.-1082   	; 0x896 <main+0x1fc>
                    {
                        updatePosition(-8);
                    }
                    else if (data==56)
                    {
                        updatePosition(16);
 cd0:	80 e1       	ldi	r24, 0x10	; 16
 cd2:	9e dc       	rcall	.-1732   	; 0x610 <updatePosition>
 cd4:	e0 cd       	rjmp	.-1088   	; 0x896 <main+0x1fc>
                    {
                        updatePosition(8);
                    }
                    else if (data==55)
                    {
                        updatePosition(-8);
 cd6:	88 ef       	ldi	r24, 0xF8	; 248
 cd8:	9b dc       	rcall	.-1738   	; 0x610 <updatePosition>
 cda:	dd cd       	rjmp	.-1094   	; 0x896 <main+0x1fc>
                    {
                        updatePosition(16);
                    }
                    else if (data==57)
                    {
                        updatePosition(-16);
 cdc:	80 ef       	ldi	r24, 0xF0	; 240
 cde:	98 dc       	rcall	.-1744   	; 0x610 <updatePosition>
 ce0:	da cd       	rjmp	.-1100   	; 0x896 <main+0x1fc>

00000ce2 <eeprom_read_word>:
 ce2:	a8 e1       	ldi	r26, 0x18	; 24
 ce4:	b0 e0       	ldi	r27, 0x00	; 0
 ce6:	42 e0       	ldi	r20, 0x02	; 2
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	05 c0       	rjmp	.+10     	; 0xcf6 <eeprom_read_blraw>

00000cec <eeprom_write_word>:
 cec:	12 d0       	rcall	.+36     	; 0xd12 <eeprom_write_byte>
 cee:	27 2f       	mov	r18, r23
 cf0:	11 c0       	rjmp	.+34     	; 0xd14 <eeprom_write_r18>

00000cf2 <eeprom_read_block>:
 cf2:	dc 01       	movw	r26, r24
 cf4:	cb 01       	movw	r24, r22

00000cf6 <eeprom_read_blraw>:
 cf6:	fc 01       	movw	r30, r24
 cf8:	e1 99       	sbic	0x1c, 1	; 28
 cfa:	fe cf       	rjmp	.-4      	; 0xcf8 <eeprom_read_blraw+0x2>
 cfc:	06 c0       	rjmp	.+12     	; 0xd0a <eeprom_read_blraw+0x14>
 cfe:	ff bb       	out	0x1f, r31	; 31
 d00:	ee bb       	out	0x1e, r30	; 30
 d02:	e0 9a       	sbi	0x1c, 0	; 28
 d04:	31 96       	adiw	r30, 0x01	; 1
 d06:	0d b2       	in	r0, 0x1d	; 29
 d08:	0d 92       	st	X+, r0
 d0a:	41 50       	subi	r20, 0x01	; 1
 d0c:	50 40       	sbci	r21, 0x00	; 0
 d0e:	b8 f7       	brcc	.-18     	; 0xcfe <eeprom_read_blraw+0x8>
 d10:	08 95       	ret

00000d12 <eeprom_write_byte>:
 d12:	26 2f       	mov	r18, r22

00000d14 <eeprom_write_r18>:
 d14:	e1 99       	sbic	0x1c, 1	; 28
 d16:	fe cf       	rjmp	.-4      	; 0xd14 <eeprom_write_r18>
 d18:	9f bb       	out	0x1f, r25	; 31
 d1a:	8e bb       	out	0x1e, r24	; 30
 d1c:	2d bb       	out	0x1d, r18	; 29
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	f8 94       	cli
 d22:	e2 9a       	sbi	0x1c, 2	; 28
 d24:	e1 9a       	sbi	0x1c, 1	; 28
 d26:	0f be       	out	0x3f, r0	; 63
 d28:	01 96       	adiw	r24, 0x01	; 1
 d2a:	08 95       	ret

00000d2c <_exit>:
 d2c:	f8 94       	cli

00000d2e <__stop_program>:
 d2e:	ff cf       	rjmp	.-2      	; 0xd2e <__stop_program>

Disassembly of section .data:

00800060 <__data_start>:
  800060:	01 28       	or	r0, r1

00800061 <decimateDrempel>:
  800061:	28 77       	Address 0x0000000000800061 is out of bounds.
.word	0xffff	; ????

Disassembly of section .bss:

00800062 <__bss_start>:
	...

00800063 <step>:
	...

00800065 <drempelSturing.1624>:
	...

00800066 <decimate.1623>:
	...

00800067 <stepTabel>:
	...

00800127 <byteCount>:
	...

00800128 <blokOn>:
	...

0080012a <uartData1>:
	...

0080012b <blokOff>:
	...

0080012d <middenDetectie>:
	...

0080012e <middenDetected>:
	...

0080012f <snelheid>:
	...

00800130 <huisDecimation>:
	...

00800131 <inSync>:
	...

00800132 <uartData2>:
	...

00800133 <doHoming>:
	...

00800134 <brugBlokDDR>:
	...

00800135 <pulseBreedteCount>:
	...

00800136 <syncCount>:
	...

00800137 <huidigePosititieTweedeIndex>:
	...

00800138 <homingReverse>:
	...

Disassembly of section .eeprom:

00810000 <EepromAdres>:
  810000:	2c 01       	movw	r4, r24

00810002 <EepromType>:
  810002:	03 00       	.word	0x0003	; ????

00810003 <stepTabelRom>:
  810003:	00 00       	nop
  810005:	00 00       	nop
  810007:	9a 02       	muls	r25, r26
  810009:	9a 02       	muls	r25, r26
  81000b:	35 05       	cpc	r19, r5
  81000d:	35 05       	cpc	r19, r5
  81000f:	d0 07       	cpc	r29, r16
  810011:	d0 07       	cpc	r29, r16
  810013:	6a 0a       	sbc	r6, r26
  810015:	6a 0a       	sbc	r6, r26
  810017:	05 0d       	add	r16, r5
  810019:	05 0d       	add	r16, r5
  81001b:	a0 0f       	add	r26, r16
  81001d:	a0 0f       	add	r26, r16
  81001f:	3a 12       	cpse	r3, r26
  810021:	3a 12       	cpse	r3, r26
  810023:	d5 14       	cp	r13, r5
  810025:	d5 14       	cp	r13, r5
  810027:	70 17       	cp	r23, r16
  810029:	70 17       	cp	r23, r16
  81002b:	0a 1a       	sub	r0, r26
  81002d:	0a 1a       	sub	r0, r26
  81002f:	a5 1c       	adc	r10, r5
  810031:	a5 1c       	adc	r10, r5
  810033:	40 1f       	adc	r20, r16
  810035:	40 1f       	adc	r20, r16
  810037:	da 21       	and	r29, r10
  810039:	da 21       	and	r29, r10
  81003b:	75 24       	eor	r7, r5
  81003d:	75 24       	eor	r7, r5
  81003f:	10 27       	eor	r17, r16
  810041:	10 27       	eor	r17, r16
  810043:	aa 29       	or	r26, r10
  810045:	aa 29       	or	r26, r10
  810047:	45 2c       	mov	r4, r5
  810049:	45 2c       	mov	r4, r5
  81004b:	e0 2e       	mov	r14, r16
  81004d:	e0 2e       	mov	r14, r16
  81004f:	7a 31       	cpi	r23, 0x1A	; 26
  810051:	7a 31       	cpi	r23, 0x1A	; 26
  810053:	15 34       	cpi	r17, 0x45	; 69
  810055:	15 34       	cpi	r17, 0x45	; 69
  810057:	b0 36       	cpi	r27, 0x60	; 96
  810059:	b0 36       	cpi	r27, 0x60	; 96
  81005b:	4a 39       	cpi	r20, 0x9A	; 154
  81005d:	4a 39       	cpi	r20, 0x9A	; 154
  81005f:	e5 3b       	cpi	r30, 0xB5	; 181
  810061:	e5 3b       	cpi	r30, 0xB5	; 181
  810063:	80 3e       	cpi	r24, 0xE0	; 224
  810065:	80 3e       	cpi	r24, 0xE0	; 224
  810067:	1a 41       	sbci	r17, 0x1A	; 26
  810069:	1a 41       	sbci	r17, 0x1A	; 26
  81006b:	b5 43       	sbci	r27, 0x35	; 53
  81006d:	b5 43       	sbci	r27, 0x35	; 53
  81006f:	50 46       	sbci	r21, 0x60	; 96
  810071:	50 46       	sbci	r21, 0x60	; 96
  810073:	ea 48       	sbci	r30, 0x8A	; 138
  810075:	ea 48       	sbci	r30, 0x8A	; 138
  810077:	85 4b       	sbci	r24, 0xB5	; 181
  810079:	85 4b       	sbci	r24, 0xB5	; 181
  81007b:	20 4e       	sbci	r18, 0xE0	; 224
  81007d:	20 4e       	sbci	r18, 0xE0	; 224
  81007f:	ba 50       	subi	r27, 0x0A	; 10
  810081:	ba 50       	subi	r27, 0x0A	; 10
  810083:	55 53       	subi	r21, 0x35	; 53
  810085:	55 53       	subi	r21, 0x35	; 53
  810087:	f0 55       	subi	r31, 0x50	; 80
  810089:	f0 55       	subi	r31, 0x50	; 80
  81008b:	8a 58       	subi	r24, 0x8A	; 138
  81008d:	8a 58       	subi	r24, 0x8A	; 138
  81008f:	25 5b       	subi	r18, 0xB5	; 181
  810091:	25 5b       	subi	r18, 0xB5	; 181
  810093:	c0 5d       	subi	r28, 0xD0	; 208
  810095:	c0 5d       	subi	r28, 0xD0	; 208
  810097:	5a 60       	ori	r21, 0x0A	; 10
  810099:	5a 60       	ori	r21, 0x0A	; 10
  81009b:	f5 62       	ori	r31, 0x25	; 37
  81009d:	f5 62       	ori	r31, 0x25	; 37
  81009f:	90 65       	ori	r25, 0x50	; 80
  8100a1:	90 65       	ori	r25, 0x50	; 80
  8100a3:	2a 68       	ori	r18, 0x8A	; 138
  8100a5:	2a 68       	ori	r18, 0x8A	; 138
  8100a7:	c5 6a       	ori	r28, 0xA5	; 165
  8100a9:	c5 6a       	ori	r28, 0xA5	; 165
  8100ab:	60 6d       	ori	r22, 0xD0	; 208
  8100ad:	60 6d       	ori	r22, 0xD0	; 208
  8100af:	fa 6f       	ori	r31, 0xFA	; 250
  8100b1:	fa 6f       	ori	r31, 0xFA	; 250
  8100b3:	95 72       	andi	r25, 0x25	; 37
  8100b5:	95 72       	andi	r25, 0x25	; 37
  8100b7:	30 75       	andi	r19, 0x50	; 80
  8100b9:	30 75       	andi	r19, 0x50	; 80
  8100bb:	ca 77       	andi	r28, 0x7A	; 122
  8100bd:	ca 77       	andi	r28, 0x7A	; 122
  8100bf:	65 7a       	andi	r22, 0xA5	; 165
  8100c1:	65 7a       	andi	r22, 0xA5	; 165

Disassembly of section .stab:

00000000 <.stab>:
       0:	01 00       	.word	0x0001	; ????
       2:	00 00       	nop
       4:	00 00       	nop
       6:	01 02       	muls	r16, r17
       8:	29 10       	cpse	r2, r9
       a:	00 00       	nop
       c:	08 00       	.word	0x0008	; ????
       e:	00 00       	nop
      10:	64 00       	.word	0x0064	; ????
      12:	02 00       	.word	0x0002	; ????
      14:	5e 02       	muls	r21, r30
      16:	00 00       	nop
      18:	01 00       	.word	0x0001	; ????
      1a:	00 00       	nop
      1c:	64 00       	.word	0x0064	; ????
      1e:	02 00       	.word	0x0002	; ????
      20:	5e 02       	muls	r21, r30
      22:	00 00       	nop
      24:	40 00       	.word	0x0040	; ????
      26:	00 00       	nop
      28:	3c 00       	.word	0x003c	; ????
      2a:	00 00       	nop
      2c:	00 00       	nop
      2e:	00 00       	nop
      30:	4f 00       	.word	0x004f	; ????
      32:	00 00       	nop
      34:	80 00       	.word	0x0080	; ????
      36:	00 00       	nop
      38:	00 00       	nop
      3a:	00 00       	nop
      3c:	6f 00       	.word	0x006f	; ????
      3e:	00 00       	nop
      40:	80 00       	.word	0x0080	; ????
      42:	00 00       	nop
      44:	00 00       	nop
      46:	00 00       	nop
      48:	89 00       	.word	0x0089	; ????
      4a:	00 00       	nop
      4c:	80 00       	.word	0x0080	; ????
      4e:	00 00       	nop
      50:	00 00       	nop
      52:	00 00       	nop
      54:	c0 00       	.word	0x00c0	; ????
      56:	00 00       	nop
      58:	80 00       	.word	0x0080	; ????
      5a:	00 00       	nop
      5c:	00 00       	nop
      5e:	00 00       	nop
      60:	e6 00       	.word	0x00e6	; ????
      62:	00 00       	nop
      64:	80 00       	.word	0x0080	; ????
      66:	00 00       	nop
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	1b 01       	movw	r2, r22
      6e:	00 00       	nop
      70:	80 00       	.word	0x0080	; ????
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 00       	nop
      78:	6c 01       	movw	r12, r24
      7a:	00 00       	nop
      7c:	80 00       	.word	0x0080	; ????
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 00       	nop
      84:	b1 01       	movw	r22, r2
      86:	00 00       	nop
      88:	80 00       	.word	0x0080	; ????
      8a:	00 00       	nop
      8c:	00 00       	nop
      8e:	00 00       	nop
      90:	d7 01       	movw	r26, r14
      92:	00 00       	nop
      94:	80 00       	.word	0x0080	; ????
      96:	00 00       	nop
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	03 02       	muls	r16, r19
      9e:	00 00       	nop
      a0:	80 00       	.word	0x0080	; ????
      a2:	00 00       	nop
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	2d 02       	muls	r18, r29
      aa:	00 00       	nop
      ac:	80 00       	.word	0x0080	; ????
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	00 00       	nop
      b4:	56 02       	muls	r21, r22
      b6:	00 00       	nop
      b8:	80 00       	.word	0x0080	; ????
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	00 00       	nop
      c0:	70 02       	muls	r23, r16
      c2:	00 00       	nop
      c4:	80 00       	.word	0x0080	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	8b 02       	muls	r24, r27
      ce:	00 00       	nop
      d0:	80 00       	.word	0x0080	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	ab 02       	muls	r26, r27
      da:	00 00       	nop
      dc:	80 00       	.word	0x0080	; ????
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	cc 02       	muls	r28, r28
      e6:	00 00       	nop
      e8:	80 00       	.word	0x0080	; ????
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 00       	nop
      f0:	ec 02       	muls	r30, r28
      f2:	00 00       	nop
      f4:	80 00       	.word	0x0080	; ????
      f6:	00 00       	nop
      f8:	00 00       	nop
      fa:	00 00       	nop
      fc:	11 03       	mulsu	r17, r17
      fe:	00 00       	nop
     100:	80 00       	.word	0x0080	; ????
     102:	00 00       	nop
     104:	00 00       	nop
     106:	00 00       	nop
     108:	3b 03       	fmul	r19, r19
     10a:	00 00       	nop
     10c:	80 00       	.word	0x0080	; ????
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	00 00       	nop
     114:	5f 03       	fmul	r21, r23
     116:	00 00       	nop
     118:	80 00       	.word	0x0080	; ????
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	00 00       	nop
     120:	88 03       	fmulsu	r16, r16
     122:	00 00       	nop
     124:	80 00       	.word	0x0080	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	b6 03       	fmuls	r19, r22
     12e:	00 00       	nop
     130:	80 00       	.word	0x0080	; ????
     132:	00 00       	nop
     134:	00 00       	nop
     136:	00 00       	nop
     138:	dc 03       	fmulsu	r21, r20
     13a:	00 00       	nop
     13c:	80 00       	.word	0x0080	; ????
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	00 00       	nop
     144:	fc 03       	fmulsu	r23, r20
     146:	00 00       	nop
     148:	80 00       	.word	0x0080	; ????
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	21 04       	cpc	r2, r1
     152:	00 00       	nop
     154:	80 00       	.word	0x0080	; ????
     156:	00 00       	nop
     158:	00 00       	nop
     15a:	00 00       	nop
     15c:	4b 04       	cpc	r4, r11
     15e:	00 00       	nop
     160:	80 00       	.word	0x0080	; ????
     162:	00 00       	nop
     164:	00 00       	nop
     166:	00 00       	nop
     168:	7a 04       	cpc	r7, r10
     16a:	00 00       	nop
     16c:	80 00       	.word	0x0080	; ????
     16e:	00 00       	nop
     170:	00 00       	nop
     172:	00 00       	nop
     174:	a3 04       	cpc	r10, r3
     176:	00 00       	nop
     178:	80 00       	.word	0x0080	; ????
     17a:	00 00       	nop
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	d1 04       	cpc	r13, r1
     182:	00 00       	nop
     184:	80 00       	.word	0x0080	; ????
     186:	00 00       	nop
     188:	00 00       	nop
     18a:	00 00       	nop
     18c:	04 05       	cpc	r16, r4
     18e:	00 00       	nop
     190:	80 00       	.word	0x0080	; ????
     192:	00 00       	nop
     194:	00 00       	nop
     196:	00 00       	nop
     198:	25 05       	cpc	r18, r5
     19a:	00 00       	nop
     19c:	80 00       	.word	0x0080	; ????
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	00 00       	nop
     1a4:	45 05       	cpc	r20, r5
     1a6:	00 00       	nop
     1a8:	80 00       	.word	0x0080	; ????
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	00 00       	nop
     1b0:	6a 05       	cpc	r22, r10
     1b2:	00 00       	nop
     1b4:	80 00       	.word	0x0080	; ????
     1b6:	00 00       	nop
     1b8:	00 00       	nop
     1ba:	00 00       	nop
     1bc:	94 05       	cpc	r25, r4
     1be:	00 00       	nop
     1c0:	80 00       	.word	0x0080	; ????
     1c2:	00 00       	nop
     1c4:	00 00       	nop
     1c6:	00 00       	nop
     1c8:	b8 05       	cpc	r27, r8
     1ca:	00 00       	nop
     1cc:	80 00       	.word	0x0080	; ????
     1ce:	00 00       	nop
     1d0:	00 00       	nop
     1d2:	00 00       	nop
     1d4:	e1 05       	cpc	r30, r1
     1d6:	00 00       	nop
     1d8:	80 00       	.word	0x0080	; ????
     1da:	00 00       	nop
     1dc:	00 00       	nop
     1de:	00 00       	nop
     1e0:	0f 06       	cpc	r0, r31
     1e2:	00 00       	nop
     1e4:	80 00       	.word	0x0080	; ????
     1e6:	00 00       	nop
     1e8:	00 00       	nop
     1ea:	00 00       	nop
     1ec:	35 06       	cpc	r3, r21
     1ee:	00 00       	nop
     1f0:	80 00       	.word	0x0080	; ????
     1f2:	00 00       	nop
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	55 06       	cpc	r5, r21
     1fa:	00 00       	nop
     1fc:	80 00       	.word	0x0080	; ????
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 00       	nop
     204:	7a 06       	cpc	r7, r26
     206:	00 00       	nop
     208:	80 00       	.word	0x0080	; ????
     20a:	00 00       	nop
     20c:	00 00       	nop
     20e:	00 00       	nop
     210:	a4 06       	cpc	r10, r20
     212:	00 00       	nop
     214:	80 00       	.word	0x0080	; ????
     216:	00 00       	nop
     218:	00 00       	nop
     21a:	00 00       	nop
     21c:	d3 06       	cpc	r13, r19
     21e:	00 00       	nop
     220:	80 00       	.word	0x0080	; ????
     222:	00 00       	nop
     224:	00 00       	nop
     226:	00 00       	nop
     228:	fc 06       	cpc	r15, r28
     22a:	00 00       	nop
     22c:	80 00       	.word	0x0080	; ????
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	00 00       	nop
     234:	2a 07       	cpc	r18, r26
     236:	00 00       	nop
     238:	80 00       	.word	0x0080	; ????
     23a:	00 00       	nop
     23c:	00 00       	nop
     23e:	00 00       	nop
     240:	5d 07       	cpc	r21, r29
     242:	00 00       	nop
     244:	80 00       	.word	0x0080	; ????
     246:	00 00       	nop
     248:	00 00       	nop
     24a:	00 00       	nop
     24c:	71 07       	cpc	r23, r17
     24e:	00 00       	nop
     250:	82 00       	.word	0x0082	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	00 00       	nop
     258:	8f 07       	cpc	r24, r31
     25a:	00 00       	nop
     25c:	82 00       	.word	0x0082	; ????
uint8_t huisDecimation;   // het huislampje is maar tijdelijk aan deze variable regelt dat
bool needsHoming = true;

void Homing()
{
    if (doHoming)
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 00       	nop
     264:	b3 07       	cpc	r27, r19
    {
        if (homingReverse)
     266:	00 00       	nop
     268:	82 00       	.word	0x0082	; ????
     26a:	00 00       	nop
     26c:	25 0f       	add	r18, r21
        {
            if (step == 0)
     26e:	00 00       	nop
     270:	d3 07       	cpc	r29, r19
     272:	00 00       	nop
     274:	82 00       	.word	0x0082	; ????
     276:	00 00       	nop
     278:	00 00       	nop
            {
                homingReverse = false;
     27a:	00 00       	nop
     27c:	fb 07       	cpc	r31, r27
     27e:	00 00       	nop
            }
        }
        else if (PINC & (1<<PC2))
     280:	82 00       	.word	0x0082	; ????
     282:	00 00       	nop
            decimateDrempel = 4;
        }
        else
        {
            // klaar
            decimateDrempel = 40;
     284:	33 b8       	out	0x03, r3	; 3
     286:	00 00       	nop
     288:	19 08       	sbc	r1, r9
            step = stepTabel[0][0];
     28a:	00 00       	nop
     28c:	80 00       	.word	0x0080	; ????
     28e:	79 00       	.word	0x0079	; ????
     290:	00 00       	nop
     292:	00 00       	nop
     294:	2e 08       	sbc	r2, r14
     296:	00 00       	nop
     298:	80 00       	.word	0x0080	; ????
            if (step>=0)
     29a:	7a 00       	.word	0x007a	; ????
     29c:	00 00       	nop
     29e:	00 00       	nop
     2a0:	44 08       	sbc	r4, r4
     2a2:	00 00       	nop
     2a4:	80 00       	.word	0x0080	; ????
            {
                PORTB &= ~(1<<PB0); //vooruit
     2a6:	7b 00       	.word	0x007b	; ????
            else
            {
                PORTB |= (1<<PB0); // terug
                step = -step;
            }
            doHoming = false;
     2a8:	00 00       	nop
     2aa:	00 00       	nop
            needsHoming = false;
     2ac:	59 08       	sbc	r5, r9
     2ae:	00 00       	nop
     2b0:	80 00       	.word	0x0080	; ????
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
        {
            huidigePositie = 0;
     2b2:	7c 00       	.word	0x007c	; ????
     2b4:	00 00       	nop
            PORTB |= (1<<PB0); // terug
     2b6:	00 00       	nop
            step = 32000;
     2b8:	6f 08       	sbc	r6, r15
     2ba:	00 00       	nop
     2bc:	80 00       	.word	0x0080	; ????
     2be:	7d 00       	.word	0x007d	; ????
     2c0:	00 00       	nop
     2c2:	00 00       	nop
            decimateDrempel = 4;
     2c4:	84 08       	sbc	r8, r4
     2c6:	00 00       	nop
     2c8:	80 00       	.word	0x0080	; ????
     2ca:	7e 00       	.word	0x007e	; ????
            {
                PORTB &= ~(1<<PB0); //vooruit
            }
            else
            {
                PORTB |= (1<<PB0); // terug
     2cc:	00 00       	nop
                step = -step;
     2ce:	00 00       	nop
     2d0:	9a 08       	sbc	r9, r10
     2d2:	00 00       	nop
     2d4:	80 00       	.word	0x0080	; ????
     2d6:	80 00       	.word	0x0080	; ????
     2d8:	00 00       	nop
     2da:	00 00       	nop
     2dc:	af 08       	sbc	r10, r15
     2de:	00 00       	nop
     2e0:	80 00       	.word	0x0080	; ????
     2e2:	81 00       	.word	0x0081	; ????
     2e4:	00 00       	nop
uint8_t huisDecimation;   // het huislampje is maar tijdelijk aan deze variable regelt dat
bool needsHoming = true;

void Homing()
{
    if (doHoming)
     2e6:	00 00       	nop
     2e8:	c5 08       	sbc	r12, r5
     2ea:	00 00       	nop
     2ec:	80 00       	.word	0x0080	; ????
    {
        if (homingReverse)
     2ee:	8e 00       	.word	0x008e	; ????
     2f0:	00 00       	nop
     2f2:	00 00       	nop
     2f4:	db 08       	sbc	r13, r11
        {
            if (step == 0)
     2f6:	00 00       	nop
     2f8:	80 00       	.word	0x0080	; ????
     2fa:	93 00       	.word	0x0093	; ????
     2fc:	00 00       	nop
     2fe:	00 00       	nop
     300:	f3 08       	sbc	r15, r3
     302:	00 00       	nop
     304:	80 00       	.word	0x0080	; ????
     306:	9f 00       	.word	0x009f	; ????

void StepControl()
{
    static uint8_t decimate;
    Homing();
    decimate+=1;
     308:	00 00       	nop
     30a:	00 00       	nop
     30c:	0e 09       	sbc	r16, r14
     30e:	00 00       	nop
     310:	80 00       	.word	0x0080	; ????
    if ((decimate>(decimateDrempel)) && (step!=0))
     312:	a4 00       	.word	0x00a4	; ????
     314:	00 00       	nop
     316:	00 00       	nop
     318:	2a 09       	sbc	r18, r10
     31a:	00 00       	nop
     31c:	80 00       	.word	0x0080	; ????
     31e:	a9 00       	.word	0x00a9	; ????
     320:	00 00       	nop
        step -= 1;
        PORTB |= (1<<DDB1);
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
     322:	00 00       	nop
     324:	46 09       	sbc	r20, r6
     326:	00 00       	nop
    if (drempelSturing > 250)
     328:	80 00       	.word	0x0080	; ????
     32a:	ae 00       	.word	0x00ae	; ????
    {
        drempelSturing =0;
     32c:	00 00       	nop
     32e:	00 00       	nop
        if (step>800)
     330:	63 09       	sbc	r22, r3
     332:	00 00       	nop
     334:	80 00       	.word	0x0080	; ????
     336:	b3 00       	.word	0x00b3	; ????
     338:	00 00       	nop
     33a:	00 00       	nop
     33c:	7f 09       	sbc	r23, r15
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
        }
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
     33e:	00 00       	nop
     340:	80 00       	.word	0x0080	; ????
     342:	b8 00       	.word	0x00b8	; ????
     344:	00 00       	nop
     346:	00 00       	nop
     348:	9c 09       	sbc	r25, r12
     34a:	00 00       	nop
     34c:	80 00       	.word	0x0080	; ????
        }
    }
    PORTB &= ~(1<<DDB1);
     34e:	c0 00       	.word	0x00c0	; ????
     350:	00 00       	nop
            if (step == 0)
            {
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
     352:	00 00       	nop
     354:	b8 09       	sbc	r27, r8
            decimateDrempel = 4;
        }
        else
        {
            // klaar
            decimateDrempel = 40;
     356:	00 00       	nop
     358:	80 00       	.word	0x0080	; ????
     35a:	c7 00       	.word	0x00c7	; ????
            step = stepTabel[0][0];
     35c:	00 00       	nop
     35e:	00 00       	nop
     360:	d5 09       	sbc	r29, r5
     362:	00 00       	nop
     364:	80 00       	.word	0x0080	; ????
     366:	d5 00       	.word	0x00d5	; ????
     368:	00 00       	nop
     36a:	00 00       	nop
            if (step>=0)
     36c:	ef 09       	sbc	r30, r15
     36e:	00 00       	nop
     370:	80 00       	.word	0x0080	; ????
     372:	da 00       	.word	0x00da	; ????
     374:	00 00       	nop
     376:	00 00       	nop
            {
                PORTB &= ~(1<<PB0); //vooruit
     378:	0a 0a       	sbc	r0, r26
            else
            {
                PORTB |= (1<<PB0); // terug
                step = -step;
            }
            doHoming = false;
     37a:	00 00       	nop
     37c:	80 00       	.word	0x0080	; ????
            needsHoming = false;
     37e:	df 00       	.word	0x00df	; ????
     380:	00 00       	nop
     382:	00 00       	nop
    static uint8_t decimate;
    Homing();
    decimate+=1;
    if ((decimate>(decimateDrempel)) && (step!=0))
    {
        decimate=0;
     384:	25 0a       	sbc	r2, r21
     386:	00 00       	nop
        step -= 1;
     388:	80 00       	.word	0x0080	; ????
     38a:	e4 00       	.word	0x00e4	; ????
     38c:	00 00       	nop
     38e:	00 00       	nop
     390:	41 0a       	sbc	r4, r17
     392:	00 00       	nop
     394:	80 00       	.word	0x0080	; ????
     396:	e9 00       	.word	0x00e9	; ????
     398:	00 00       	nop
        PORTB |= (1<<DDB1);
     39a:	00 00       	nop
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
     39c:	5c 0a       	sbc	r5, r28
     39e:	00 00       	nop
     3a0:	80 00       	.word	0x0080	; ????
    if (drempelSturing > 250)
     3a2:	ee 00       	.word	0x00ee	; ????
     3a4:	00 00       	nop
        step -= 1;
        PORTB |= (1<<DDB1);
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
     3a6:	00 00       	nop
     3a8:	78 0a       	sbc	r7, r24
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
        }
    }
    PORTB &= ~(1<<DDB1);
     3aa:	00 00       	nop
     3ac:	80 00       	.word	0x0080	; ????
    if (drempelSturing > 250)
    {
        drempelSturing =0;
        if (step>800)
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
     3ae:	f6 00       	.word	0x00f6	; ????
     3b0:	00 00       	nop
     3b2:	00 00       	nop
     3b4:	93 0a       	sbc	r9, r19
     3b6:	00 00       	nop
     3b8:	80 00       	.word	0x0080	; ????
     3ba:	fd 00       	.word	0x00fd	; ????
     3bc:	00 00       	nop
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
        }
    }
    PORTB &= ~(1<<DDB1);
     3be:	00 00       	nop
     3c0:	af 0a       	sbc	r10, r31
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
        }
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
     3c2:	00 00       	nop
     3c4:	80 00       	.word	0x0080	; ????
    {
        if (homingReverse)
        {
            if (step == 0)
            {
                homingReverse = false;
     3c6:	11 01       	movw	r2, r2
     3c8:	00 00       	nop
     3ca:	00 00       	nop
     3cc:	c6 0a       	sbc	r12, r22
     3ce:	00 00       	nop
    if (drempelSturing > 250)
    {
        drempelSturing =0;
        if (step>800)
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
     3d0:	80 00       	.word	0x0080	; ????
     3d2:	16 01       	movw	r2, r12
	...
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
        {
            huidigePositie = 0;
     3dc:	a2 00       	.word	0x00a2	; ????
	...
            PORTB |= (1<<PB0); // terug
            step = 32000;
     3e6:	00 00       	nop
     3e8:	a2 00       	.word	0x00a2	; ????
     3ea:	00 00       	nop
            decimateDrempel = 4;
     3ec:	00 00       	nop
     3ee:	00 00       	nop
     3f0:	de 0a       	sbc	r13, r30
     3f2:	00 00       	nop
     3f4:	80 00       	.word	0x0080	; ????
            {
                PORTB &= ~(1<<PB0); //vooruit
            }
            else
            {
                PORTB |= (1<<PB0); // terug
     3f6:	4d 00       	.word	0x004d	; ????
                step = -step;
     3f8:	00 00       	nop
     3fa:	00 00       	nop
     3fc:	f8 0a       	sbc	r15, r24
     3fe:	00 00       	nop
     400:	80 00       	.word	0x0080	; ????
     402:	51 00       	.word	0x0051	; ????
	...
     40c:	a2 00       	.word	0x00a2	; ????
	...
    }
    PORTB &= ~(1<<DDB1);
}

ISR(USART_RXC_vect)
{
     416:	00 00       	nop
     418:	a2 00       	.word	0x00a2	; ????
     41a:	00 00       	nop
     41c:	00 00       	nop
     41e:	00 00       	nop
     420:	13 0b       	sbc	r17, r19
     422:	00 00       	nop
     424:	82 00       	.word	0x0082	; ????
     426:	00 00       	nop
     428:	cb 0d       	add	r28, r11
     42a:	00 00       	nop
     42c:	33 0b       	sbc	r19, r19
     42e:	00 00       	nop
     430:	80 00       	.word	0x0080	; ????
     432:	fc 00       	.word	0x00fc	; ????
	...
    uartData1 = uartData2;
     43c:	a2 00       	.word	0x00a2	; ????
	...
    uartData2 = UDR;
     446:	00 00       	nop
     448:	a2 00       	.word	0x00a2	; ????
    if (!inSync)
     44a:	00 00       	nop
     44c:	00 00       	nop
     44e:	00 00       	nop
     450:	6c 0b       	sbc	r22, r28
    {
        // out of sync
        // set het brugblok uit
        DDRD &= ~(1<<PD7);
     452:	00 00       	nop
        PORTD &= ~(1<<PD7);
     454:	82 00       	.word	0x0082	; ????
        if ((uartData1 ==0) && (uartData2==0))
     456:	00 00       	nop
     458:	00 00       	nop
     45a:	00 00       	nop
     45c:	8e 0b       	sbc	r24, r30
     45e:	00 00       	nop
     460:	82 00       	.word	0x0082	; ????
     462:	00 00       	nop
     464:	13 10       	cpse	r1, r3
        {
            // sync gevonden
            byteCount = 2;
     466:	00 00       	nop
     468:	b6 0b       	sbc	r27, r22
     46a:	00 00       	nop
            pulseBreedteCount=0;
            // zit nog iets meer aanvast
        }

    }
}
     46c:	80 00       	.word	0x0080	; ????
     46e:	93 00       	.word	0x0093	; ????
     470:	00 00       	nop
     472:	00 00       	nop
     474:	cd 0b       	sbc	r28, r29
     476:	00 00       	nop
     478:	80 00       	.word	0x0080	; ????
     47a:	d4 00       	.word	0x00d4	; ????
     47c:	00 00       	nop
     47e:	00 00       	nop
     480:	e1 0b       	sbc	r30, r17
     482:	00 00       	nop
     484:	80 00       	.word	0x0080	; ????
     486:	44 01       	movw	r8, r8
	...
     490:	a2 00       	.word	0x00a2	; ????
	...
        }
    }
    else
    {
        // main programma zet deze op 0 als we 2 bytes bereiken
        byteCount += 1;
     49a:	00 00       	nop
     49c:	a2 00       	.word	0x00a2	; ????
     49e:	00 00       	nop
        // nu eerst de DA converter starten
        // save de status van het brugblok bij de start van de AD converter
        brugBlokDDR = DDRD;
     4a0:	00 00       	nop
     4a2:	00 00       	nop
     4a4:	f6 0b       	sbc	r31, r22
        ADCSR |= (1<<ADSC); // start de AD conversie de multiplexer word nu niet ingesteld ik neem aan dat die goed staat voor 1 blok
     4a6:	00 00       	nop

        // wacht lus want anders is de adc nog niet klaar met sample hold voordat de uitgang wijzigd.
        // nu 48us voordat de uitgang wijzigd en grogweg 70us nadat de uitgang wijzigd (heb 1.5 adc clock out of 13.5 nodig voor sample hold)
        for (volatile int i=0;i<30;i++);
     4a8:	24 00       	.word	0x0024	; ????
     4aa:	a7 00       	.word	0x00a7	; ????
     4ac:	5e 02       	muls	r21, r30
     4ae:	00 00       	nop
     4b0:	00 00       	nop
     4b2:	00 00       	nop
     4b4:	2e 00       	.word	0x002e	; ????
     4b6:	00 00       	nop
     4b8:	5e 02       	muls	r21, r30
     4ba:	00 00       	nop
     4bc:	00 00       	nop
     4be:	00 00       	nop
     4c0:	44 00       	.word	0x0044	; ????
     4c2:	a8 00       	.word	0x00a8	; ????
	...

        StepControl();
        if (middenDetectie)
     4cc:	44 00       	.word	0x0044	; ????
     4ce:	a9 00       	.word	0x00a9	; ????
	...
        {
            if ((PINC & (1<<PC3)) == 0)
            {
                // loc detected
                middenDetected = true;
     4d8:	44 00       	.word	0x0044	; ????
                snelheid = snelheid &0x80; // onthoud richting
     4da:	ab 00       	.word	0x00ab	; ????
     4dc:	08 00       	.word	0x0008	; ????
     4de:	00 00       	nop
     4e0:	00 00       	nop
     4e2:	00 00       	nop
            }
        }

        uint8_t snel = (snelheid & 0x40) ? 0: snelheid; // als er kortsluiting is dan 0 gebruiken
     4e4:	44 00       	.word	0x0044	; ????
     4e6:	ad 00       	.word	0x00ad	; ????
     4e8:	10 00       	.word	0x0010	; ????
     4ea:	00 00       	nop
     4ec:	00 00       	nop
     4ee:	00 00       	nop
        uint8_t pulse = pgm_read_byte(&pulseTabel[snel&0x3f][pulseBreedteCount>>3]);
     4f0:	44 00       	.word	0x0044	; ????
     4f2:	af 00       	.word	0x00af	; ????
     4f4:	1c 00       	.word	0x001c	; ????
     4f6:	00 00       	nop
     4f8:	00 00       	nop
     4fa:	00 00       	nop
     4fc:	44 00       	.word	0x0044	; ????
     4fe:	b2 00       	.word	0x00b2	; ????
     500:	22 00       	.word	0x0022	; ????
     502:	00 00       	nop
     504:	00 00       	nop
     506:	00 00       	nop
     508:	44 00       	.word	0x0044	; ????
     50a:	bc 00       	.word	0x00bc	; ????
     50c:	26 00       	.word	0x0026	; ????
     50e:	00 00       	nop
        if (pulse & (1<<(pulseBreedteCount&0x7)))
     510:	00 00       	nop
     512:	00 00       	nop
     514:	44 00       	.word	0x0044	; ????
     516:	bd 00       	.word	0x00bd	; ????
     518:	2c 00       	.word	0x002c	; ????
     51a:	00 00       	nop
     51c:	00 00       	nop
     51e:	00 00       	nop
     520:	44 00       	.word	0x0044	; ????
     522:	be 00       	.word	0x00be	; ????
     524:	3c 00       	.word	0x003c	; ????
        {
            // moet spanning geleverd worden
            // toevalig zit brugBlok op bit 7 en is riching bepaald door bit 7 in snelheid:)
            PORTD = (snelheid&0x80) | (PORTD&0x7f);
     526:	00 00       	nop
     528:	00 00       	nop
     52a:	00 00       	nop
     52c:	44 00       	.word	0x0044	; ????
     52e:	c0 00       	.word	0x00c0	; ????
     530:	48 00       	.word	0x0048	; ????
     532:	00 00       	nop
            DDRD |= (1<<DDD7);
     534:	00 00       	nop
            PORTD &= ~(1<<DDD7);
            DDRD &= ~(1<<DDD7);
        }


        pulseBreedteCount += 1;
     536:	00 00       	nop
     538:	44 00       	.word	0x0044	; ????
     53a:	c7 00       	.word	0x00c7	; ????
     53c:	4a 00       	.word	0x004a	; ????
     53e:	00 00       	nop
        if (pulseBreedteCount == AANTAL_PULSEN)
     540:	00 00       	nop
     542:	00 00       	nop
     544:	44 00       	.word	0x0044	; ????
     546:	c8 00       	.word	0x00c8	; ????
     548:	4e 00       	.word	0x004e	; ????
        {
            pulseBreedteCount=0;
     54a:	00 00       	nop
     54c:	00 00       	nop
     54e:	00 00       	nop
                middenDetected = true;
                snelheid = snelheid &0x80; // onthoud richting
            }
        }

        uint8_t snel = (snelheid & 0x40) ? 0: snelheid; // als er kortsluiting is dan 0 gebruiken
     550:	44 00       	.word	0x0044	; ????
     552:	b4 00       	.word	0x00b4	; ????
     554:	54 00       	.word	0x0054	; ????
     556:	00 00       	nop
     558:	00 00       	nop
            DDRD |= (1<<DDD7);
        }
        else
        {
            // geen spanning dus uitgang zwevend (geen pullup dus port op 0
            PORTD &= ~(1<<DDD7);
     55a:	00 00       	nop
            DDRD &= ~(1<<DDD7);
     55c:	44 00       	.word	0x0044	; ????
     55e:	b5 00       	.word	0x00b5	; ????



// tijdelijk voor testen
ISR(USART_UDRE_vect)
{
     560:	58 00       	.word	0x0058	; ????
     562:	00 00       	nop
     564:	00 00       	nop
     566:	00 00       	nop
     568:	44 00       	.word	0x0044	; ????
//    UDR = 0xf0;
}
     56a:	b6 00       	.word	0x00b6	; ????
     56c:	5a 00       	.word	0x005a	; ????
     56e:	00 00       	nop
     570:	00 00       	nop
     572:	00 00       	nop


ISR(ADC_vect)
{
     574:	44 00       	.word	0x0044	; ????
     576:	b7 00       	.word	0x00b7	; ????
     578:	66 00       	.word	0x0066	; ????
     57a:	00 00       	nop
     57c:	00 00       	nop
     57e:	00 00       	nop
     580:	44 00       	.word	0x0044	; ????
     582:	c4 00       	.word	0x00c4	; ????
     584:	6e 00       	.word	0x006e	; ????
     586:	00 00       	nop
    // LSB x x x x x x x x
    // waarbij x een AD bit is. Tezien is dat het 16bit getal uit de AD
    // geheel naar beneden is geschaald. Wil ik zodadelijk alleen het MSB
    // uit het filter pakken dan gooi ik bijna alle bitten weg. Dus moet
    // het AD getal met 64 vermenigvuldigd worden
    uint16_t input = ADCL + (ADCH<<8);
     588:	00 00       	nop
     58a:	00 00       	nop
     58c:	44 00       	.word	0x0044	; ????
     58e:	c5 00       	.word	0x00c5	; ????
     590:	70 00       	.word	0x0070	; ????
     592:	00 00       	nop
     594:	00 00       	nop
    // elk kanaal een appart filter en ook een
    // apart filter voor spanning en geen spanning
    //
    // convert adInput number to a bit mask

    uint16_t output = blokOff;
     596:	00 00       	nop
     598:	24 00       	.word	0x0024	; ????
     59a:	00 00       	nop
     59c:	88 00       	.word	0x0088	; ????
    if (brugBlokDDR & (1<<DDD7))
     59e:	00 00       	nop
     5a0:	00 00       	nop
     5a2:	00 00       	nop
     5a4:	4e 00       	.word	0x004e	; ????
    // optellen. Bij deze optelling kan een overflow onstaan gelukkig
    // is het filter zo dat ik kan garanderen dat input en output binnen
    // een 16bit word passen dus zal een evetuele tijdelijk overflow in een
    // tussen resultaat geen probleem opleveren.
    //output = input+output - (output>>4);
    output = input+output - (output>>6);
     5a6:	00 00       	nop
     5a8:	e6 02       	muls	r30, r22
     5aa:	00 00       	nop
     5ac:	05 0c       	add	r0, r5
     5ae:	00 00       	nop
     5b0:	24 00       	.word	0x0024	; ????
     5b2:	ce 00       	.word	0x00ce	; ????
     5b4:	e6 02       	muls	r30, r22
     5b6:	00 00       	nop
     5b8:	00 00       	nop
     5ba:	00 00       	nop
     5bc:	2e 00       	.word	0x002e	; ????
     5be:	00 00       	nop

    if (brugBlokDDR & (1<<DDD7))
     5c0:	e6 02       	muls	r30, r22
     5c2:	00 00       	nop
     5c4:	00 00       	nop
     5c6:	00 00       	nop
        }
        blokOn = output;
    }
    else
    {
        blokOff = output;
     5c8:	44 00       	.word	0x0044	; ????
     5ca:	cf 00       	.word	0x00cf	; ????
	...
    }
}
     5d4:	44 00       	.word	0x0044	; ????
     5d6:	a9 00       	.word	0x00a9	; ????
	...
     5e0:	44 00       	.word	0x0044	; ????
     5e2:	ab 00       	.word	0x00ab	; ????
    // convert adInput number to a bit mask

    uint16_t output = blokOff;
    if (brugBlokDDR & (1<<DDD7))
    {
        output = blokOn;
     5e4:	08 00       	.word	0x0008	; ????
     5e6:	00 00       	nop
     5e8:	00 00       	nop
     5ea:	00 00       	nop
     5ec:	44 00       	.word	0x0044	; ????
    output = input+output - (output>>6);

    if (brugBlokDDR & (1<<DDD7))
    {
        // blok heeft spanning
        if ((output > LOW_LEVEL_DREMPEL) && (output < HIGH_LEVEL_DREMPEL))
     5ee:	ad 00       	.word	0x00ad	; ????
     5f0:	10 00       	.word	0x0010	; ????
     5f2:	00 00       	nop
     5f4:	00 00       	nop
     5f6:	00 00       	nop
     5f8:	44 00       	.word	0x0044	; ????
        {
            // spanning binnen low en high dus concludeer ik kortsluiting
            // zet dit blok nu uit
            DDRD &= ~(1<<DDD7);
     5fa:	d2 00       	.word	0x00d2	; ????
            snelheid |= 0x40;  // zet bit 6 om kortsluiting te melden
     5fc:	22 00       	.word	0x0022	; ????
     5fe:	00 00       	nop
     600:	00 00       	nop
     602:	00 00       	nop
     604:	44 00       	.word	0x0044	; ????
        }
        blokOn = output;
     606:	d3 00       	.word	0x00d3	; ????
     608:	2c 00       	.word	0x002c	; ????
     60a:	00 00       	nop
     60c:	00 00       	nop
     60e:	00 00       	nop
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     610:	44 00       	.word	0x0044	; ????
     612:	d3 00       	.word	0x00d3	; ????
     614:	30 00       	.word	0x0030	; ????
     616:	00 00       	nop
     618:	00 00       	nop
     61a:	00 00       	nop
     61c:	44 00       	.word	0x0044	; ????
     61e:	db 00       	.word	0x00db	; ????
     620:	3c 00       	.word	0x003c	; ????
     622:	00 00       	nop
     624:	00 00       	nop
     626:	00 00       	nop
     628:	44 00       	.word	0x0044	; ????
     62a:	dc 00       	.word	0x00dc	; ????
     62c:	42 00       	.word	0x0042	; ????
     62e:	00 00       	nop
     630:	00 00       	nop
     632:	00 00       	nop
     634:	44 00       	.word	0x0044	; ????
     636:	de 00       	.word	0x00de	; ????
     638:	46 00       	.word	0x0046	; ????
     63a:	00 00       	nop
     63c:	00 00       	nop
     63e:	00 00       	nop
     640:	44 00       	.word	0x0044	; ????
    if (huidigePositie == 0)
     642:	df 00       	.word	0x00df	; ????
     644:	4a 00       	.word	0x004a	; ????
     646:	00 00       	nop
     648:	00 00       	nop
     64a:	00 00       	nop
     64c:	44 00       	.word	0x0044	; ????
     64e:	e5 00       	.word	0x00e5	; ????
     650:	58 00       	.word	0x0058	; ????
     652:	00 00       	nop
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     654:	00 00       	nop
     656:	00 00       	nop
     658:	44 00       	.word	0x0044	; ????
     65a:	e8 00       	.word	0x00e8	; ????
     65c:	68 00       	.word	0x0068	; ????
     65e:	00 00       	nop
     660:	00 00       	nop
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     662:	00 00       	nop
     664:	44 00       	.word	0x0044	; ????
     666:	b2 00       	.word	0x00b2	; ????
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
     668:	6c 00       	.word	0x006c	; ????
     66a:	00 00       	nop
    {
        PORTB &= ~(1<<PB0);
     66c:	00 00       	nop
        step = update;
     66e:	00 00       	nop
     670:	44 00       	.word	0x0044	; ????
     672:	bc 00       	.word	0x00bc	; ????
     674:	70 00       	.word	0x0070	; ????
     676:	00 00       	nop
    }
    else
    {
        PORTB |= (1<<PB0);
     678:	00 00       	nop
        step = -update;
     67a:	00 00       	nop
     67c:	44 00       	.word	0x0044	; ????
     67e:	bd 00       	.word	0x00bd	; ????
     680:	76 00       	.word	0x0076	; ????
     682:	00 00       	nop
     684:	00 00       	nop
     686:	00 00       	nop
     688:	44 00       	.word	0x0044	; ????
    }
}

void huisVerlichting( bool aan)
{
    if (aan)
     68a:	be 00       	.word	0x00be	; ????
     68c:	86 00       	.word	0x0086	; ????
    {
        PORTC &= ~(1<<PC4);
        huisDecimation = 0;
    }
    else
        PORTC |= (1<<PC4);
     68e:	00 00       	nop
     690:	00 00       	nop

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
     692:	00 00       	nop
        huisDecimation = 0;
     694:	44 00       	.word	0x0044	; ????
     696:	c0 00       	.word	0x00c0	; ????
     698:	92 00       	.word	0x0092	; ????
    else
        PORTC |= (1<<PC4);
}

void main()
{
     69a:	00 00       	nop
     69c:	00 00       	nop
     69e:	00 00       	nop
     6a0:	44 00       	.word	0x0044	; ????
     6a2:	c7 00       	.word	0x00c7	; ????
     6a4:	94 00       	.word	0x0094	; ????
     6a6:	00 00       	nop
     6a8:	00 00       	nop
     6aa:	00 00       	nop
     6ac:	44 00       	.word	0x0044	; ????
     6ae:	c8 00       	.word	0x00c8	; ????
     6b0:	98 00       	.word	0x0098	; ????
     6b2:	00 00       	nop
     6b4:	00 00       	nop
     6b6:	00 00       	nop
     6b8:	44 00       	.word	0x0044	; ????
     6ba:	d5 00       	.word	0x00d5	; ????
     6bc:	9e 00       	.word	0x009e	; ????
    //PORTD = (1 << DDD6) | (1 << DDD7); // bit 6..7 pullup
    DDRD = (1 << DDD2)| (1 << DDD3)| (1 << DDD4)| (1 << DDD5)| (1 << DDD6); // 2..6 output 7 input
     6be:	00 00       	nop
     6c0:	00 00       	nop
    PORTD = 31 <<2; // alle Blok Relais uit d2..d6
     6c2:	00 00       	nop
    // PC4 Led Lamp
    // ingang
    // PC2 Homing
    // PC3 Platform middel
    // PC5 locloods lamp
    DDRC = (1 << DDC1) | (1 << DDC4) | (1<<DDC5);
     6c4:	44 00       	.word	0x0044	; ????
     6c6:	d6 00       	.word	0x00d6	; ????

    DDRB = (1 << DDB0)| (1 << DDB1)| (1 << DDB2)| (1 << DDB3)| (1 << DDB4)| (1 << DDB5); // 0..5 output
     6c8:	a2 00       	.word	0x00a2	; ????
     6ca:	00 00       	nop
    PORTB = (1<<PB2) + STEPPING;  // motor disabled and fullstep enable alleen als we een draai commando krijgen
     6cc:	00 00       	nop
     6ce:	00 00       	nop
    // ADEN  ADSC  ADFR  ADIF  ADIE  ADPS2 ADPS1 ADPS0
    // we enablen de ad converter ADEN en enablen de interrupt ADIE
    // en we selecteren division factor 128 en dat geeft
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);
     6d0:	44 00       	.word	0x0044	; ????
     6d2:	d7 00       	.word	0x00d7	; ????
     6d4:	b4 00       	.word	0x00b4	; ????
     6d6:	00 00       	nop
     6d8:	00 00       	nop
     6da:	00 00       	nop
     6dc:	44 00       	.word	0x0044	; ????
     6de:	db 00       	.word	0x00db	; ????
     6e0:	b6 00       	.word	0x00b6	; ????
     6e2:	00 00       	nop
     6e4:	00 00       	nop
     6e6:	00 00       	nop
     6e8:	44 00       	.word	0x0044	; ????
     6ea:	dc 00       	.word	0x00dc	; ????


    for (uint8_t i=0;i<48;i++)
    {
        stepTabel[i][0] = eeprom_read_word((uint16_t*)&stepTabelRom[i][0]);
     6ec:	bc 00       	.word	0x00bc	; ????
     6ee:	00 00       	nop
     6f0:	00 00       	nop
     6f2:	00 00       	nop
     6f4:	44 00       	.word	0x0044	; ????
        stepTabel[i][1] = eeprom_read_word((uint16_t*)&stepTabelRom[i][1]);
     6f6:	db 00       	.word	0x00db	; ????
     6f8:	c0 00       	.word	0x00c0	; ????
     6fa:	00 00       	nop
     6fc:	00 00       	nop
     6fe:	00 00       	nop
     700:	44 00       	.word	0x0044	; ????
     702:	e8 00       	.word	0x00e8	; ????
     704:	c4 00       	.word	0x00c4	; ????
     706:	00 00       	nop
     708:	00 00       	nop
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);


    for (uint8_t i=0;i<48;i++)
     70a:	00 00       	nop
     70c:	44 00       	.word	0x0044	; ????
     70e:	e1 00       	.word	0x00e1	; ????
     710:	c8 00       	.word	0x00c8	; ????
    }


    //zet de baud rate van de uart 28800 met 14.7456Mhz
    // klok.geeft 31 voor de deler
    UBRRL = 31;
     712:	00 00       	nop
     714:	00 00       	nop

    // zet de uart aan
    //   7     6     5     4     3     2     1     0
    // RXCIE TXCIE UDRIE RXEN  TXEN  CHR9  RXB8  TXB8
    // dit is voor een blok
    UCSRB = (1<<RXCIE)+(1<<RXEN)+(1<<TXEN);
     716:	00 00       	nop
     718:	44 00       	.word	0x0044	; ????
    // tijdelijk voor test
    //UCSRB =(1<<RXCIE)+(1<<UDRIE)+(1<<RXEN)+(1<<TXEN);
    //UDR = 0xf0;
    //UCSRA = 0; //(1<<UDRE);

    byteCount = 0;
     71a:	e8 00       	.word	0x00e8	; ????
     71c:	d8 00       	.word	0x00d8	; ????
    syncCount = SYNC_COUNT;
     71e:	00 00       	nop
     720:	00 00       	nop
     722:	00 00       	nop
    uartData1 = uartData2 = 1; // geen 0 want er is geen sync
     724:	44 00       	.word	0x0044	; ????
     726:	e5 00       	.word	0x00e5	; ????
     728:	dc 00       	.word	0x00dc	; ????
     72a:	00 00       	nop
     72c:	00 00       	nop
     72e:	00 00       	nop
     730:	44 00       	.word	0x0044	; ????
     732:	af 00       	.word	0x00af	; ????
     734:	e0 00       	.word	0x00e0	; ????
     736:	00 00       	nop
     738:	00 00       	nop
     73a:	00 00       	nop
     73c:	44 00       	.word	0x0044	; ????
    wdt_enable(WDTO_60MS);
    sei ();
     73e:	e1 00       	.word	0x00e1	; ????

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
     740:	ea 00       	.word	0x00ea	; ????
        huisDecimation = 0;
     742:	00 00       	nop
     744:	00 00       	nop
     746:	00 00       	nop
     748:	44 00       	.word	0x0044	; ????
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     74a:	b4 00       	.word	0x00b4	; ????
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
                    {
                        step = 1; // correct status
     74c:	f4 00       	.word	0x00f4	; ????
     74e:	00 00       	nop
     750:	00 00       	nop
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
        step = -update;
     752:	00 00       	nop
     754:	44 00       	.word	0x0044	; ????
     756:	b5 00       	.word	0x00b5	; ????
                    {

                        UDR = blokOff >> 8;
                        snelheid = snelheid &0x80; // onthoud richting
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
     758:	f8 00       	.word	0x00f8	; ????
     75a:	00 00       	nop
     75c:	00 00       	nop
     75e:	00 00       	nop
     760:	44 00       	.word	0x0044	; ????
     762:	b6 00       	.word	0x00b6	; ????
    sei ();
    huisVerlichting(true);

    do
    {
        while(byteCount!=2);
     764:	fa 00       	.word	0x00fa	; ????
     766:	00 00       	nop
     768:	00 00       	nop
     76a:	00 00       	nop
        byteCount = 0;
     76c:	44 00       	.word	0x0044	; ????
     76e:	b7 00       	.word	0x00b7	; ????
        // er zijn 2 bytes
        syncCount -= 1;
     770:	06 01       	movw	r0, r12
        if (syncCount)
     772:	00 00       	nop
     774:	00 00       	nop
     776:	00 00       	nop
        {

            if ((uartData1==0) && (uartData2==0))
     778:	44 00       	.word	0x0044	; ????
     77a:	c4 00       	.word	0x00c4	; ????
     77c:	10 01       	movw	r2, r0
     77e:	00 00       	nop
     780:	00 00       	nop
     782:	00 00       	nop
     784:	44 00       	.word	0x0044	; ????
     786:	c5 00       	.word	0x00c5	; ????
            {
                // we hebben een sync
                syncCount = SYNC_COUNT;
     788:	12 01       	movw	r2, r4
     78a:	00 00       	nop
     78c:	19 0c       	add	r1, r9
                pulseBreedteCount = 0;
     78e:	00 00       	nop
     790:	28 00       	.word	0x0028	; ????
                uartData1 = uartData2 = 1;// geen 0 want er is geen sync
     792:	d0 00       	.word	0x00d0	; ????
     794:	66 00       	.word	0x0066	; ????
     796:	80 00       	.word	0x0080	; ????
     798:	29 0c       	add	r2, r9
                inSync = true;
     79a:	00 00       	nop
     79c:	26 00       	.word	0x0026	; ????
                if (step == 0)
     79e:	da 00       	.word	0x00da	; ????
     7a0:	65 00       	.word	0x0065	; ????
     7a2:	80 00       	.word	0x0080	; ????
     7a4:	00 00       	nop
     7a6:	00 00       	nop
     7a8:	c0 00       	.word	0x00c0	; ????
	...
                {
                    huisDecimation += 1;
     7b2:	00 00       	nop
                    if (huisDecimation == 250)
     7b4:	e0 00       	.word	0x00e0	; ????
     7b6:	00 00       	nop
    // ADEN  ADSC  ADFR  ADIF  ADIE  ADPS2 ADPS1 ADPS0
    // we enablen de ad converter ADEN en enablen de interrupt ADIE
    // en we selecteren division factor 128 en dat geeft
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);
     7b8:	2a 01       	movw	r4, r20
                    if (huisDecimation == 250)
                    {
                        huisVerlichting(false);
                    }
                }
                wdt_reset();
     7ba:	00 00       	nop
     7bc:	00 00       	nop
    {
        PORTC &= ~(1<<PC4);
        huisDecimation = 0;
    }
    else
        PORTC |= (1<<PC4);
     7be:	00 00       	nop
     7c0:	24 00       	.word	0x0024	; ????
     7c2:	00 00       	nop
     7c4:	2a 01       	movw	r4, r20
                wdt_reset();
            }
            else
            {
                // in de assembly van de blok controller word naar een adres 0 gekeken naar een reset commando, Ik geloof niet dat ik daar gebruik van maak
                uint16_t adres = uartData1 | ((uartData2&0x3)<<8);
     7c6:	00 00       	nop
     7c8:	00 00       	nop
     7ca:	00 00       	nop
     7cc:	4e 00       	.word	0x004e	; ????
     7ce:	00 00       	nop
     7d0:	10 04       	cpc	r1, r0
     7d2:	00 00       	nop
                uint8_t data = uartData2 >> 2;
     7d4:	3f 0c       	add	r3, r15
     7d6:	00 00       	nop
     7d8:	24 00       	.word	0x0024	; ????
     7da:	eb 00       	.word	0x00eb	; ????

                uint16_t startAdres = eeprom_read_word (&EepromAdres);
     7dc:	10 04       	cpc	r1, r0
     7de:	00 00       	nop
     7e0:	00 00       	nop
                cli();
     7e2:	00 00       	nop
                if (startAdres == adres)
     7e4:	2e 00       	.word	0x002e	; ????
     7e6:	00 00       	nop
     7e8:	10 04       	cpc	r1, r0
                        }

                    }

                }
                else if ((startAdres+1) == adres)
     7ea:	00 00       	nop
     7ec:	00 00       	nop
     7ee:	00 00       	nop
     7f0:	44 00       	.word	0x0044	; ????
     7f2:	ec 00       	.word	0x00ec	; ????
	...
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
                }
                else if (((startAdres+2) == adres) || ((startAdres+3) == adres))
     7fc:	44 00       	.word	0x0044	; ????
     7fe:	ed 00       	.word	0x00ed	; ????
     800:	2c 00       	.word	0x002c	; ????
     802:	00 00       	nop
     804:	00 00       	nop
     806:	00 00       	nop
     808:	44 00       	.word	0x0044	; ????
     80a:	ee 00       	.word	0x00ee	; ????
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
                    }

                }
                sei ();
     80c:	34 00       	.word	0x0034	; ????
     80e:	00 00       	nop
     810:	00 00       	nop
     812:	00 00       	nop
                uint16_t startAdres = eeprom_read_word (&EepromAdres);
                cli();
                if (startAdres == adres)
                {
                    //blok ccommandos
                    if (data==VOORUIT)
     814:	44 00       	.word	0x0044	; ????
     816:	ef 00       	.word	0x00ef	; ????
     818:	3a 00       	.word	0x003a	; ????
                    {
                        snelheid |= 0x80;
                        UDR = blokOn >> 8;
                        blokOn = HIGH_LEVEL;
                    }
                    else if (data==ACHTERUIT)
     81a:	00 00       	nop
     81c:	00 00       	nop
     81e:	00 00       	nop
                    {
                        snelheid &= ~0x80;
                        UDR = blokOn >> 8;
                        blokOn = LOW_LEVEL;
                    }
                    else if (data>= GROEN)
     820:	44 00       	.word	0x0044	; ????
     822:	f3 00       	.word	0x00f3	; ????
     824:	42 00       	.word	0x0042	; ????
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     826:	00 00       	nop
     828:	00 00       	nop
     82a:	00 00       	nop
     82c:	44 00       	.word	0x0044	; ????
     82e:	f4 00       	.word	0x00f4	; ????
     830:	44 00       	.word	0x0044	; ????
     832:	00 00       	nop
     834:	00 00       	nop
     836:	00 00       	nop
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     838:	44 00       	.word	0x0044	; ????
     83a:	f5 00       	.word	0x00f5	; ????

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
     83c:	46 00       	.word	0x0046	; ????
        huisDecimation = 0;
     83e:	00 00       	nop
     840:	00 00       	nop
                {
                    bool tweedeIndex = ((startAdres+3) == adres);

                    // draai commando
                    huisVerlichting(true);
                    if (data<=60)
     842:	00 00       	nop
     844:	44 00       	.word	0x0044	; ????
     846:	f5 00       	.word	0x00f5	; ????

                    else if (data==48)
                    {
                        updatePosition(1);
                    }
                    else if (data==49)
     848:	4e 00       	.word	0x004e	; ????
     84a:	00 00       	nop
     84c:	00 00       	nop
                    {
                        updatePosition(-1);
                    }
                    else if (data==50)
     84e:	00 00       	nop
     850:	44 00       	.word	0x0044	; ????
     852:	f8 00       	.word	0x00f8	; ????
                    {
                        updatePosition(2);
                    }
                    else if (data==51)
     854:	56 00       	.word	0x0056	; ????
     856:	00 00       	nop
     858:	00 00       	nop
                    {
                        updatePosition(-2);
                    }
                    else if (data==52)
     85a:	00 00       	nop
     85c:	44 00       	.word	0x0044	; ????
     85e:	2c 01       	movw	r4, r24
                    {
                        updatePosition(4);
                    }
                    else if (data==53)
     860:	5c 00       	.word	0x005c	; ????
     862:	00 00       	nop
     864:	00 00       	nop
                    {
                        updatePosition(-4);
                    }
                    else if (data==54)
     866:	00 00       	nop
     868:	44 00       	.word	0x0044	; ????
     86a:	fe 00       	.word	0x00fe	; ????
                    {
                        updatePosition(8);
                    }
                    else if (data==55)
     86c:	86 00       	.word	0x0086	; ????
     86e:	00 00       	nop
     870:	00 00       	nop
                    {
                        updatePosition(-8);
                    }
                    else if (data==56)
     872:	00 00       	nop
     874:	44 00       	.word	0x0044	; ????
     876:	01 01       	movw	r0, r2
                    {
                        updatePosition(16);
                    }
                    else if (data==57)
     878:	90 00       	.word	0x0090	; ????
     87a:	00 00       	nop
     87c:	00 00       	nop
                    {
                        updatePosition(-16);
                    }
                    else if (data==58)
     87e:	00 00       	nop
     880:	44 00       	.word	0x0044	; ????
     882:	02 01       	movw	r0, r4
                    {
                        updatePosition(32);
                    }
                    else if (data==59)
     884:	96 00       	.word	0x0096	; ????
     886:	00 00       	nop
     888:	00 00       	nop
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
     88a:	00 00       	nop
     88c:	44 00       	.word	0x0044	; ????
     88e:	06 01       	movw	r0, r12
                            step = stepTabel[1][0];
                            homingReverse = true;
                        }
                        doHoming = true;
                    }
                    else if (data==62)
     890:	98 00       	.word	0x0098	; ????
     892:	00 00       	nop
     894:	00 00       	nop
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     896:	00 00       	nop
     898:	44 00       	.word	0x0044	; ????
     89a:	06 01       	movw	r0, r12
     89c:	a4 00       	.word	0x00a4	; ????
     89e:	00 00       	nop
     8a0:	00 00       	nop
     8a2:	00 00       	nop
     8a4:	44 00       	.word	0x0044	; ????
     8a6:	08 01       	movw	r0, r16
     8a8:	b6 00       	.word	0x00b6	; ????
     8aa:	00 00       	nop
     8ac:	00 00       	nop
     8ae:	00 00       	nop
     8b0:	44 00       	.word	0x0044	; ????
     8b2:	09 01       	movw	r0, r18
     8b4:	b8 00       	.word	0x00b8	; ????
     8b6:	00 00       	nop
     8b8:	00 00       	nop
                    }

                }
                else if ((startAdres+1) == adres)
                {
                    if (data == 63)
     8ba:	00 00       	nop
     8bc:	44 00       	.word	0x0044	; ????
     8be:	0b 01       	movw	r0, r22
                    {
                        PORTC |= (1<<PC1);
                    }
                    else if (data == 62)
     8c0:	c0 00       	.word	0x00c0	; ????
     8c2:	00 00       	nop
     8c4:	00 00       	nop
                    {
                        PORTC &= ~(1<<PC1);
                    }
                    else if (data==60)
     8c6:	00 00       	nop
     8c8:	44 00       	.word	0x0044	; ????
     8ca:	0e 01       	movw	r0, r28
                    {
                        middenDetectie = true;
                    }
                    else if (data==61)
     8cc:	c4 00       	.word	0x00c4	; ????
     8ce:	00 00       	nop
     8d0:	00 00       	nop
                    {
                        middenDetected = false;
                        middenDetectie = false;
                    }
                    else if (data==58)
     8d2:	00 00       	nop
     8d4:	44 00       	.word	0x0044	; ????
     8d6:	0f 01       	movw	r0, r30
                    {
                        PORTC |= (1<<PC5);
                    }
                    else if (data==59)
     8d8:	ca 00       	.word	0x00ca	; ????
     8da:	00 00       	nop
     8dc:	00 00       	nop
                    }
                    else
                    {
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
     8de:	00 00       	nop
     8e0:	44 00       	.word	0x0044	; ????
     8e2:	13 01       	movw	r2, r6
     8e4:	d4 00       	.word	0x00d4	; ????
     8e6:	00 00       	nop
     8e8:	00 00       	nop
     8ea:	00 00       	nop
     8ec:	44 00       	.word	0x0044	; ????
                    }

                    UDR = 0; // misschien iets van de detectors
     8ee:	14 01       	movw	r2, r8
     8f0:	e0 00       	.word	0x00e0	; ????

                    // draai commando
                    huisVerlichting(true);
                    if (data<=60)
                    {
                        PORTB = STEPPING;  // motor enabled and fullstep
     8f2:	00 00       	nop
     8f4:	00 00       	nop
                    }

                    if (data<48)
     8f6:	00 00       	nop
     8f8:	44 00       	.word	0x0044	; ????
     8fa:	15 01       	movw	r2, r10
                    {
                        if (huidigePositie == data)
     8fc:	00 01       	movw	r0, r0
     8fe:	00 00       	nop
     900:	00 00       	nop
     902:	00 00       	nop

                    UDR = 0; // misschien iets van de detectors
                }
                else if (((startAdres+2) == adres) || ((startAdres+3) == adres))
                {
                    bool tweedeIndex = ((startAdres+3) == adres);
     904:	44 00       	.word	0x0044	; ????
     906:	19 01       	movw	r2, r18
     908:	16 01       	movw	r2, r12
     90a:	00 00       	nop
     90c:	00 00       	nop
                        if (huidigePositie == data)
                        {
                        }
                        else
                        {
                            int16_t naar = stepTabel[data][tweedeIndex];
     90e:	00 00       	nop
     910:	44 00       	.word	0x0044	; ????
     912:	1a 01       	movw	r2, r20
     914:	24 01       	movw	r4, r8
     916:	00 00       	nop
     918:	00 00       	nop
     91a:	00 00       	nop
     91c:	44 00       	.word	0x0044	; ????
     91e:	24 01       	movw	r4, r8
     920:	26 01       	movw	r4, r12
     922:	00 00       	nop
     924:	00 00       	nop
                            int16_t van = stepTabel[huidigePositie][huidigePosititieTweedeIndex];
     926:	00 00       	nop
     928:	44 00       	.word	0x0044	; ????
     92a:	25 01       	movw	r4, r10
     92c:	30 01       	movw	r6, r0
     92e:	00 00       	nop
     930:	00 00       	nop
     932:	00 00       	nop
     934:	44 00       	.word	0x0044	; ????
     936:	27 01       	movw	r4, r14
     938:	3a 01       	movw	r6, r20
     93a:	00 00       	nop
     93c:	00 00       	nop
     93e:	00 00       	nop
     940:	44 00       	.word	0x0044	; ????
                            if (huidigePositie < data)
     942:	13 01       	movw	r2, r6
     944:	40 01       	movw	r8, r0
     946:	00 00       	nop
                            {
                                PORTB &= ~(1<<PB0);
     948:	00 00       	nop
                                step = naar - van;
     94a:	00 00       	nop
     94c:	44 00       	.word	0x0044	; ????
     94e:	1f 01       	movw	r2, r30
     950:	4a 01       	movw	r8, r20
     952:	00 00       	nop
     954:	00 00       	nop
                            else
                            {
                                PORTB |= (1<<PB0);
                                step = van - naar;
                            }
                            huidigePositie = data;
     956:	00 00       	nop
     958:	44 00       	.word	0x0044	; ????
                            huidigePosititieTweedeIndex = tweedeIndex;
     95a:	20 01       	movw	r4, r0
     95c:	4c 01       	movw	r8, r24
     95e:	00 00       	nop
                if (startAdres == adres)
                {
                    //blok ccommandos
                    if (data==VOORUIT)
                    {
                        snelheid |= 0x80;
     960:	53 0c       	add	r5, r3
     962:	00 00       	nop
     964:	40 00       	.word	0x0040	; ????
     966:	13 01       	movw	r2, r6
     968:	1e 00       	.word	0x001e	; ????
                        UDR = blokOn >> 8;
     96a:	00 00       	nop
     96c:	00 00       	nop
     96e:	00 00       	nop
     970:	c0 00       	.word	0x00c0	; ????
     972:	00 00       	nop
                        blokOn = HIGH_LEVEL;
     974:	86 00       	.word	0x0086	; ????
     976:	00 00       	nop
     978:	5f 0c       	add	r5, r15
     97a:	00 00       	nop
     97c:	80 00       	.word	0x0080	; ????
                    else if (data>= GROEN)
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
                    }
                    else if (data ==0)
     97e:	06 01       	movw	r0, r12
     980:	01 00       	.word	0x0001	; ????
                    {

                        UDR = blokOff >> 8;
     982:	00 00       	nop
     984:	00 00       	nop
     986:	00 00       	nop
     988:	c0 00       	.word	0x00c0	; ????
     98a:	00 00       	nop
                        snelheid = snelheid &0x80; // onthoud richting
     98c:	98 00       	.word	0x0098	; ????
     98e:	00 00       	nop
     990:	00 00       	nop
     992:	00 00       	nop
     994:	e0 00       	.word	0x00e0	; ????
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
     996:	00 00       	nop
     998:	b6 00       	.word	0x00b6	; ????
     99a:	00 00       	nop
     99c:	00 00       	nop
     99e:	00 00       	nop
     9a0:	e0 00       	.word	0x00e0	; ????
     9a2:	00 00       	nop
     9a4:	50 01       	movw	r10, r0
     9a6:	00 00       	nop
     9a8:	00 00       	nop
     9aa:	00 00       	nop
                        UDR = blokOn >> 8;
                        blokOn = HIGH_LEVEL;
                    }
                    else if (data==ACHTERUIT)
                    {
                        snelheid &= ~0x80;
     9ac:	24 00       	.word	0x0024	; ????
     9ae:	00 00       	nop
     9b0:	50 01       	movw	r10, r0
     9b2:	00 00       	nop
     9b4:	00 00       	nop
                        UDR = blokOn >> 8;
     9b6:	00 00       	nop
     9b8:	4e 00       	.word	0x004e	; ????
     9ba:	00 00       	nop
     9bc:	60 05       	cpc	r22, r0
     9be:	00 00       	nop
                        blokOn = LOW_LEVEL;
     9c0:	6f 0c       	add	r6, r15
     9c2:	00 00       	nop
     9c4:	24 00       	.word	0x0024	; ????
     9c6:	31 01       	movw	r6, r2
     9c8:	60 05       	cpc	r22, r0
                                step = naar - van;

                            }
                            else
                            {
                                PORTB |= (1<<PB0);
     9ca:	00 00       	nop
                                step = van - naar;
     9cc:	00 00       	nop
     9ce:	00 00       	nop
     9d0:	2e 00       	.word	0x002e	; ????
     9d2:	00 00       	nop
     9d4:	60 05       	cpc	r22, r0
     9d6:	00 00       	nop
     9d8:	00 00       	nop
                }
                else if ((startAdres+1) == adres)
                {
                    if (data == 63)
                    {
                        PORTC |= (1<<PC1);
     9da:	00 00       	nop
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     9dc:	44 00       	.word	0x0044	; ????
     9de:	32 01       	movw	r6, r4
	...
                    }
                    else
                    {
                        // snelheid commando
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     9e8:	44 00       	.word	0x0044	; ????
     9ea:	34 01       	movw	r6, r8
     9ec:	0a 00       	.word	0x000a	; ????
     9ee:	00 00       	nop
     9f0:	00 00       	nop
     9f2:	00 00       	nop
                        if (middenDetected == false)
     9f4:	24 00       	.word	0x0024	; ????
     9f6:	00 00       	nop
     9f8:	14 00       	.word	0x0014	; ????
     9fa:	00 00       	nop
                        {
                            // alleen een snelheid update als er nog geen midden detectie gedaan is.
                            snelheid = (snelheid &0xc0) | data; // onthoud richting en kortsluiting
     9fc:	00 00       	nop
     9fe:	00 00       	nop
     a00:	4e 00       	.word	0x004e	; ????
     a02:	00 00       	nop
     a04:	74 05       	cpc	r23, r4
     a06:	00 00       	nop
     a08:	83 0c       	add	r8, r3
                        blokOn = LOW_LEVEL;
                    }
                    else if (data>= GROEN)
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     a0a:	00 00       	nop
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     a0c:	24 00       	.word	0x0024	; ????
     a0e:	37 01       	movw	r6, r14
                    {
                        PORTC &= ~(1<<PC1);
                    }
                    else if (data==60)
                    {
                        middenDetectie = true;
     a10:	74 05       	cpc	r23, r4
     a12:	00 00       	nop
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     a14:	00 00       	nop
     a16:	00 00       	nop
                    {
                        PORTC |= (1<<PC1);
                    }
                    else if (data == 62)
                    {
                        PORTC &= ~(1<<PC1);
     a18:	2e 00       	.word	0x002e	; ????
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     a1a:	00 00       	nop
     a1c:	74 05       	cpc	r23, r4
                    }
                    else
                    {
                        // snelheid commando
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     a1e:	00 00       	nop
     a20:	00 00       	nop
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     a22:	00 00       	nop
     a24:	44 00       	.word	0x0044	; ????
     a26:	38 01       	movw	r6, r16
	...
     a30:	44 00       	.word	0x0044	; ????
     a32:	4b 01       	movw	r8, r22
     a34:	14 00       	.word	0x0014	; ????
     a36:	00 00       	nop
     a38:	00 00       	nop
     a3a:	00 00       	nop
     a3c:	44 00       	.word	0x0044	; ????
     a3e:	5b 01       	movw	r10, r22
     a40:	22 00       	.word	0x0022	; ????
     a42:	00 00       	nop
     a44:	00 00       	nop
     a46:	00 00       	nop
     a48:	44 00       	.word	0x0044	; ????
     a4a:	5c 01       	movw	r10, r24
    if (huidigePositie == 0)
     a4c:	2a 00       	.word	0x002a	; ????
     a4e:	00 00       	nop
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
     a50:	00 00       	nop
        step = update;
     a52:	00 00       	nop
     a54:	44 00       	.word	0x0044	; ????
     a56:	68 01       	movw	r12, r16
     a58:	32 00       	.word	0x0032	; ????
     a5a:	00 00       	nop
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     a5c:	00 00       	nop
     a5e:	00 00       	nop
     a60:	44 00       	.word	0x0044	; ????
     a62:	6a 01       	movw	r12, r20
     a64:	4c 00       	.word	0x004c	; ????
     a66:	00 00       	nop
     a68:	00 00       	nop
     a6a:	00 00       	nop
     a6c:	44 00       	.word	0x0044	; ????
     a6e:	78 01       	movw	r14, r16
     a70:	54 00       	.word	0x0054	; ????
     a72:	00 00       	nop
     a74:	00 00       	nop
     a76:	00 00       	nop
     a78:	44 00       	.word	0x0044	; ????
     a7a:	7a 01       	movw	r14, r20
     a7c:	5c 00       	.word	0x005c	; ????
     a7e:	00 00       	nop
     a80:	00 00       	nop
     a82:	00 00       	nop
     a84:	44 00       	.word	0x0044	; ????
    if (huidigePositie == 0)
     a86:	5e 01       	movw	r10, r28
     a88:	70 00       	.word	0x0070	; ????
        PORTB &= ~(1<<PB0);
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
     a8a:	00 00       	nop
        step = -update;
     a8c:	00 00       	nop
     a8e:	00 00       	nop
     a90:	44 00       	.word	0x0044	; ????
     a92:	6d 01       	movw	r12, r26
     a94:	7a 00       	.word	0x007a	; ????
     a96:	00 00       	nop
     a98:	00 00       	nop
     a9a:	00 00       	nop
     a9c:	44 00       	.word	0x0044	; ????
     a9e:	71 01       	movw	r14, r2
     aa0:	86 00       	.word	0x0086	; ????
     aa2:	00 00       	nop
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     aa4:	00 00       	nop
     aa6:	00 00       	nop
     aa8:	44 00       	.word	0x0044	; ????
     aaa:	72 01       	movw	r14, r4
     aac:	88 00       	.word	0x0088	; ????
     aae:	00 00       	nop
     ab0:	00 00       	nop
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     ab2:	00 00       	nop
     ab4:	44 00       	.word	0x0044	; ????
     ab6:	74 01       	movw	r14, r8
     ab8:	92 00       	.word	0x0092	; ????
     aba:	00 00       	nop
     abc:	97 0c       	add	r9, r7
     abe:	00 00       	nop
     ac0:	40 00       	.word	0x0040	; ????
     ac2:	4b 01       	movw	r8, r22
     ac4:	18 00       	.word	0x0018	; ????
     ac6:	00 00       	nop
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     ac8:	00 00       	nop
     aca:	00 00       	nop
     acc:	c0 00       	.word	0x00c0	; ????
	...
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     ad6:	00 00       	nop
     ad8:	e0 00       	.word	0x00e0	; ????
     ada:	00 00       	nop
     adc:	9c 00       	.word	0x009c	; ????
                    {

                        UDR = blokOff >> 8;
                        snelheid = snelheid &0x80; // onthoud richting
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
     ade:	00 00       	nop
     ae0:	00 00       	nop
     ae2:	00 00       	nop
                    {
                        middenDetectie = true;
                    }
                    else if (data==61)
                    {
                        middenDetected = false;
     ae4:	24 00       	.word	0x0024	; ????
     ae6:	00 00       	nop
                        middenDetectie = false;
     ae8:	9c 00       	.word	0x009c	; ????
     aea:	00 00       	nop
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     aec:	00 00       	nop
     aee:	00 00       	nop
                    {
                        PORTC |= (1<<PC5);
                    }
                    else if (data==59)
                    {
                        PORTC &= ~(1<<PC5);
     af0:	4e 00       	.word	0x004e	; ????
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     af2:	00 00       	nop
     af4:	10 06       	cpc	r1, r16
                        middenDetected = false;
                        middenDetectie = false;
                    }
                    else if (data==58)
                    {
                        PORTC |= (1<<PC5);
     af6:	00 00       	nop
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     af8:	a4 0c       	add	r10, r4
     afa:	00 00       	nop
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     afc:	24 00       	.word	0x0024	; ????
     afe:	7c 01       	movw	r14, r24
     b00:	10 06       	cpc	r1, r16
     b02:	00 00       	nop
     b04:	bb 0c       	add	r11, r11
     b06:	00 00       	nop
     b08:	40 00       	.word	0x0040	; ????
     b0a:	7c 01       	movw	r14, r24
     b0c:	18 00       	.word	0x0018	; ????
     b0e:	00 00       	nop
     b10:	00 00       	nop
     b12:	00 00       	nop
     b14:	2e 00       	.word	0x002e	; ????
     b16:	00 00       	nop
     b18:	10 06       	cpc	r1, r16
     b1a:	00 00       	nop
     b1c:	00 00       	nop
     b1e:	00 00       	nop
     b20:	44 00       	.word	0x0044	; ????
     b22:	7d 01       	movw	r14, r26
	...
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
        step = update;
     b2c:	44 00       	.word	0x0044	; ????
     b2e:	7e 01       	movw	r14, r28
	...
     b38:	44 00       	.word	0x0044	; ????
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     b3a:	7f 01       	movw	r14, r30
     b3c:	32 00       	.word	0x0032	; ????
     b3e:	00 00       	nop
     b40:	00 00       	nop
     b42:	00 00       	nop
     b44:	44 00       	.word	0x0044	; ????
     b46:	84 01       	movw	r16, r8
     b48:	44 00       	.word	0x0044	; ????
     b4a:	00 00       	nop
     b4c:	00 00       	nop
     b4e:	00 00       	nop
     b50:	44 00       	.word	0x0044	; ????
     b52:	82 01       	movw	r16, r4
     b54:	52 00       	.word	0x0052	; ????
     b56:	00 00       	nop
     b58:	00 00       	nop
     b5a:	00 00       	nop
     b5c:	44 00       	.word	0x0044	; ????
     b5e:	87 01       	movw	r16, r14
     b60:	58 00       	.word	0x0058	; ????
     b62:	00 00       	nop
    if (huidigePositie == 0)
     b64:	00 00       	nop
     b66:	00 00       	nop
        PORTB &= ~(1<<PB0);
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
     b68:	44 00       	.word	0x0044	; ????
        step = -update;
     b6a:	89 01       	movw	r16, r18
     b6c:	5c 00       	.word	0x005c	; ????
     b6e:	00 00       	nop
     b70:	00 00       	nop
     b72:	00 00       	nop
     b74:	44 00       	.word	0x0044	; ????
     b76:	8a 01       	movw	r16, r20
     b78:	5e 00       	.word	0x005e	; ????
     b7a:	00 00       	nop
     b7c:	00 00       	nop
     b7e:	00 00       	nop
     b80:	44 00       	.word	0x0044	; ????
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     b82:	8e 01       	movw	r16, r28
     b84:	68 00       	.word	0x0068	; ????
     b86:	00 00       	nop
     b88:	00 00       	nop
     b8a:	00 00       	nop
     b8c:	44 00       	.word	0x0044	; ????
     b8e:	8f 01       	movw	r16, r30
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     b90:	6a 00       	.word	0x006a	; ????
     b92:	00 00       	nop
     b94:	00 00       	nop
     b96:	00 00       	nop
     b98:	24 00       	.word	0x0024	; ????
     b9a:	00 00       	nop
     b9c:	7a 00       	.word	0x007a	; ????
     b9e:	00 00       	nop
     ba0:	00 00       	nop
     ba2:	00 00       	nop
     ba4:	4e 00       	.word	0x004e	; ????
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     ba6:	00 00       	nop
     ba8:	8a 06       	cpc	r8, r26
     baa:	00 00       	nop
     bac:	c9 0c       	add	r12, r9
     bae:	00 00       	nop
     bb0:	24 00       	.word	0x0024	; ????
     bb2:	93 01       	movw	r18, r6
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     bb4:	8a 06       	cpc	r8, r26
     bb6:	00 00       	nop
     bb8:	e1 0c       	add	r14, r1
     bba:	00 00       	nop
                    {
                        updatePosition(-4);
                    }
                    else if (data==54)
                    {
                        updatePosition(8);
     bbc:	40 00       	.word	0x0040	; ????
     bbe:	93 01       	movw	r18, r6
     bc0:	18 00       	.word	0x0018	; ????
                    {
                        updatePosition(4);
                    }
                    else if (data==53)
                    {
                        updatePosition(-4);
     bc2:	00 00       	nop
     bc4:	00 00       	nop
     bc6:	00 00       	nop
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
                    {
                        step = 1; // correct status
     bc8:	2e 00       	.word	0x002e	; ????
     bca:	00 00       	nop
     bcc:	8a 06       	cpc	r8, r26
     bce:	00 00       	nop
                        if ((PINC & (1<<PC2)) == 0)
     bd0:	00 00       	nop
     bd2:	00 00       	nop
                        {
                            // we zijn al thuis dus rij even weg
                            PORTB &= ~(1<<PB0); // voorwaarts
     bd4:	44 00       	.word	0x0044	; ????
                            step = stepTabel[1][0];
     bd6:	94 01       	movw	r18, r8
	...
     be0:	44 00       	.word	0x0044	; ????
     be2:	95 01       	movw	r18, r10
	...
                            homingReverse = true;
                        }
                        doHoming = true;
     bec:	44 00       	.word	0x0044	; ????
     bee:	9b 01       	movw	r18, r22
                    {
                        updatePosition(32);
                    }
                    else if (data==59)
                    {
                        updatePosition(-32);
     bf0:	04 00       	.word	0x0004	; ????
     bf2:	00 00       	nop
     bf4:	00 00       	nop
                    // eind updates in de stap tabel
                    // 60 home
                    // 62 write eeprom staptabel
                    // 63 get bitfiled status bit 0 = TURNING  bit 1 = middenDetected  bit 2 = needsHoming

                    else if (data==48)
     bf6:	00 00       	nop
     bf8:	44 00       	.word	0x0044	; ????
     bfa:	97 01       	movw	r18, r14
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     bfc:	08 00       	.word	0x0008	; ????
     bfe:	00 00       	nop
     c00:	00 00       	nop
     c02:	00 00       	nop
     c04:	44 00       	.word	0x0044	; ????
     c06:	98 01       	movw	r18, r16
     c08:	0a 00       	.word	0x000a	; ????
     c0a:	00 00       	nop
     c0c:	00 00       	nop
     c0e:	00 00       	nop
     c10:	24 00       	.word	0x0024	; ????
     c12:	00 00       	nop
     c14:	10 00       	.word	0x0010	; ????
     c16:	00 00       	nop
     c18:	00 00       	nop
     c1a:	00 00       	nop
     c1c:	4e 00       	.word	0x004e	; ????
     c1e:	00 00       	nop
     c20:	9a 06       	cpc	r9, r26
     c22:	00 00       	nop
     c24:	f6 0c       	add	r15, r6
    if (huidigePositie == 0)
     c26:	00 00       	nop
     c28:	24 00       	.word	0x0024	; ????
     c2a:	9e 01       	movw	r18, r28
     c2c:	9a 06       	cpc	r9, r26
     c2e:	00 00       	nop
     c30:	00 00       	nop
     c32:	00 00       	nop
     c34:	2e 00       	.word	0x002e	; ????
     c36:	00 00       	nop
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     c38:	9a 06       	cpc	r9, r26
     c3a:	00 00       	nop
     c3c:	00 00       	nop
     c3e:	00 00       	nop
     c40:	44 00       	.word	0x0044	; ????
     c42:	9f 01       	movw	r18, r30
	...
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
     c4c:	44 00       	.word	0x0044	; ????
        step = update;
     c4e:	a1 01       	movw	r20, r2
     c50:	24 00       	.word	0x0024	; ????
     c52:	00 00       	nop
     c54:	00 00       	nop
     c56:	00 00       	nop
                        doHoming = true;
                    }
                    else if (data==62)
                    {
                        // dit duurt telang zodat het antwoord niet optijd is.
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     c58:	44 00       	.word	0x0044	; ????
     c5a:	a2 01       	movw	r20, r4
     c5c:	28 00       	.word	0x0028	; ????
     c5e:	00 00       	nop
     c60:	00 00       	nop
     c62:	00 00       	nop
     c64:	44 00       	.word	0x0044	; ????
     c66:	ab 01       	movw	r20, r22
     c68:	2a 00       	.word	0x002a	; ????
     c6a:	00 00       	nop
     c6c:	00 00       	nop
     c6e:	00 00       	nop
     c70:	44 00       	.word	0x0044	; ????
     c72:	ad 01       	movw	r20, r26
     c74:	2e 00       	.word	0x002e	; ????
     c76:	00 00       	nop
     c78:	00 00       	nop
                        // grofweg 800 ms duren
                        // daarna is alle communicatie verloren dus wachten tot de watch dog een reset door voerd.
                        // Houd de watchdog in leven zolang we in de loop zitten.
                        for (uint8_t i=0;i<48;i++)
                        {
                            eeprom_write_word((uint16_t*)&stepTabelRom[i][0], (uint16_t)stepTabel[i][0]);
     c7a:	00 00       	nop
     c7c:	44 00       	.word	0x0044	; ????
     c7e:	ae 01       	movw	r20, r28
     c80:	32 00       	.word	0x0032	; ????
     c82:	00 00       	nop
                            wdt_reset();
     c84:	00 00       	nop
                            eeprom_write_word((uint16_t*)&stepTabelRom[i][1], (uint16_t)stepTabel[i][1]);
     c86:	00 00       	nop
     c88:	44 00       	.word	0x0044	; ????
     c8a:	b8 01       	movw	r22, r16
     c8c:	36 00       	.word	0x0036	; ????
     c8e:	00 00       	nop
     c90:	00 00       	nop
                            wdt_reset();
     c92:	00 00       	nop
     c94:	44 00       	.word	0x0044	; ????
     c96:	bd 01       	movw	r22, r26
     c98:	52 00       	.word	0x0052	; ????
     c9a:	00 00       	nop
     c9c:	00 00       	nop
                        // houd de interrupt disabled want deze loop kan lang duren.
                        // het duurd 8.5ms per byte voor een write dus totaal voor de gehele table kan het dus
                        // grofweg 800 ms duren
                        // daarna is alle communicatie verloren dus wachten tot de watch dog een reset door voerd.
                        // Houd de watchdog in leven zolang we in de loop zitten.
                        for (uint8_t i=0;i<48;i++)
     c9e:	00 00       	nop
     ca0:	44 00       	.word	0x0044	; ????
     ca2:	be 01       	movw	r22, r28
        }


    }
    while(1);
}
     ca4:	5c 00       	.word	0x005c	; ????
     ca6:	00 00       	nop
     ca8:	00 00       	nop
     caa:	00 00       	nop
     cac:	44 00       	.word	0x0044	; ????
     cae:	bb 01       	movw	r22, r22
     cb0:	70 00       	.word	0x0070	; ????
     cb2:	00 00       	nop
     cb4:	00 00       	nop
     cb6:	00 00       	nop
     cb8:	44 00       	.word	0x0044	; ????
     cba:	c4 01       	movw	r24, r8
     cbc:	78 00       	.word	0x0078	; ????
     cbe:	00 00       	nop
     cc0:	00 00       	nop
     cc2:	00 00       	nop
     cc4:	44 00       	.word	0x0044	; ????
     cc6:	ce 01       	movw	r24, r28
     cc8:	7c 00       	.word	0x007c	; ????
                    {
                        updatePosition(-16);
                    }
                    else if (data==58)
                    {
                        updatePosition(32);
     cca:	00 00       	nop
     ccc:	00 00       	nop
     cce:	00 00       	nop
                    {
                        updatePosition(-8);
                    }
                    else if (data==56)
                    {
                        updatePosition(16);
     cd0:	44 00       	.word	0x0044	; ????
     cd2:	d4 01       	movw	r26, r8
     cd4:	80 00       	.word	0x0080	; ????
                    {
                        updatePosition(8);
                    }
                    else if (data==55)
                    {
                        updatePosition(-8);
     cd6:	00 00       	nop
     cd8:	00 00       	nop
     cda:	00 00       	nop
                    {
                        updatePosition(16);
                    }
                    else if (data==57)
                    {
                        updatePosition(-16);
     cdc:	44 00       	.word	0x0044	; ????
     cde:	d5 01       	movw	r26, r10
     ce0:	84 00       	.word	0x0084	; ????
     ce2:	00 00       	nop
     ce4:	00 00       	nop
     ce6:	00 00       	nop
     ce8:	44 00       	.word	0x0044	; ????
     cea:	d6 01       	movw	r26, r12
     cec:	8a 00       	.word	0x008a	; ????
     cee:	00 00       	nop
     cf0:	03 0d       	add	r16, r3
     cf2:	00 00       	nop
     cf4:	84 00       	.word	0x0084	; ????
     cf6:	00 00       	nop
     cf8:	2e 07       	cpc	r18, r30
     cfa:	00 00       	nop
     cfc:	00 00       	nop
     cfe:	00 00       	nop
     d00:	44 00       	.word	0x0044	; ????
     d02:	98 01       	movw	r18, r16
     d04:	94 00       	.word	0x0094	; ????
     d06:	00 00       	nop
     d08:	01 00       	.word	0x0001	; ????
     d0a:	00 00       	nop
     d0c:	84 00       	.word	0x0084	; ????
     d0e:	00 00       	nop
     d10:	3e 07       	cpc	r19, r30
     d12:	00 00       	nop
     d14:	00 00       	nop
     d16:	00 00       	nop
     d18:	44 00       	.word	0x0044	; ????
     d1a:	d8 01       	movw	r26, r16
     d1c:	a4 00       	.word	0x00a4	; ????
     d1e:	00 00       	nop
     d20:	00 00       	nop
     d22:	00 00       	nop
     d24:	44 00       	.word	0x0044	; ????
     d26:	97 01       	movw	r18, r14
     d28:	a6 00       	.word	0x00a6	; ????
     d2a:	00 00       	nop
     d2c:	00 00       	nop
     d2e:	00 00       	nop
     d30:	44 00       	.word	0x0044	; ????
     d32:	98 01       	movw	r18, r16
     d34:	a8 00       	.word	0x00a8	; ????
     d36:	00 00       	nop
     d38:	00 00       	nop
     d3a:	00 00       	nop
     d3c:	44 00       	.word	0x0044	; ????
     d3e:	d2 02       	muls	r29, r18
     d40:	b0 00       	.word	0x00b0	; ????
     d42:	00 00       	nop
     d44:	00 00       	nop
     d46:	00 00       	nop
     d48:	44 00       	.word	0x0044	; ????
     d4a:	ae 02       	muls	r26, r30
     d4c:	b2 00       	.word	0x00b2	; ????
     d4e:	00 00       	nop
     d50:	00 00       	nop
     d52:	00 00       	nop
     d54:	44 00       	.word	0x0044	; ????
     d56:	8f 01       	movw	r16, r30
     d58:	b8 00       	.word	0x00b8	; ????
     d5a:	00 00       	nop
     d5c:	00 00       	nop
     d5e:	00 00       	nop
     d60:	44 00       	.word	0x0044	; ????
     d62:	17 02       	muls	r17, r23
     d64:	be 00       	.word	0x00be	; ????
     d66:	00 00       	nop
     d68:	00 00       	nop
     d6a:	00 00       	nop
     d6c:	44 00       	.word	0x0044	; ????
     d6e:	dd 01       	movw	r26, r26
     d70:	ca 00       	.word	0x00ca	; ????
     d72:	00 00       	nop
     d74:	00 00       	nop
     d76:	00 00       	nop
     d78:	44 00       	.word	0x0044	; ????
     d7a:	de 01       	movw	r26, r28
     d7c:	d2 00       	.word	0x00d2	; ????
     d7e:	00 00       	nop
     d80:	00 00       	nop
     d82:	00 00       	nop
     d84:	44 00       	.word	0x0044	; ????
     d86:	e0 01       	movw	r28, r0
     d88:	d6 00       	.word	0x00d6	; ????
     d8a:	00 00       	nop
     d8c:	00 00       	nop
     d8e:	00 00       	nop
     d90:	44 00       	.word	0x0044	; ????
     d92:	e1 01       	movw	r28, r2
     d94:	d8 00       	.word	0x00d8	; ????
     d96:	00 00       	nop
     d98:	00 00       	nop
     d9a:	00 00       	nop
     d9c:	44 00       	.word	0x0044	; ????
     d9e:	e4 01       	movw	r28, r8
     da0:	de 00       	.word	0x00de	; ????
     da2:	00 00       	nop
     da4:	00 00       	nop
     da6:	00 00       	nop
     da8:	44 00       	.word	0x0044	; ????
     daa:	e4 01       	movw	r28, r8
     dac:	e6 00       	.word	0x00e6	; ????
     dae:	00 00       	nop
     db0:	00 00       	nop
     db2:	00 00       	nop
     db4:	44 00       	.word	0x0044	; ????
     db6:	e7 01       	movw	r28, r14
     db8:	ee 00       	.word	0x00ee	; ????
     dba:	00 00       	nop
     dbc:	00 00       	nop
     dbe:	00 00       	nop
     dc0:	44 00       	.word	0x0044	; ????
     dc2:	e8 01       	movw	r28, r16
     dc4:	f4 00       	.word	0x00f4	; ????
     dc6:	00 00       	nop
     dc8:	00 00       	nop
     dca:	00 00       	nop
     dcc:	44 00       	.word	0x0044	; ????
     dce:	e9 01       	movw	r28, r18
     dd0:	f8 00       	.word	0x00f8	; ????
     dd2:	00 00       	nop
     dd4:	00 00       	nop
     dd6:	00 00       	nop
     dd8:	44 00       	.word	0x0044	; ????
     dda:	ea 01       	movw	r28, r20
     ddc:	00 01       	movw	r0, r0
     dde:	00 00       	nop
     de0:	00 00       	nop
     de2:	00 00       	nop
     de4:	44 00       	.word	0x0044	; ????
     de6:	eb 01       	movw	r28, r22
     de8:	04 01       	movw	r0, r8
     dea:	00 00       	nop
     dec:	00 00       	nop
     dee:	00 00       	nop
     df0:	44 00       	.word	0x0044	; ????
     df2:	ed 01       	movw	r28, r26
     df4:	10 01       	movw	r2, r0
     df6:	00 00       	nop
     df8:	00 00       	nop
     dfa:	00 00       	nop
     dfc:	44 00       	.word	0x0044	; ????
     dfe:	ee 01       	movw	r28, r28
     e00:	1a 01       	movw	r2, r20
     e02:	00 00       	nop
     e04:	00 00       	nop
     e06:	00 00       	nop
     e08:	44 00       	.word	0x0044	; ????
     e0a:	b8 01       	movw	r22, r16
     e0c:	1e 01       	movw	r2, r28
     e0e:	00 00       	nop
     e10:	00 00       	nop
     e12:	00 00       	nop
     e14:	44 00       	.word	0x0044	; ????
     e16:	f3 01       	movw	r30, r6
     e18:	20 01       	movw	r4, r0
     e1a:	00 00       	nop
     e1c:	00 00       	nop
     e1e:	00 00       	nop
     e20:	44 00       	.word	0x0044	; ????
     e22:	9b 01       	movw	r18, r22
     e24:	24 01       	movw	r4, r8
     e26:	00 00       	nop
     e28:	00 00       	nop
     e2a:	00 00       	nop
     e2c:	44 00       	.word	0x0044	; ????
     e2e:	f8 01       	movw	r30, r16
     e30:	2c 01       	movw	r4, r24
     e32:	00 00       	nop
     e34:	00 00       	nop
     e36:	00 00       	nop
     e38:	44 00       	.word	0x0044	; ????
     e3a:	f9 01       	movw	r30, r18
     e3c:	3a 01       	movw	r6, r20
     e3e:	00 00       	nop
     e40:	00 00       	nop
     e42:	00 00       	nop
     e44:	44 00       	.word	0x0044	; ????
     e46:	fb 01       	movw	r30, r22
     e48:	42 01       	movw	r8, r4
     e4a:	00 00       	nop
     e4c:	00 00       	nop
     e4e:	00 00       	nop
     e50:	44 00       	.word	0x0044	; ????
     e52:	fc 01       	movw	r30, r24
     e54:	48 01       	movw	r8, r16
     e56:	00 00       	nop
     e58:	00 00       	nop
     e5a:	00 00       	nop
     e5c:	44 00       	.word	0x0044	; ????
     e5e:	fd 01       	movw	r30, r26
     e60:	4a 01       	movw	r8, r20
     e62:	00 00       	nop
     e64:	00 00       	nop
     e66:	00 00       	nop
     e68:	44 00       	.word	0x0044	; ????
     e6a:	28 02       	muls	r18, r24
     e6c:	50 01       	movw	r10, r0
     e6e:	00 00       	nop
     e70:	00 00       	nop
     e72:	00 00       	nop
     e74:	44 00       	.word	0x0044	; ????
     e76:	4c 02       	muls	r20, r28
     e78:	5e 01       	movw	r10, r28
     e7a:	00 00       	nop
     e7c:	00 00       	nop
     e7e:	00 00       	nop
     e80:	44 00       	.word	0x0044	; ????
     e82:	4c 02       	muls	r20, r28
     e84:	6c 01       	movw	r12, r24
     e86:	00 00       	nop
     e88:	00 00       	nop
     e8a:	00 00       	nop
     e8c:	44 00       	.word	0x0044	; ????
     e8e:	d6 02       	muls	r29, r22
     e90:	72 01       	movw	r14, r4
     e92:	00 00       	nop
     e94:	00 00       	nop
     e96:	00 00       	nop
     e98:	44 00       	.word	0x0044	; ????
     e9a:	00 02       	muls	r16, r16
     e9c:	7a 01       	movw	r14, r20
     e9e:	00 00       	nop
     ea0:	00 00       	nop
     ea2:	00 00       	nop
     ea4:	44 00       	.word	0x0044	; ????
     ea6:	06 02       	muls	r16, r22
     ea8:	80 01       	movw	r16, r0
     eaa:	00 00       	nop
     eac:	00 00       	nop
     eae:	00 00       	nop
     eb0:	44 00       	.word	0x0044	; ????
     eb2:	0c 02       	muls	r16, r28
     eb4:	86 01       	movw	r16, r12
     eb6:	00 00       	nop
     eb8:	00 00       	nop
     eba:	00 00       	nop
     ebc:	44 00       	.word	0x0044	; ????
     ebe:	0f 02       	muls	r16, r31
     ec0:	8c 01       	movw	r16, r24
     ec2:	00 00       	nop
     ec4:	00 00       	nop
     ec6:	00 00       	nop
     ec8:	44 00       	.word	0x0044	; ????
     eca:	0f 02       	muls	r16, r31
     ecc:	94 01       	movw	r18, r8
     ece:	00 00       	nop
     ed0:	00 00       	nop
     ed2:	00 00       	nop
     ed4:	44 00       	.word	0x0044	; ????
     ed6:	d2 02       	muls	r29, r18
     ed8:	9e 01       	movw	r18, r28
     eda:	00 00       	nop
     edc:	00 00       	nop
     ede:	00 00       	nop
     ee0:	44 00       	.word	0x0044	; ????
     ee2:	97 01       	movw	r18, r14
     ee4:	a2 01       	movw	r20, r4
     ee6:	00 00       	nop
     ee8:	00 00       	nop
     eea:	00 00       	nop
     eec:	44 00       	.word	0x0044	; ????
     eee:	98 01       	movw	r18, r16
     ef0:	a4 01       	movw	r20, r8
     ef2:	00 00       	nop
     ef4:	00 00       	nop
     ef6:	00 00       	nop
     ef8:	44 00       	.word	0x0044	; ????
     efa:	52 02       	muls	r21, r18
     efc:	a8 01       	movw	r20, r16
     efe:	00 00       	nop
     f00:	00 00       	nop
     f02:	00 00       	nop
     f04:	44 00       	.word	0x0044	; ????
     f06:	80 02       	muls	r24, r16
     f08:	ae 01       	movw	r20, r28
     f0a:	00 00       	nop
     f0c:	00 00       	nop
     f0e:	00 00       	nop
     f10:	44 00       	.word	0x0044	; ????
     f12:	84 02       	muls	r24, r20
     f14:	b4 01       	movw	r22, r8
     f16:	00 00       	nop
     f18:	00 00       	nop
     f1a:	00 00       	nop
     f1c:	44 00       	.word	0x0044	; ????
     f1e:	88 02       	muls	r24, r24
     f20:	ba 01       	movw	r22, r20
     f22:	00 00       	nop
     f24:	00 00       	nop
     f26:	00 00       	nop
     f28:	44 00       	.word	0x0044	; ????
     f2a:	8c 02       	muls	r24, r28
     f2c:	c0 01       	movw	r24, r0
     f2e:	00 00       	nop
     f30:	00 00       	nop
     f32:	00 00       	nop
     f34:	44 00       	.word	0x0044	; ????
     f36:	90 02       	muls	r25, r16
     f38:	c6 01       	movw	r24, r12
     f3a:	00 00       	nop
     f3c:	00 00       	nop
     f3e:	00 00       	nop
     f40:	44 00       	.word	0x0044	; ????
     f42:	94 02       	muls	r25, r20
     f44:	cc 01       	movw	r24, r24
     f46:	00 00       	nop
     f48:	00 00       	nop
     f4a:	00 00       	nop
     f4c:	44 00       	.word	0x0044	; ????
     f4e:	98 02       	muls	r25, r24
     f50:	d2 01       	movw	r26, r4
     f52:	00 00       	nop
     f54:	00 00       	nop
     f56:	00 00       	nop
     f58:	44 00       	.word	0x0044	; ????
     f5a:	9c 02       	muls	r25, r28
     f5c:	d8 01       	movw	r26, r16
     f5e:	00 00       	nop
     f60:	00 00       	nop
     f62:	00 00       	nop
     f64:	44 00       	.word	0x0044	; ????
     f66:	a0 02       	muls	r26, r16
     f68:	de 01       	movw	r26, r28
     f6a:	00 00       	nop
     f6c:	00 00       	nop
     f6e:	00 00       	nop
     f70:	44 00       	.word	0x0044	; ????
     f72:	a4 02       	muls	r26, r20
     f74:	e4 01       	movw	r28, r8
     f76:	00 00       	nop
     f78:	00 00       	nop
     f7a:	00 00       	nop
     f7c:	44 00       	.word	0x0044	; ????
     f7e:	a8 02       	muls	r26, r24
     f80:	ea 01       	movw	r28, r20
     f82:	00 00       	nop
     f84:	00 00       	nop
     f86:	00 00       	nop
     f88:	44 00       	.word	0x0044	; ????
     f8a:	ac 02       	muls	r26, r28
     f8c:	f0 01       	movw	r30, r0
     f8e:	00 00       	nop
     f90:	00 00       	nop
     f92:	00 00       	nop
     f94:	44 00       	.word	0x0044	; ????
     f96:	b8 02       	muls	r27, r24
     f98:	f6 01       	movw	r30, r12
     f9a:	00 00       	nop
     f9c:	00 00       	nop
     f9e:	00 00       	nop
     fa0:	44 00       	.word	0x0044	; ????
     fa2:	d2 02       	muls	r29, r18
     fa4:	fc 01       	movw	r30, r24
     fa6:	00 00       	nop
     fa8:	00 00       	nop
     faa:	00 00       	nop
     fac:	44 00       	.word	0x0044	; ????
     fae:	2a 02       	muls	r18, r26
     fb0:	20 02       	muls	r18, r16
     fb2:	00 00       	nop
     fb4:	00 00       	nop
     fb6:	00 00       	nop
     fb8:	44 00       	.word	0x0044	; ????
     fba:	2e 02       	muls	r18, r30
     fbc:	26 02       	muls	r18, r22
     fbe:	00 00       	nop
     fc0:	00 00       	nop
     fc2:	00 00       	nop
     fc4:	44 00       	.word	0x0044	; ????
     fc6:	32 02       	muls	r19, r18
     fc8:	2c 02       	muls	r18, r28
     fca:	00 00       	nop
     fcc:	00 00       	nop
     fce:	00 00       	nop
     fd0:	44 00       	.word	0x0044	; ????
     fd2:	36 02       	muls	r19, r22
     fd4:	32 02       	muls	r19, r18
     fd6:	00 00       	nop
     fd8:	00 00       	nop
     fda:	00 00       	nop
     fdc:	44 00       	.word	0x0044	; ????
     fde:	3b 02       	muls	r19, r27
     fe0:	38 02       	muls	r19, r24
     fe2:	00 00       	nop
     fe4:	00 00       	nop
     fe6:	00 00       	nop
     fe8:	44 00       	.word	0x0044	; ????
     fea:	3f 02       	muls	r19, r31
     fec:	3e 02       	muls	r19, r30
     fee:	00 00       	nop
     ff0:	00 00       	nop
     ff2:	00 00       	nop
     ff4:	44 00       	.word	0x0044	; ????
     ff6:	47 02       	muls	r20, r23
     ff8:	44 02       	muls	r20, r20
     ffa:	00 00       	nop
     ffc:	00 00       	nop
     ffe:	00 00       	nop
    1000:	44 00       	.word	0x0044	; ????
    1002:	4a 02       	muls	r20, r26
    1004:	54 02       	muls	r21, r20
    1006:	00 00       	nop
    1008:	00 00       	nop
    100a:	00 00       	nop
    100c:	44 00       	.word	0x0044	; ????
    100e:	54 02       	muls	r21, r20
    1010:	58 02       	muls	r21, r24
    1012:	00 00       	nop
    1014:	00 00       	nop
    1016:	00 00       	nop
    1018:	44 00       	.word	0x0044	; ????
    101a:	57 02       	muls	r21, r23
    101c:	5c 02       	muls	r21, r28
    101e:	00 00       	nop
    1020:	00 00       	nop
    1022:	00 00       	nop
    1024:	44 00       	.word	0x0044	; ????
    1026:	59 02       	muls	r21, r25
    1028:	62 02       	muls	r22, r18
    102a:	00 00       	nop
    102c:	00 00       	nop
    102e:	00 00       	nop
    1030:	44 00       	.word	0x0044	; ????
    1032:	4e 02       	muls	r20, r30
    1034:	6a 02       	muls	r22, r26
    1036:	00 00       	nop
    1038:	00 00       	nop
    103a:	00 00       	nop
    103c:	44 00       	.word	0x0044	; ????
    103e:	5e 02       	muls	r21, r30
    1040:	74 02       	muls	r23, r20
    1042:	00 00       	nop
    1044:	00 00       	nop
    1046:	00 00       	nop
    1048:	44 00       	.word	0x0044	; ????
    104a:	5f 02       	muls	r21, r31
    104c:	8c 02       	muls	r24, r28
    104e:	00 00       	nop
    1050:	00 00       	nop
    1052:	00 00       	nop
    1054:	44 00       	.word	0x0044	; ????
    1056:	60 02       	muls	r22, r16
    1058:	a8 02       	muls	r26, r24
    105a:	00 00       	nop
    105c:	00 00       	nop
    105e:	00 00       	nop
    1060:	44 00       	.word	0x0044	; ????
    1062:	62 02       	muls	r22, r18
    1064:	ae 02       	muls	r26, r30
    1066:	00 00       	nop
    1068:	00 00       	nop
    106a:	00 00       	nop
    106c:	44 00       	.word	0x0044	; ????
    106e:	63 02       	muls	r22, r19
    1070:	b0 02       	muls	r27, r16
    1072:	00 00       	nop
    1074:	00 00       	nop
    1076:	00 00       	nop
    1078:	44 00       	.word	0x0044	; ????
    107a:	6b 02       	muls	r22, r27
    107c:	bc 02       	muls	r27, r28
    107e:	00 00       	nop
    1080:	00 00       	nop
    1082:	00 00       	nop
    1084:	44 00       	.word	0x0044	; ????
    1086:	6c 02       	muls	r22, r28
    1088:	c0 02       	muls	r28, r16
    108a:	00 00       	nop
    108c:	00 00       	nop
    108e:	00 00       	nop
    1090:	44 00       	.word	0x0044	; ????
    1092:	02 02       	muls	r16, r18
    1094:	c6 02       	muls	r28, r22
    1096:	00 00       	nop
    1098:	00 00       	nop
    109a:	00 00       	nop
    109c:	44 00       	.word	0x0044	; ????
    109e:	03 02       	muls	r16, r19
    10a0:	d0 02       	muls	r29, r16
    10a2:	00 00       	nop
    10a4:	00 00       	nop
    10a6:	00 00       	nop
    10a8:	44 00       	.word	0x0044	; ????
    10aa:	04 02       	muls	r16, r20
    10ac:	da 02       	muls	r29, r26
    10ae:	00 00       	nop
    10b0:	00 00       	nop
    10b2:	00 00       	nop
    10b4:	44 00       	.word	0x0044	; ????
    10b6:	11 02       	muls	r17, r17
    10b8:	e4 02       	muls	r30, r20
    10ba:	00 00       	nop
    10bc:	00 00       	nop
    10be:	00 00       	nop
    10c0:	44 00       	.word	0x0044	; ????
    10c2:	14 02       	muls	r17, r20
    10c4:	e8 02       	muls	r30, r24
    10c6:	00 00       	nop
    10c8:	00 00       	nop
    10ca:	00 00       	nop
    10cc:	44 00       	.word	0x0044	; ????
    10ce:	15 02       	muls	r17, r21
    10d0:	f2 02       	muls	r31, r18
    10d2:	00 00       	nop
    10d4:	00 00       	nop
    10d6:	00 00       	nop
    10d8:	44 00       	.word	0x0044	; ????
    10da:	17 02       	muls	r17, r23
    10dc:	fc 02       	muls	r31, r28
    10de:	00 00       	nop
    10e0:	00 00       	nop
    10e2:	00 00       	nop
    10e4:	44 00       	.word	0x0044	; ????
    10e6:	17 02       	muls	r17, r23
    10e8:	08 03       	fmul	r16, r16
    10ea:	00 00       	nop
    10ec:	00 00       	nop
    10ee:	00 00       	nop
    10f0:	44 00       	.word	0x0044	; ????
    10f2:	08 02       	muls	r16, r24
    10f4:	12 03       	mulsu	r17, r18
    10f6:	00 00       	nop
    10f8:	00 00       	nop
    10fa:	00 00       	nop
    10fc:	44 00       	.word	0x0044	; ????
    10fe:	09 02       	muls	r16, r25
    1100:	1c 03       	fmul	r17, r20
    1102:	00 00       	nop
    1104:	00 00       	nop
    1106:	00 00       	nop
    1108:	44 00       	.word	0x0044	; ????
    110a:	0a 02       	muls	r16, r26
    110c:	26 03       	mulsu	r18, r22
    110e:	00 00       	nop
    1110:	00 00       	nop
    1112:	00 00       	nop
    1114:	44 00       	.word	0x0044	; ????
    1116:	68 02       	muls	r22, r24
    1118:	30 03       	mulsu	r19, r16
    111a:	00 00       	nop
    111c:	00 00       	nop
    111e:	00 00       	nop
    1120:	44 00       	.word	0x0044	; ????
    1122:	69 02       	muls	r22, r25
    1124:	32 03       	mulsu	r19, r18
    1126:	00 00       	nop
    1128:	00 00       	nop
    112a:	00 00       	nop
    112c:	44 00       	.word	0x0044	; ????
    112e:	2c 02       	muls	r18, r28
    1130:	40 03       	mulsu	r20, r16
    1132:	00 00       	nop
    1134:	00 00       	nop
    1136:	00 00       	nop
    1138:	44 00       	.word	0x0044	; ????
    113a:	4a 02       	muls	r20, r26
    113c:	42 03       	mulsu	r20, r18
    113e:	00 00       	nop
    1140:	00 00       	nop
    1142:	00 00       	nop
    1144:	44 00       	.word	0x0044	; ????
    1146:	1e 02       	muls	r17, r30
    1148:	46 03       	mulsu	r20, r22
    114a:	00 00       	nop
    114c:	00 00       	nop
    114e:	00 00       	nop
    1150:	44 00       	.word	0x0044	; ????
    1152:	1e 02       	muls	r17, r30
    1154:	4e 03       	fmul	r20, r22
    1156:	00 00       	nop
    1158:	00 00       	nop
    115a:	00 00       	nop
    115c:	44 00       	.word	0x0044	; ????
    115e:	1e 02       	muls	r17, r30
    1160:	58 03       	fmul	r21, r16
    1162:	00 00       	nop
    1164:	00 00       	nop
    1166:	00 00       	nop
    1168:	44 00       	.word	0x0044	; ????
    116a:	1f 02       	muls	r17, r31
    116c:	5a 03       	fmul	r21, r18
    116e:	00 00       	nop
    1170:	00 00       	nop
    1172:	00 00       	nop
    1174:	44 00       	.word	0x0044	; ????
    1176:	22 02       	muls	r18, r18
    1178:	62 03       	mulsu	r22, r18
    117a:	00 00       	nop
    117c:	00 00       	nop
    117e:	00 00       	nop
    1180:	44 00       	.word	0x0044	; ????
    1182:	0f 02       	muls	r16, r31
    1184:	70 03       	mulsu	r23, r16
    1186:	00 00       	nop
    1188:	00 00       	nop
    118a:	00 00       	nop
    118c:	44 00       	.word	0x0044	; ????
    118e:	d2 02       	muls	r29, r18
    1190:	72 03       	mulsu	r23, r18
    1192:	00 00       	nop
    1194:	00 00       	nop
    1196:	00 00       	nop
    1198:	44 00       	.word	0x0044	; ????
    119a:	34 02       	muls	r19, r20
    119c:	76 03       	mulsu	r23, r22
    119e:	00 00       	nop
    11a0:	00 00       	nop
    11a2:	00 00       	nop
    11a4:	44 00       	.word	0x0044	; ????
    11a6:	4a 02       	muls	r20, r26
    11a8:	7a 03       	fmul	r23, r18
    11aa:	00 00       	nop
    11ac:	00 00       	nop
    11ae:	00 00       	nop
    11b0:	44 00       	.word	0x0044	; ????
    11b2:	30 02       	muls	r19, r16
    11b4:	7e 03       	fmul	r23, r22
    11b6:	00 00       	nop
    11b8:	00 00       	nop
    11ba:	00 00       	nop
    11bc:	44 00       	.word	0x0044	; ????
    11be:	4a 02       	muls	r20, r26
    11c0:	80 03       	fmuls	r16, r16
    11c2:	00 00       	nop
    11c4:	00 00       	nop
    11c6:	00 00       	nop
    11c8:	44 00       	.word	0x0044	; ????
    11ca:	1e 02       	muls	r17, r30
    11cc:	84 03       	fmuls	r16, r20
    11ce:	00 00       	nop
    11d0:	00 00       	nop
    11d2:	00 00       	nop
    11d4:	44 00       	.word	0x0044	; ????
    11d6:	7e 01       	movw	r14, r28
    11d8:	88 03       	fmulsu	r16, r16
    11da:	00 00       	nop
    11dc:	00 00       	nop
    11de:	00 00       	nop
    11e0:	44 00       	.word	0x0044	; ????
    11e2:	7f 01       	movw	r14, r30
    11e4:	b2 03       	fmuls	r19, r18
    11e6:	00 00       	nop
    11e8:	00 00       	nop
    11ea:	00 00       	nop
    11ec:	44 00       	.word	0x0044	; ????
    11ee:	89 01       	movw	r16, r18
    11f0:	b6 03       	fmuls	r19, r22
    11f2:	00 00       	nop
    11f4:	00 00       	nop
    11f6:	00 00       	nop
    11f8:	44 00       	.word	0x0044	; ????
    11fa:	8a 01       	movw	r16, r20
    11fc:	b8 03       	fmulsu	r19, r16
    11fe:	00 00       	nop
    1200:	00 00       	nop
    1202:	00 00       	nop
    1204:	44 00       	.word	0x0044	; ????
    1206:	7e 01       	movw	r14, r28
    1208:	c2 03       	fmuls	r20, r18
    120a:	00 00       	nop
    120c:	00 00       	nop
    120e:	00 00       	nop
    1210:	44 00       	.word	0x0044	; ????
    1212:	7f 01       	movw	r14, r30
    1214:	ec 03       	fmulsu	r22, r20
    1216:	00 00       	nop
    1218:	00 00       	nop
    121a:	00 00       	nop
    121c:	44 00       	.word	0x0044	; ????
    121e:	8e 01       	movw	r16, r28
    1220:	f0 03       	fmuls	r23, r16
    1222:	00 00       	nop
    1224:	00 00       	nop
    1226:	00 00       	nop
    1228:	44 00       	.word	0x0044	; ????
    122a:	8f 01       	movw	r16, r30
    122c:	f2 03       	fmuls	r23, r18
    122e:	00 00       	nop
    1230:	00 00       	nop
    1232:	00 00       	nop
    1234:	44 00       	.word	0x0044	; ????
    1236:	84 01       	movw	r16, r8
    1238:	0a 04       	cpc	r0, r10
    123a:	00 00       	nop
    123c:	00 00       	nop
    123e:	00 00       	nop
    1240:	44 00       	.word	0x0044	; ????
    1242:	82 01       	movw	r16, r4
    1244:	18 04       	cpc	r1, r8
    1246:	00 00       	nop
    1248:	00 00       	nop
    124a:	00 00       	nop
    124c:	44 00       	.word	0x0044	; ????
    124e:	84 01       	movw	r16, r8
    1250:	2e 04       	cpc	r2, r14
    1252:	00 00       	nop
    1254:	00 00       	nop
    1256:	00 00       	nop
    1258:	44 00       	.word	0x0044	; ????
    125a:	82 01       	movw	r16, r4
    125c:	3c 04       	cpc	r3, r12
    125e:	00 00       	nop
    1260:	00 00       	nop
    1262:	00 00       	nop
    1264:	44 00       	.word	0x0044	; ????
    1266:	17 02       	muls	r17, r23
    1268:	44 04       	cpc	r4, r4
    126a:	00 00       	nop
    126c:	00 00       	nop
    126e:	00 00       	nop
    1270:	44 00       	.word	0x0044	; ????
    1272:	38 02       	muls	r19, r24
    1274:	4a 04       	cpc	r4, r10
    1276:	00 00       	nop
    1278:	00 00       	nop
    127a:	00 00       	nop
    127c:	44 00       	.word	0x0044	; ????
    127e:	39 02       	muls	r19, r25
    1280:	4e 04       	cpc	r4, r14
    1282:	00 00       	nop
    1284:	00 00       	nop
    1286:	00 00       	nop
    1288:	44 00       	.word	0x0044	; ????
    128a:	4a 02       	muls	r20, r26
    128c:	52 04       	cpc	r5, r2
    128e:	00 00       	nop
    1290:	00 00       	nop
    1292:	00 00       	nop
    1294:	44 00       	.word	0x0044	; ????
    1296:	41 02       	muls	r20, r17
    1298:	56 04       	cpc	r5, r6
    129a:	00 00       	nop
    129c:	00 00       	nop
    129e:	00 00       	nop
    12a0:	44 00       	.word	0x0044	; ????
    12a2:	4a 02       	muls	r20, r26
    12a4:	58 04       	cpc	r5, r8
    12a6:	00 00       	nop
    12a8:	00 00       	nop
    12aa:	00 00       	nop
    12ac:	44 00       	.word	0x0044	; ????
    12ae:	3d 02       	muls	r19, r29
    12b0:	5c 04       	cpc	r5, r12
    12b2:	00 00       	nop
    12b4:	00 00       	nop
    12b6:	00 00       	nop
    12b8:	44 00       	.word	0x0044	; ????
    12ba:	4a 02       	muls	r20, r26
    12bc:	5e 04       	cpc	r5, r14
    12be:	00 00       	nop
    12c0:	00 00       	nop
    12c2:	00 00       	nop
    12c4:	44 00       	.word	0x0044	; ????
    12c6:	7e 01       	movw	r14, r28
    12c8:	62 04       	cpc	r6, r2
    12ca:	00 00       	nop
    12cc:	00 00       	nop
    12ce:	00 00       	nop
    12d0:	44 00       	.word	0x0044	; ????
    12d2:	7f 01       	movw	r14, r30
    12d4:	8c 04       	cpc	r8, r12
    12d6:	00 00       	nop
    12d8:	00 00       	nop
    12da:	00 00       	nop
    12dc:	44 00       	.word	0x0044	; ????
    12de:	89 01       	movw	r16, r18
    12e0:	90 04       	cpc	r9, r0
    12e2:	00 00       	nop
    12e4:	00 00       	nop
    12e6:	00 00       	nop
    12e8:	44 00       	.word	0x0044	; ????
    12ea:	8a 01       	movw	r16, r20
    12ec:	92 04       	cpc	r9, r2
    12ee:	00 00       	nop
    12f0:	00 00       	nop
    12f2:	00 00       	nop
    12f4:	44 00       	.word	0x0044	; ????
    12f6:	7e 01       	movw	r14, r28
    12f8:	a0 04       	cpc	r10, r0
    12fa:	00 00       	nop
    12fc:	00 00       	nop
    12fe:	00 00       	nop
    1300:	44 00       	.word	0x0044	; ????
    1302:	7f 01       	movw	r14, r30
    1304:	ca 04       	cpc	r12, r10
    1306:	00 00       	nop
    1308:	00 00       	nop
    130a:	00 00       	nop
    130c:	44 00       	.word	0x0044	; ????
    130e:	8e 01       	movw	r16, r28
    1310:	ce 04       	cpc	r12, r14
    1312:	00 00       	nop
    1314:	00 00       	nop
    1316:	00 00       	nop
    1318:	44 00       	.word	0x0044	; ????
    131a:	8f 01       	movw	r16, r30
    131c:	d0 04       	cpc	r13, r0
    131e:	00 00       	nop
    1320:	00 00       	nop
    1322:	00 00       	nop
    1324:	44 00       	.word	0x0044	; ????
    1326:	84 01       	movw	r16, r8
    1328:	e8 04       	cpc	r14, r8
    132a:	00 00       	nop
    132c:	00 00       	nop
    132e:	00 00       	nop
    1330:	44 00       	.word	0x0044	; ????
    1332:	82 01       	movw	r16, r4
    1334:	f6 04       	cpc	r15, r6
    1336:	00 00       	nop
    1338:	00 00       	nop
    133a:	00 00       	nop
    133c:	44 00       	.word	0x0044	; ????
    133e:	84 01       	movw	r16, r8
    1340:	0c 05       	cpc	r16, r12
    1342:	00 00       	nop
    1344:	00 00       	nop
    1346:	00 00       	nop
    1348:	44 00       	.word	0x0044	; ????
    134a:	82 01       	movw	r16, r4
    134c:	1a 05       	cpc	r17, r10
    134e:	00 00       	nop
    1350:	00 00       	nop
    1352:	00 00       	nop
    1354:	44 00       	.word	0x0044	; ????
    1356:	96 02       	muls	r25, r22
    1358:	22 05       	cpc	r18, r2
    135a:	00 00       	nop
    135c:	00 00       	nop
    135e:	00 00       	nop
    1360:	44 00       	.word	0x0044	; ????
    1362:	92 02       	muls	r25, r18
    1364:	28 05       	cpc	r18, r8
    1366:	00 00       	nop
    1368:	00 00       	nop
    136a:	00 00       	nop
    136c:	44 00       	.word	0x0044	; ????
    136e:	ae 02       	muls	r26, r30
    1370:	2e 05       	cpc	r18, r14
    1372:	00 00       	nop
    1374:	00 00       	nop
    1376:	00 00       	nop
    1378:	44 00       	.word	0x0044	; ????
    137a:	af 02       	muls	r26, r31
    137c:	36 05       	cpc	r19, r6
    137e:	00 00       	nop
    1380:	00 00       	nop
    1382:	00 00       	nop
    1384:	44 00       	.word	0x0044	; ????
    1386:	b2 02       	muls	r27, r18
    1388:	3a 05       	cpc	r19, r10
    138a:	00 00       	nop
    138c:	00 00       	nop
    138e:	00 00       	nop
    1390:	44 00       	.word	0x0044	; ????
    1392:	b3 02       	muls	r27, r19
    1394:	3c 05       	cpc	r19, r12
    1396:	00 00       	nop
    1398:	00 00       	nop
    139a:	00 00       	nop
    139c:	44 00       	.word	0x0044	; ????
    139e:	b4 02       	muls	r27, r20
    13a0:	4c 05       	cpc	r20, r12
    13a2:	00 00       	nop
    13a4:	00 00       	nop
    13a6:	00 00       	nop
    13a8:	44 00       	.word	0x0044	; ????
    13aa:	b6 02       	muls	r27, r22
    13ac:	50 05       	cpc	r21, r0
    13ae:	00 00       	nop
    13b0:	00 00       	nop
    13b2:	00 00       	nop
    13b4:	44 00       	.word	0x0044	; ????
    13b6:	aa 02       	muls	r26, r26
    13b8:	56 05       	cpc	r21, r6
    13ba:	00 00       	nop
    13bc:	00 00       	nop
    13be:	00 00       	nop
    13c0:	44 00       	.word	0x0044	; ????
    13c2:	7c 02       	muls	r23, r28
    13c4:	5c 05       	cpc	r21, r12
    13c6:	00 00       	nop
    13c8:	00 00       	nop
    13ca:	00 00       	nop
    13cc:	44 00       	.word	0x0044	; ????
    13ce:	7e 01       	movw	r14, r28
    13d0:	62 05       	cpc	r22, r2
    13d2:	00 00       	nop
    13d4:	00 00       	nop
    13d6:	00 00       	nop
    13d8:	44 00       	.word	0x0044	; ????
    13da:	7f 01       	movw	r14, r30
    13dc:	8c 05       	cpc	r24, r12
    13de:	00 00       	nop
    13e0:	00 00       	nop
    13e2:	00 00       	nop
    13e4:	44 00       	.word	0x0044	; ????
    13e6:	84 01       	movw	r16, r8
    13e8:	9e 05       	cpc	r25, r14
    13ea:	00 00       	nop
    13ec:	00 00       	nop
    13ee:	00 00       	nop
    13f0:	44 00       	.word	0x0044	; ????
    13f2:	82 01       	movw	r16, r4
    13f4:	ac 05       	cpc	r26, r12
    13f6:	00 00       	nop
    13f8:	00 00       	nop
    13fa:	00 00       	nop
    13fc:	44 00       	.word	0x0044	; ????
    13fe:	89 01       	movw	r16, r18
    1400:	b2 05       	cpc	r27, r2
    1402:	00 00       	nop
    1404:	00 00       	nop
    1406:	00 00       	nop
    1408:	44 00       	.word	0x0044	; ????
    140a:	8a 01       	movw	r16, r20
    140c:	b4 05       	cpc	r27, r4
    140e:	00 00       	nop
    1410:	00 00       	nop
    1412:	00 00       	nop
    1414:	44 00       	.word	0x0044	; ????
    1416:	bb 02       	muls	r27, r27
    1418:	be 05       	cpc	r27, r14
    141a:	00 00       	nop
    141c:	00 00       	nop
    141e:	00 00       	nop
    1420:	44 00       	.word	0x0044	; ????
    1422:	c3 02       	muls	r28, r19
    1424:	e0 05       	cpc	r30, r0
    1426:	00 00       	nop
    1428:	00 00       	nop
    142a:	00 00       	nop
    142c:	44 00       	.word	0x0044	; ????
    142e:	c4 02       	muls	r28, r20
    1430:	ea 05       	cpc	r30, r10
    1432:	00 00       	nop
    1434:	00 00       	nop
    1436:	00 00       	nop
    1438:	44 00       	.word	0x0044	; ????
    143a:	c5 02       	muls	r28, r21
    143c:	ec 05       	cpc	r30, r12
    143e:	00 00       	nop
    1440:	00 00       	nop
    1442:	00 00       	nop
    1444:	44 00       	.word	0x0044	; ????
    1446:	c6 02       	muls	r28, r22
    1448:	f8 05       	cpc	r31, r8
    144a:	00 00       	nop
    144c:	00 00       	nop
    144e:	00 00       	nop
    1450:	44 00       	.word	0x0044	; ????
    1452:	c1 02       	muls	r28, r17
    1454:	04 06       	cpc	r0, r20
    1456:	00 00       	nop
    1458:	00 00       	nop
    145a:	00 00       	nop
    145c:	44 00       	.word	0x0044	; ????
    145e:	e1 02       	muls	r30, r17
    1460:	0a 06       	cpc	r0, r26
    1462:	00 00       	nop
    1464:	00 00       	nop
    1466:	00 00       	nop
    1468:	44 00       	.word	0x0044	; ????
    146a:	a6 02       	muls	r26, r22
    146c:	30 06       	cpc	r3, r16
    146e:	00 00       	nop
    1470:	00 00       	nop
    1472:	00 00       	nop
    1474:	44 00       	.word	0x0044	; ????
    1476:	9e 02       	muls	r25, r30
    1478:	36 06       	cpc	r3, r22
    147a:	00 00       	nop
    147c:	00 00       	nop
    147e:	00 00       	nop
    1480:	44 00       	.word	0x0044	; ????
    1482:	9a 02       	muls	r25, r26
    1484:	3c 06       	cpc	r3, r28
    1486:	00 00       	nop
    1488:	00 00       	nop
    148a:	00 00       	nop
    148c:	44 00       	.word	0x0044	; ????
    148e:	a2 02       	muls	r26, r18
    1490:	42 06       	cpc	r4, r18
    1492:	00 00       	nop
    1494:	22 0d       	add	r18, r2
    1496:	00 00       	nop
    1498:	40 00       	.word	0x0040	; ????
    149a:	f8 01       	movw	r30, r16
    149c:	08 00       	.word	0x0008	; ????
    149e:	00 00       	nop
    14a0:	2f 0d       	add	r18, r15
    14a2:	00 00       	nop
    14a4:	40 00       	.word	0x0040	; ????
    14a6:	f9 01       	movw	r30, r18
    14a8:	1c 00       	.word	0x001c	; ????
    14aa:	00 00       	nop
    14ac:	3b 0d       	add	r19, r11
    14ae:	00 00       	nop
    14b0:	40 00       	.word	0x0040	; ????
    14b2:	fb 01       	movw	r30, r22
    14b4:	18 00       	.word	0x0018	; ????
    14b6:	00 00       	nop
    14b8:	00 00       	nop
    14ba:	00 00       	nop
    14bc:	c0 00       	.word	0x00c0	; ????
    14be:	00 00       	nop
    14c0:	b0 00       	.word	0x00b0	; ????
    14c2:	00 00       	nop
    14c4:	4d 0d       	add	r20, r13
    14c6:	00 00       	nop
    14c8:	40 00       	.word	0x0040	; ????
    14ca:	4e 02       	muls	r20, r30
    14cc:	14 00       	.word	0x0014	; ????
    14ce:	00 00       	nop
    14d0:	00 00       	nop
    14d2:	00 00       	nop
    14d4:	c0 00       	.word	0x00c0	; ????
    14d6:	00 00       	nop
    14d8:	b0 00       	.word	0x00b0	; ????
    14da:	00 00       	nop
    14dc:	61 0d       	add	r22, r1
    14de:	00 00       	nop
    14e0:	40 00       	.word	0x0040	; ????
    14e2:	5e 02       	muls	r21, r30
    14e4:	18 00       	.word	0x0018	; ????
    14e6:	00 00       	nop
    14e8:	6d 0d       	add	r22, r13
    14ea:	00 00       	nop
    14ec:	40 00       	.word	0x0040	; ????
    14ee:	5f 02       	muls	r21, r31
    14f0:	12 00       	.word	0x0012	; ????
    14f2:	00 00       	nop
    14f4:	00 00       	nop
    14f6:	00 00       	nop
    14f8:	c0 00       	.word	0x00c0	; ????
    14fa:	00 00       	nop
    14fc:	74 02       	muls	r23, r20
    14fe:	00 00       	nop
    1500:	00 00       	nop
    1502:	00 00       	nop
    1504:	e0 00       	.word	0x00e0	; ????
    1506:	00 00       	nop
    1508:	c6 02       	muls	r28, r22
    150a:	00 00       	nop
    150c:	61 0d       	add	r22, r1
    150e:	00 00       	nop
    1510:	40 00       	.word	0x0040	; ????
    1512:	5e 02       	muls	r21, r30
    1514:	18 00       	.word	0x0018	; ????
    1516:	00 00       	nop
    1518:	6d 0d       	add	r22, r13
    151a:	00 00       	nop
    151c:	40 00       	.word	0x0040	; ????
    151e:	5f 02       	muls	r21, r31
    1520:	12 00       	.word	0x0012	; ????
    1522:	00 00       	nop
    1524:	00 00       	nop
    1526:	00 00       	nop
    1528:	c0 00       	.word	0x00c0	; ????
    152a:	00 00       	nop
    152c:	30 03       	mulsu	r19, r16
    152e:	00 00       	nop
    1530:	00 00       	nop
    1532:	00 00       	nop
    1534:	e0 00       	.word	0x00e0	; ????
    1536:	00 00       	nop
    1538:	40 03       	mulsu	r20, r16
    153a:	00 00       	nop
    153c:	00 00       	nop
    153e:	00 00       	nop
    1540:	e0 00       	.word	0x00e0	; ????
    1542:	00 00       	nop
    1544:	be 00       	.word	0x00be	; ????
    1546:	00 00       	nop
    1548:	4d 0d       	add	r20, r13
    154a:	00 00       	nop
    154c:	40 00       	.word	0x0040	; ????
    154e:	4e 02       	muls	r20, r30
    1550:	14 00       	.word	0x0014	; ????
    1552:	00 00       	nop
    1554:	00 00       	nop
    1556:	00 00       	nop
    1558:	c0 00       	.word	0x00c0	; ????
    155a:	00 00       	nop
    155c:	9e 01       	movw	r18, r28
    155e:	00 00       	nop
    1560:	00 00       	nop
    1562:	00 00       	nop
    1564:	e0 00       	.word	0x00e0	; ????
    1566:	00 00       	nop
    1568:	20 02       	muls	r18, r16
    156a:	00 00       	nop
    156c:	4d 0d       	add	r20, r13
    156e:	00 00       	nop
    1570:	40 00       	.word	0x0040	; ????
    1572:	4e 02       	muls	r20, r30
    1574:	14 00       	.word	0x0014	; ????
    1576:	00 00       	nop
    1578:	00 00       	nop
    157a:	00 00       	nop
    157c:	c0 00       	.word	0x00c0	; ????
    157e:	00 00       	nop
    1580:	58 02       	muls	r21, r24
    1582:	00 00       	nop
    1584:	00 00       	nop
    1586:	00 00       	nop
    1588:	e0 00       	.word	0x00e0	; ????
    158a:	00 00       	nop
    158c:	c6 02       	muls	r28, r22
    158e:	00 00       	nop
    1590:	4d 0d       	add	r20, r13
    1592:	00 00       	nop
    1594:	40 00       	.word	0x0040	; ????
    1596:	4e 02       	muls	r20, r30
    1598:	14 00       	.word	0x0014	; ????
    159a:	00 00       	nop
    159c:	00 00       	nop
    159e:	00 00       	nop
    15a0:	c0 00       	.word	0x00c0	; ????
    15a2:	00 00       	nop
    15a4:	30 03       	mulsu	r19, r16
    15a6:	00 00       	nop
    15a8:	00 00       	nop
    15aa:	00 00       	nop
    15ac:	e0 00       	.word	0x00e0	; ????
    15ae:	00 00       	nop
    15b0:	40 03       	mulsu	r20, r16
    15b2:	00 00       	nop
    15b4:	4d 0d       	add	r20, r13
    15b6:	00 00       	nop
    15b8:	40 00       	.word	0x0040	; ????
    15ba:	4e 02       	muls	r20, r30
    15bc:	14 00       	.word	0x0014	; ????
    15be:	00 00       	nop
    15c0:	00 00       	nop
    15c2:	00 00       	nop
    15c4:	c0 00       	.word	0x00c0	; ????
    15c6:	00 00       	nop
    15c8:	72 03       	mulsu	r23, r18
    15ca:	00 00       	nop
    15cc:	00 00       	nop
    15ce:	00 00       	nop
    15d0:	e0 00       	.word	0x00e0	; ????
    15d2:	00 00       	nop
    15d4:	76 03       	mulsu	r23, r22
    15d6:	00 00       	nop
    15d8:	4d 0d       	add	r20, r13
    15da:	00 00       	nop
    15dc:	40 00       	.word	0x0040	; ????
    15de:	4e 02       	muls	r20, r30
    15e0:	14 00       	.word	0x0014	; ????
    15e2:	00 00       	nop
    15e4:	00 00       	nop
    15e6:	00 00       	nop
    15e8:	c0 00       	.word	0x00c0	; ????
    15ea:	00 00       	nop
    15ec:	88 03       	fmulsu	r16, r16
    15ee:	00 00       	nop
    15f0:	00 00       	nop
    15f2:	00 00       	nop
    15f4:	e0 00       	.word	0x00e0	; ????
    15f6:	00 00       	nop
    15f8:	44 04       	cpc	r4, r4
    15fa:	00 00       	nop
    15fc:	4d 0d       	add	r20, r13
    15fe:	00 00       	nop
    1600:	40 00       	.word	0x0040	; ????
    1602:	4e 02       	muls	r20, r30
    1604:	14 00       	.word	0x0014	; ????
    1606:	00 00       	nop
    1608:	00 00       	nop
    160a:	00 00       	nop
    160c:	c0 00       	.word	0x00c0	; ????
    160e:	00 00       	nop
    1610:	62 04       	cpc	r6, r2
    1612:	00 00       	nop
    1614:	00 00       	nop
    1616:	00 00       	nop
    1618:	e0 00       	.word	0x00e0	; ????
    161a:	00 00       	nop
    161c:	0a 06       	cpc	r0, r26
    161e:	00 00       	nop
    1620:	4d 0d       	add	r20, r13
    1622:	00 00       	nop
    1624:	40 00       	.word	0x0040	; ????
    1626:	4e 02       	muls	r20, r30
    1628:	14 00       	.word	0x0014	; ????
    162a:	00 00       	nop
    162c:	00 00       	nop
    162e:	00 00       	nop
    1630:	c0 00       	.word	0x00c0	; ????
    1632:	00 00       	nop
    1634:	30 06       	cpc	r3, r16
    1636:	00 00       	nop
    1638:	00 00       	nop
    163a:	00 00       	nop
    163c:	e0 00       	.word	0x00e0	; ????
    163e:	00 00       	nop
    1640:	48 06       	cpc	r4, r24
    1642:	00 00       	nop
    1644:	00 00       	nop
    1646:	00 00       	nop
    1648:	e0 00       	.word	0x00e0	; ????
    164a:	00 00       	nop
    164c:	ca 00       	.word	0x00ca	; ????
    164e:	00 00       	nop
    1650:	22 0d       	add	r18, r2
    1652:	00 00       	nop
    1654:	40 00       	.word	0x0040	; ????
    1656:	f8 01       	movw	r30, r16
    1658:	08 00       	.word	0x0008	; ????
    165a:	00 00       	nop
    165c:	2f 0d       	add	r18, r15
    165e:	00 00       	nop
    1660:	40 00       	.word	0x0040	; ????
    1662:	f9 01       	movw	r30, r18
    1664:	1c 00       	.word	0x001c	; ????
    1666:	00 00       	nop
    1668:	3b 0d       	add	r19, r11
    166a:	00 00       	nop
    166c:	40 00       	.word	0x0040	; ????
    166e:	fb 01       	movw	r30, r22
    1670:	18 00       	.word	0x0018	; ????
    1672:	00 00       	nop
    1674:	00 00       	nop
    1676:	00 00       	nop
    1678:	c0 00       	.word	0x00c0	; ????
    167a:	00 00       	nop
    167c:	2c 01       	movw	r4, r24
    167e:	00 00       	nop
    1680:	00 00       	nop
    1682:	00 00       	nop
    1684:	e0 00       	.word	0x00e0	; ????
    1686:	00 00       	nop
    1688:	0a 06       	cpc	r0, r26
    168a:	00 00       	nop
    168c:	22 0d       	add	r18, r2
    168e:	00 00       	nop
    1690:	40 00       	.word	0x0040	; ????
    1692:	f8 01       	movw	r30, r16
    1694:	08 00       	.word	0x0008	; ????
    1696:	00 00       	nop
    1698:	2f 0d       	add	r18, r15
    169a:	00 00       	nop
    169c:	40 00       	.word	0x0040	; ????
    169e:	f9 01       	movw	r30, r18
    16a0:	1c 00       	.word	0x001c	; ????
    16a2:	00 00       	nop
    16a4:	3b 0d       	add	r19, r11
    16a6:	00 00       	nop
    16a8:	40 00       	.word	0x0040	; ????
    16aa:	fb 01       	movw	r30, r22
    16ac:	18 00       	.word	0x0018	; ????
    16ae:	00 00       	nop
    16b0:	00 00       	nop
    16b2:	00 00       	nop
    16b4:	c0 00       	.word	0x00c0	; ????
    16b6:	00 00       	nop
    16b8:	30 06       	cpc	r3, r16
    16ba:	00 00       	nop
    16bc:	00 00       	nop
    16be:	00 00       	nop
    16c0:	e0 00       	.word	0x00e0	; ????
    16c2:	00 00       	nop
    16c4:	48 06       	cpc	r4, r24
    16c6:	00 00       	nop
    16c8:	00 00       	nop
    16ca:	00 00       	nop
    16cc:	24 00       	.word	0x0024	; ????
    16ce:	00 00       	nop
    16d0:	48 06       	cpc	r4, r24
    16d2:	00 00       	nop
    16d4:	00 00       	nop
    16d6:	00 00       	nop
    16d8:	4e 00       	.word	0x004e	; ????
    16da:	00 00       	nop
    16dc:	e2 0c       	add	r14, r2
    16de:	00 00       	nop
    16e0:	78 0d       	add	r23, r8
    16e2:	00 00       	nop
    16e4:	20 00       	.word	0x0020	; ????
    16e6:	01 00       	.word	0x0001	; ????
    16e8:	00 00       	nop
    16ea:	00 00       	nop
    16ec:	ce 0d       	add	r28, r14
    16ee:	00 00       	nop
    16f0:	20 00       	.word	0x0020	; ????
    16f2:	50 00       	.word	0x0050	; ????
    16f4:	00 00       	nop
    16f6:	00 00       	nop
    16f8:	e7 0d       	add	r30, r7
    16fa:	00 00       	nop
    16fc:	20 00       	.word	0x0020	; ????
    16fe:	51 00       	.word	0x0051	; ????
    1700:	00 00       	nop
    1702:	00 00       	nop
    1704:	f9 0d       	add	r31, r9
    1706:	00 00       	nop
    1708:	20 00       	.word	0x0020	; ????
    170a:	52 00       	.word	0x0052	; ????
    170c:	00 00       	nop
    170e:	00 00       	nop
    1710:	0b 0e       	add	r0, r27
    1712:	00 00       	nop
    1714:	20 00       	.word	0x0020	; ????
    1716:	53 00       	.word	0x0053	; ????
    1718:	00 00       	nop
    171a:	00 00       	nop
    171c:	22 0e       	add	r2, r18
    171e:	00 00       	nop
    1720:	20 00       	.word	0x0020	; ????
    1722:	54 00       	.word	0x0054	; ????
    1724:	00 00       	nop
    1726:	00 00       	nop
    1728:	36 0e       	add	r3, r22
    172a:	00 00       	nop
    172c:	20 00       	.word	0x0020	; ????
    172e:	55 00       	.word	0x0055	; ????
    1730:	00 00       	nop
    1732:	00 00       	nop
    1734:	47 0e       	add	r4, r23
    1736:	00 00       	nop
    1738:	20 00       	.word	0x0020	; ????
    173a:	56 00       	.word	0x0056	; ????
    173c:	00 00       	nop
    173e:	00 00       	nop
    1740:	58 0e       	add	r5, r24
    1742:	00 00       	nop
    1744:	20 00       	.word	0x0020	; ????
    1746:	57 00       	.word	0x0057	; ????
    1748:	00 00       	nop
    174a:	00 00       	nop
    174c:	6e 0e       	add	r6, r30
    174e:	00 00       	nop
    1750:	20 00       	.word	0x0020	; ????
    1752:	5a 00       	.word	0x005a	; ????
    1754:	00 00       	nop
    1756:	00 00       	nop
    1758:	88 0e       	add	r8, r24
    175a:	00 00       	nop
    175c:	20 00       	.word	0x0020	; ????
    175e:	5b 00       	.word	0x005b	; ????
    1760:	00 00       	nop
    1762:	00 00       	nop
    1764:	99 0e       	add	r9, r25
    1766:	00 00       	nop
    1768:	20 00       	.word	0x0020	; ????
    176a:	5c 00       	.word	0x005c	; ????
    176c:	00 00       	nop
    176e:	00 00       	nop
    1770:	b0 0e       	add	r11, r16
    1772:	00 00       	nop
    1774:	20 00       	.word	0x0020	; ????
    1776:	5d 00       	.word	0x005d	; ????
    1778:	00 00       	nop
    177a:	00 00       	nop
    177c:	c7 0e       	add	r12, r23
    177e:	00 00       	nop
    1780:	20 00       	.word	0x0020	; ????
    1782:	5e 00       	.word	0x005e	; ????
    1784:	00 00       	nop
    1786:	00 00       	nop
    1788:	dd 0e       	add	r13, r29
    178a:	00 00       	nop
    178c:	20 00       	.word	0x0020	; ????
    178e:	5f 00       	.word	0x005f	; ????
    1790:	00 00       	nop
    1792:	00 00       	nop
    1794:	ed 0e       	add	r14, r29
    1796:	00 00       	nop
    1798:	20 00       	.word	0x0020	; ????
    179a:	61 00       	.word	0x0061	; ????
    179c:	00 00       	nop
    179e:	00 00       	nop
    17a0:	32 0f       	add	r19, r18
    17a2:	00 00       	nop
    17a4:	20 00       	.word	0x0020	; ????
    17a6:	96 00       	.word	0x0096	; ????
    17a8:	00 00       	nop
    17aa:	00 00       	nop
    17ac:	45 0f       	add	r20, r21
    17ae:	00 00       	nop
    17b0:	20 00       	.word	0x0020	; ????
    17b2:	97 00       	.word	0x0097	; ????
    17b4:	00 00       	nop
    17b6:	00 00       	nop
    17b8:	60 0f       	add	r22, r16
    17ba:	00 00       	nop
    17bc:	20 00       	.word	0x0020	; ????
    17be:	9f 00       	.word	0x009f	; ????
    17c0:	00 00       	nop
    17c2:	00 00       	nop
    17c4:	74 0f       	add	r23, r20
    17c6:	00 00       	nop
    17c8:	20 00       	.word	0x0020	; ????
    17ca:	a0 00       	.word	0x00a0	; ????
    17cc:	00 00       	nop
    17ce:	00 00       	nop
    17d0:	8a 0f       	add	r24, r26
    17d2:	00 00       	nop
    17d4:	20 00       	.word	0x0020	; ????
    17d6:	a1 00       	.word	0x00a1	; ????
    17d8:	00 00       	nop
    17da:	00 00       	nop
    17dc:	ae 0f       	add	r26, r30
    17de:	00 00       	nop
    17e0:	20 00       	.word	0x0020	; ????
    17e2:	a2 00       	.word	0x00a2	; ????
    17e4:	00 00       	nop
    17e6:	00 00       	nop
    17e8:	e8 0f       	add	r30, r24
    17ea:	00 00       	nop
    17ec:	20 00       	.word	0x0020	; ????
    17ee:	a3 00       	.word	0x00a3	; ????
    17f0:	00 00       	nop
    17f2:	00 00       	nop
    17f4:	ff 0f       	add	r31, r31
    17f6:	00 00       	nop
    17f8:	20 00       	.word	0x0020	; ????
    17fa:	a4 00       	.word	0x00a4	; ????
    17fc:	00 00       	nop
    17fe:	00 00       	nop
    1800:	15 10       	cpse	r1, r5
    1802:	00 00       	nop
    1804:	20 00       	.word	0x0020	; ????
    1806:	a5 00       	.word	0x00a5	; ????
	...
    1810:	64 00       	.word	0x0064	; ????
    1812:	00 00       	nop
    1814:	9a 06       	cpc	r9, r26
	...

Disassembly of section .stabstr:

00000000 <.stabstr>:
       0:	00 6d       	ori	r16, 0xD0	; 208
       2:	61 69       	ori	r22, 0x91	; 145
       4:	6e 2e       	mov	r6, r30
       6:	63 00       	.word	0x0063	; ????
       8:	2f 68       	ori	r18, 0x8F	; 143
       a:	6f 6d       	ori	r22, 0xDF	; 223
       c:	65 2f       	mov	r22, r21
       e:	65 72       	andi	r22, 0x25	; 37
      10:	69 63       	ori	r22, 0x39	; 57
      12:	2f 33       	cpi	r18, 0x3F	; 63
      14:	44 50       	subi	r20, 0x04	; 4
      16:	72 69       	ori	r23, 0x92	; 146
      18:	6e 74       	andi	r22, 0x4E	; 78
      1a:	65 72       	andi	r22, 0x25	; 37
      1c:	2f 44       	sbci	r18, 0x4F	; 79
      1e:	72 61       	ori	r23, 0x12	; 18
      20:	61 69       	ori	r22, 0x91	; 145
      22:	73 63       	ori	r23, 0x33	; 51
      24:	68 69       	ori	r22, 0x98	; 152
      26:	6a 66       	ori	r22, 0x6A	; 106
      28:	2f 44       	sbci	r18, 0x4F	; 79
      2a:	72 61       	ori	r23, 0x12	; 18
      2c:	61 69       	ori	r22, 0x91	; 145
      2e:	53 63       	ori	r21, 0x33	; 51
      30:	68 69       	ori	r22, 0x98	; 152
      32:	6a 66       	ori	r22, 0x6A	; 106
      34:	43 6f       	ori	r20, 0xF3	; 243
      36:	6e 74       	andi	r22, 0x4E	; 78
      38:	72 6f       	ori	r23, 0xF2	; 242
      3a:	6c 6c       	ori	r22, 0xCC	; 204
      3c:	65 72       	andi	r22, 0x25	; 37
      3e:	2f 00       	.word	0x002f	; ????
      40:	67 63       	ori	r22, 0x37	; 55
      42:	63 32       	cpi	r22, 0x23	; 35
      44:	5f 63       	ori	r21, 0x3F	; 63
      46:	6f 6d       	ori	r22, 0xDF	; 223
      48:	70 69       	ori	r23, 0x90	; 144
      4a:	6c 65       	ori	r22, 0x5C	; 92
      4c:	64 2e       	mov	r6, r20
      4e:	00 69       	ori	r16, 0x90	; 144
      50:	6e 74       	andi	r22, 0x4E	; 78
      52:	3a 74       	andi	r19, 0x4A	; 74
      54:	28 30       	cpi	r18, 0x08	; 8
      56:	2c 31       	cpi	r18, 0x1C	; 28
      58:	29 3d       	cpi	r18, 0xD9	; 217
      5a:	72 28       	or	r7, r2
      5c:	30 2c       	mov	r3, r0
      5e:	31 29       	or	r19, r1
      60:	3b 2d       	mov	r19, r11
      62:	33 32       	cpi	r19, 0x23	; 35
      64:	37 36       	cpi	r19, 0x67	; 103
      66:	38 3b       	cpi	r19, 0xB8	; 184
      68:	33 32       	cpi	r19, 0x23	; 35
      6a:	37 36       	cpi	r19, 0x67	; 103
      6c:	37 3b       	cpi	r19, 0xB7	; 183
      6e:	00 63       	ori	r16, 0x30	; 48
      70:	68 61       	ori	r22, 0x18	; 24
      72:	72 3a       	cpi	r23, 0xA2	; 162
      74:	74 28       	or	r7, r4
      76:	30 2c       	mov	r3, r0
      78:	32 29       	or	r19, r2
      7a:	3d 72       	andi	r19, 0x2D	; 45
      7c:	28 30       	cpi	r18, 0x08	; 8
      7e:	2c 32       	cpi	r18, 0x2C	; 44
      80:	29 3b       	cpi	r18, 0xB9	; 185
      82:	30 3b       	cpi	r19, 0xB0	; 176
      84:	31 32       	cpi	r19, 0x21	; 33
      86:	37 3b       	cpi	r19, 0xB7	; 183
      88:	00 6c       	ori	r16, 0xC0	; 192
      8a:	6f 6e       	ori	r22, 0xEF	; 239
      8c:	67 20       	and	r6, r7
      8e:	69 6e       	ori	r22, 0xE9	; 233
      90:	74 3a       	cpi	r23, 0xA4	; 164
      92:	74 28       	or	r7, r4
      94:	30 2c       	mov	r3, r0
      96:	33 29       	or	r19, r3
      98:	3d 40       	sbci	r19, 0x0D	; 13
      9a:	73 33       	cpi	r23, 0x33	; 51
      9c:	32 3b       	cpi	r19, 0xB2	; 178
      9e:	72 28       	or	r7, r2
      a0:	30 2c       	mov	r3, r0
      a2:	33 29       	or	r19, r3
      a4:	3b 30       	cpi	r19, 0x0B	; 11
      a6:	32 30       	cpi	r19, 0x02	; 2
      a8:	30 30       	cpi	r19, 0x00	; 0
      aa:	30 30       	cpi	r19, 0x00	; 0
      ac:	30 30       	cpi	r19, 0x00	; 0
      ae:	30 30       	cpi	r19, 0x00	; 0
      b0:	30 3b       	cpi	r19, 0xB0	; 176
      b2:	30 31       	cpi	r19, 0x10	; 16
      b4:	37 37       	cpi	r19, 0x77	; 119
      b6:	37 37       	cpi	r19, 0x77	; 119
      b8:	37 37       	cpi	r19, 0x77	; 119
      ba:	37 37       	cpi	r19, 0x77	; 119
      bc:	37 37       	cpi	r19, 0x77	; 119
      be:	3b 00       	.word	0x003b	; ????
      c0:	75 6e       	ori	r23, 0xE5	; 229
      c2:	73 69       	ori	r23, 0x93	; 147
      c4:	67 6e       	ori	r22, 0xE7	; 231
      c6:	65 64       	ori	r22, 0x45	; 69
      c8:	20 69       	ori	r18, 0x90	; 144
      ca:	6e 74       	andi	r22, 0x4E	; 78
      cc:	3a 74       	andi	r19, 0x4A	; 74
      ce:	28 30       	cpi	r18, 0x08	; 8
      d0:	2c 34       	cpi	r18, 0x4C	; 76
      d2:	29 3d       	cpi	r18, 0xD9	; 217
      d4:	72 28       	or	r7, r2
      d6:	30 2c       	mov	r3, r0
      d8:	34 29       	or	r19, r4
      da:	3b 30       	cpi	r19, 0x0B	; 11
      dc:	3b 30       	cpi	r19, 0x0B	; 11
      de:	31 37       	cpi	r19, 0x71	; 113
      e0:	37 37       	cpi	r19, 0x77	; 119
      e2:	37 37       	cpi	r19, 0x77	; 119
      e4:	3b 00       	.word	0x003b	; ????
      e6:	6c 6f       	ori	r22, 0xFC	; 252
      e8:	6e 67       	ori	r22, 0x7E	; 126
      ea:	20 75       	andi	r18, 0x50	; 80
      ec:	6e 73       	andi	r22, 0x3E	; 62
      ee:	69 67       	ori	r22, 0x79	; 121
      f0:	6e 65       	ori	r22, 0x5E	; 94
      f2:	64 20       	and	r6, r4
      f4:	69 6e       	ori	r22, 0xE9	; 233
      f6:	74 3a       	cpi	r23, 0xA4	; 164
      f8:	74 28       	or	r7, r4
      fa:	30 2c       	mov	r3, r0
      fc:	35 29       	or	r19, r5
      fe:	3d 40       	sbci	r19, 0x0D	; 13
     100:	73 33       	cpi	r23, 0x33	; 51
     102:	32 3b       	cpi	r19, 0xB2	; 178
     104:	72 28       	or	r7, r2
     106:	30 2c       	mov	r3, r0
     108:	35 29       	or	r19, r5
     10a:	3b 30       	cpi	r19, 0x0B	; 11
     10c:	3b 30       	cpi	r19, 0x0B	; 11
     10e:	33 37       	cpi	r19, 0x73	; 115
     110:	37 37       	cpi	r19, 0x77	; 119
     112:	37 37       	cpi	r19, 0x77	; 119
     114:	37 37       	cpi	r19, 0x77	; 119
     116:	37 37       	cpi	r19, 0x77	; 119
     118:	37 3b       	cpi	r19, 0xB7	; 183
     11a:	00 6c       	ori	r16, 0xC0	; 192
     11c:	6f 6e       	ori	r22, 0xEF	; 239
     11e:	67 20       	and	r6, r7
     120:	6c 6f       	ori	r22, 0xFC	; 252
     122:	6e 67       	ori	r22, 0x7E	; 126
     124:	20 69       	ori	r18, 0x90	; 144
     126:	6e 74       	andi	r22, 0x4E	; 78
     128:	3a 74       	andi	r19, 0x4A	; 74
     12a:	28 30       	cpi	r18, 0x08	; 8
     12c:	2c 36       	cpi	r18, 0x6C	; 108
     12e:	29 3d       	cpi	r18, 0xD9	; 217
     130:	40 73       	andi	r20, 0x30	; 48
     132:	36 34       	cpi	r19, 0x46	; 70
     134:	3b 72       	andi	r19, 0x2B	; 43
     136:	28 30       	cpi	r18, 0x08	; 8
     138:	2c 36       	cpi	r18, 0x6C	; 108
     13a:	29 3b       	cpi	r18, 0xB9	; 185
     13c:	30 31       	cpi	r19, 0x10	; 16
     13e:	30 30       	cpi	r19, 0x00	; 0
     140:	30 30       	cpi	r19, 0x00	; 0
     142:	30 30       	cpi	r19, 0x00	; 0
     144:	30 30       	cpi	r19, 0x00	; 0
     146:	30 30       	cpi	r19, 0x00	; 0
     148:	30 30       	cpi	r19, 0x00	; 0
     14a:	30 30       	cpi	r19, 0x00	; 0
     14c:	30 30       	cpi	r19, 0x00	; 0
     14e:	30 30       	cpi	r19, 0x00	; 0
     150:	30 30       	cpi	r19, 0x00	; 0
     152:	30 3b       	cpi	r19, 0xB0	; 176
     154:	30 37       	cpi	r19, 0x70	; 112
     156:	37 37       	cpi	r19, 0x77	; 119
     158:	37 37       	cpi	r19, 0x77	; 119
     15a:	37 37       	cpi	r19, 0x77	; 119
     15c:	37 37       	cpi	r19, 0x77	; 119
     15e:	37 37       	cpi	r19, 0x77	; 119
     160:	37 37       	cpi	r19, 0x77	; 119
     162:	37 37       	cpi	r19, 0x77	; 119
     164:	37 37       	cpi	r19, 0x77	; 119
     166:	37 37       	cpi	r19, 0x77	; 119
     168:	37 37       	cpi	r19, 0x77	; 119
     16a:	3b 00       	.word	0x003b	; ????
     16c:	6c 6f       	ori	r22, 0xFC	; 252
     16e:	6e 67       	ori	r22, 0x7E	; 126
     170:	20 6c       	ori	r18, 0xC0	; 192
     172:	6f 6e       	ori	r22, 0xEF	; 239
     174:	67 20       	and	r6, r7
     176:	75 6e       	ori	r23, 0xE5	; 229
     178:	73 69       	ori	r23, 0x93	; 147
     17a:	67 6e       	ori	r22, 0xE7	; 231
     17c:	65 64       	ori	r22, 0x45	; 69
     17e:	20 69       	ori	r18, 0x90	; 144
     180:	6e 74       	andi	r22, 0x4E	; 78
     182:	3a 74       	andi	r19, 0x4A	; 74
     184:	28 30       	cpi	r18, 0x08	; 8
     186:	2c 37       	cpi	r18, 0x7C	; 124
     188:	29 3d       	cpi	r18, 0xD9	; 217
     18a:	40 73       	andi	r20, 0x30	; 48
     18c:	36 34       	cpi	r19, 0x46	; 70
     18e:	3b 72       	andi	r19, 0x2B	; 43
     190:	28 30       	cpi	r18, 0x08	; 8
     192:	2c 37       	cpi	r18, 0x7C	; 124
     194:	29 3b       	cpi	r18, 0xB9	; 185
     196:	30 3b       	cpi	r19, 0xB0	; 176
     198:	30 31       	cpi	r19, 0x10	; 16
     19a:	37 37       	cpi	r19, 0x77	; 119
     19c:	37 37       	cpi	r19, 0x77	; 119
     19e:	37 37       	cpi	r19, 0x77	; 119
     1a0:	37 37       	cpi	r19, 0x77	; 119
     1a2:	37 37       	cpi	r19, 0x77	; 119
     1a4:	37 37       	cpi	r19, 0x77	; 119
     1a6:	37 37       	cpi	r19, 0x77	; 119
     1a8:	37 37       	cpi	r19, 0x77	; 119
     1aa:	37 37       	cpi	r19, 0x77	; 119
     1ac:	37 37       	cpi	r19, 0x77	; 119
     1ae:	37 3b       	cpi	r19, 0xB7	; 183
     1b0:	00 73       	andi	r16, 0x30	; 48
     1b2:	68 6f       	ori	r22, 0xF8	; 248
     1b4:	72 74       	andi	r23, 0x42	; 66
     1b6:	20 69       	ori	r18, 0x90	; 144
     1b8:	6e 74       	andi	r22, 0x4E	; 78
     1ba:	3a 74       	andi	r19, 0x4A	; 74
     1bc:	28 30       	cpi	r18, 0x08	; 8
     1be:	2c 38       	cpi	r18, 0x8C	; 140
     1c0:	29 3d       	cpi	r18, 0xD9	; 217
     1c2:	72 28       	or	r7, r2
     1c4:	30 2c       	mov	r3, r0
     1c6:	38 29       	or	r19, r8
     1c8:	3b 2d       	mov	r19, r11
     1ca:	33 32       	cpi	r19, 0x23	; 35
     1cc:	37 36       	cpi	r19, 0x67	; 103
     1ce:	38 3b       	cpi	r19, 0xB8	; 184
     1d0:	33 32       	cpi	r19, 0x23	; 35
     1d2:	37 36       	cpi	r19, 0x67	; 103
     1d4:	37 3b       	cpi	r19, 0xB7	; 183
     1d6:	00 73       	andi	r16, 0x30	; 48
     1d8:	68 6f       	ori	r22, 0xF8	; 248
     1da:	72 74       	andi	r23, 0x42	; 66
     1dc:	20 75       	andi	r18, 0x50	; 80
     1de:	6e 73       	andi	r22, 0x3E	; 62
     1e0:	69 67       	ori	r22, 0x79	; 121
     1e2:	6e 65       	ori	r22, 0x5E	; 94
     1e4:	64 20       	and	r6, r4
     1e6:	69 6e       	ori	r22, 0xE9	; 233
     1e8:	74 3a       	cpi	r23, 0xA4	; 164
     1ea:	74 28       	or	r7, r4
     1ec:	30 2c       	mov	r3, r0
     1ee:	39 29       	or	r19, r9
     1f0:	3d 72       	andi	r19, 0x2D	; 45
     1f2:	28 30       	cpi	r18, 0x08	; 8
     1f4:	2c 39       	cpi	r18, 0x9C	; 156
     1f6:	29 3b       	cpi	r18, 0xB9	; 185
     1f8:	30 3b       	cpi	r19, 0xB0	; 176
     1fa:	30 31       	cpi	r19, 0x10	; 16
     1fc:	37 37       	cpi	r19, 0x77	; 119
     1fe:	37 37       	cpi	r19, 0x77	; 119
     200:	37 3b       	cpi	r19, 0xB7	; 183
     202:	00 73       	andi	r16, 0x30	; 48
     204:	69 67       	ori	r22, 0x79	; 121
     206:	6e 65       	ori	r22, 0x5E	; 94
     208:	64 20       	and	r6, r4
     20a:	63 68       	ori	r22, 0x83	; 131
     20c:	61 72       	andi	r22, 0x21	; 33
     20e:	3a 74       	andi	r19, 0x4A	; 74
     210:	28 30       	cpi	r18, 0x08	; 8
     212:	2c 31       	cpi	r18, 0x1C	; 28
     214:	30 29       	or	r19, r0
     216:	3d 40       	sbci	r19, 0x0D	; 13
     218:	73 38       	cpi	r23, 0x83	; 131
     21a:	3b 72       	andi	r19, 0x2B	; 43
     21c:	28 30       	cpi	r18, 0x08	; 8
     21e:	2c 31       	cpi	r18, 0x1C	; 28
     220:	30 29       	or	r19, r0
     222:	3b 2d       	mov	r19, r11
     224:	31 32       	cpi	r19, 0x21	; 33
     226:	38 3b       	cpi	r19, 0xB8	; 184
     228:	31 32       	cpi	r19, 0x21	; 33
     22a:	37 3b       	cpi	r19, 0xB7	; 183
     22c:	00 75       	andi	r16, 0x50	; 80
     22e:	6e 73       	andi	r22, 0x3E	; 62
     230:	69 67       	ori	r22, 0x79	; 121
     232:	6e 65       	ori	r22, 0x5E	; 94
     234:	64 20       	and	r6, r4
     236:	63 68       	ori	r22, 0x83	; 131
     238:	61 72       	andi	r22, 0x21	; 33
     23a:	3a 74       	andi	r19, 0x4A	; 74
     23c:	28 30       	cpi	r18, 0x08	; 8
     23e:	2c 31       	cpi	r18, 0x1C	; 28
     240:	31 29       	or	r19, r1
     242:	3d 40       	sbci	r19, 0x0D	; 13
     244:	73 38       	cpi	r23, 0x83	; 131
     246:	3b 72       	andi	r19, 0x2B	; 43
     248:	28 30       	cpi	r18, 0x08	; 8
     24a:	2c 31       	cpi	r18, 0x1C	; 28
     24c:	31 29       	or	r19, r1
     24e:	3b 30       	cpi	r19, 0x0B	; 11
     250:	3b 32       	cpi	r19, 0x2B	; 43
     252:	35 35       	cpi	r19, 0x55	; 85
     254:	3b 00       	.word	0x003b	; ????
     256:	66 6c       	ori	r22, 0xC6	; 198
     258:	6f 61       	ori	r22, 0x1F	; 31
     25a:	74 3a       	cpi	r23, 0xA4	; 164
     25c:	74 28       	or	r7, r4
uint8_t huisDecimation;   // het huislampje is maar tijdelijk aan deze variable regelt dat
bool needsHoming = true;

void Homing()
{
    if (doHoming)
     25e:	30 2c       	mov	r3, r0
     260:	31 32       	cpi	r19, 0x21	; 33
     262:	29 3d       	cpi	r18, 0xD9	; 217
     264:	72 28       	or	r7, r2
    {
        if (homingReverse)
     266:	30 2c       	mov	r3, r0
     268:	31 29       	or	r19, r1
     26a:	3b 34       	cpi	r19, 0x4B	; 75
     26c:	3b 30       	cpi	r19, 0x0B	; 11
        {
            if (step == 0)
     26e:	3b 00       	.word	0x003b	; ????
     270:	64 6f       	ori	r22, 0xF4	; 244
     272:	75 62       	ori	r23, 0x25	; 37
     274:	6c 65       	ori	r22, 0x5C	; 92
     276:	3a 74       	andi	r19, 0x4A	; 74
     278:	28 30       	cpi	r18, 0x08	; 8
            {
                homingReverse = false;
     27a:	2c 31       	cpi	r18, 0x1C	; 28
     27c:	33 29       	or	r19, r3
     27e:	3d 72       	andi	r19, 0x2D	; 45
            }
        }
        else if (PINC & (1<<PC2))
     280:	28 30       	cpi	r18, 0x08	; 8
     282:	2c 31       	cpi	r18, 0x1C	; 28
            decimateDrempel = 4;
        }
        else
        {
            // klaar
            decimateDrempel = 40;
     284:	29 3b       	cpi	r18, 0xB9	; 185
     286:	34 3b       	cpi	r19, 0xB4	; 180
     288:	30 3b       	cpi	r19, 0xB0	; 176
            step = stepTabel[0][0];
     28a:	00 6c       	ori	r16, 0xC0	; 192
     28c:	6f 6e       	ori	r22, 0xEF	; 239
     28e:	67 20       	and	r6, r7
     290:	64 6f       	ori	r22, 0xF4	; 244
     292:	75 62       	ori	r23, 0x25	; 37
     294:	6c 65       	ori	r22, 0x5C	; 92
     296:	3a 74       	andi	r19, 0x4A	; 74
     298:	28 30       	cpi	r18, 0x08	; 8
            if (step>=0)
     29a:	2c 31       	cpi	r18, 0x1C	; 28
     29c:	34 29       	or	r19, r4
     29e:	3d 72       	andi	r19, 0x2D	; 45
     2a0:	28 30       	cpi	r18, 0x08	; 8
     2a2:	2c 31       	cpi	r18, 0x1C	; 28
     2a4:	29 3b       	cpi	r18, 0xB9	; 185
            {
                PORTB &= ~(1<<PB0); //vooruit
     2a6:	34 3b       	cpi	r19, 0xB4	; 180
            else
            {
                PORTB |= (1<<PB0); // terug
                step = -step;
            }
            doHoming = false;
     2a8:	30 3b       	cpi	r19, 0xB0	; 176
     2aa:	00 73       	andi	r16, 0x30	; 48
            needsHoming = false;
     2ac:	68 6f       	ori	r22, 0xF8	; 248
     2ae:	72 74       	andi	r23, 0x42	; 66
     2b0:	20 5f       	subi	r18, 0xF0	; 240
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
        {
            huidigePositie = 0;
     2b2:	46 72       	andi	r20, 0x26	; 38
     2b4:	61 63       	ori	r22, 0x31	; 49
            PORTB |= (1<<PB0); // terug
     2b6:	74 3a       	cpi	r23, 0xA4	; 164
            step = 32000;
     2b8:	74 28       	or	r7, r4
     2ba:	30 2c       	mov	r3, r0
     2bc:	31 35       	cpi	r19, 0x51	; 81
     2be:	29 3d       	cpi	r18, 0xD9	; 217
     2c0:	72 28       	or	r7, r2
     2c2:	30 2c       	mov	r3, r0
            decimateDrempel = 4;
     2c4:	31 29       	or	r19, r1
     2c6:	3b 31       	cpi	r19, 0x1B	; 27
     2c8:	3b 30       	cpi	r19, 0x0B	; 11
     2ca:	3b 00       	.word	0x003b	; ????
            {
                PORTB &= ~(1<<PB0); //vooruit
            }
            else
            {
                PORTB |= (1<<PB0); // terug
     2cc:	6c 6f       	ori	r22, 0xFC	; 252
                step = -step;
     2ce:	6e 67       	ori	r22, 0x7E	; 126
     2d0:	20 5f       	subi	r18, 0xF0	; 240
     2d2:	46 72       	andi	r20, 0x26	; 38
     2d4:	61 63       	ori	r22, 0x31	; 49
     2d6:	74 3a       	cpi	r23, 0xA4	; 164
     2d8:	74 28       	or	r7, r4
     2da:	30 2c       	mov	r3, r0
     2dc:	31 36       	cpi	r19, 0x61	; 97
     2de:	29 3d       	cpi	r18, 0xD9	; 217
     2e0:	72 28       	or	r7, r2
     2e2:	30 2c       	mov	r3, r0
     2e4:	31 29       	or	r19, r1
uint8_t huisDecimation;   // het huislampje is maar tijdelijk aan deze variable regelt dat
bool needsHoming = true;

void Homing()
{
    if (doHoming)
     2e6:	3b 34       	cpi	r19, 0x4B	; 75
     2e8:	3b 30       	cpi	r19, 0x0B	; 11
     2ea:	3b 00       	.word	0x003b	; ????
     2ec:	6c 6f       	ori	r22, 0xFC	; 252
    {
        if (homingReverse)
     2ee:	6e 67       	ori	r22, 0x7E	; 126
     2f0:	20 6c       	ori	r18, 0xC0	; 192
     2f2:	6f 6e       	ori	r22, 0xEF	; 239
     2f4:	67 20       	and	r6, r7
        {
            if (step == 0)
     2f6:	5f 46       	sbci	r21, 0x6F	; 111
     2f8:	72 61       	ori	r23, 0x12	; 18
     2fa:	63 74       	andi	r22, 0x43	; 67
     2fc:	3a 74       	andi	r19, 0x4A	; 74
     2fe:	28 30       	cpi	r18, 0x08	; 8
     300:	2c 31       	cpi	r18, 0x1C	; 28
     302:	37 29       	or	r19, r7
     304:	3d 72       	andi	r19, 0x2D	; 45
     306:	28 30       	cpi	r18, 0x08	; 8

void StepControl()
{
    static uint8_t decimate;
    Homing();
    decimate+=1;
     308:	2c 31       	cpi	r18, 0x1C	; 28
     30a:	29 3b       	cpi	r18, 0xB9	; 185
     30c:	38 3b       	cpi	r19, 0xB8	; 184
     30e:	30 3b       	cpi	r19, 0xB0	; 176
     310:	00 75       	andi	r16, 0x50	; 80
    if ((decimate>(decimateDrempel)) && (step!=0))
     312:	6e 73       	andi	r22, 0x3E	; 62
     314:	69 67       	ori	r22, 0x79	; 121
     316:	6e 65       	ori	r22, 0x5E	; 94
     318:	64 20       	and	r6, r4
     31a:	73 68       	ori	r23, 0x83	; 131
     31c:	6f 72       	andi	r22, 0x2F	; 47
     31e:	74 20       	and	r7, r4
     320:	5f 46       	sbci	r21, 0x6F	; 111
        step -= 1;
        PORTB |= (1<<DDB1);
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
     322:	72 61       	ori	r23, 0x12	; 18
     324:	63 74       	andi	r22, 0x43	; 67
     326:	3a 74       	andi	r19, 0x4A	; 74
    if (drempelSturing > 250)
     328:	28 30       	cpi	r18, 0x08	; 8
     32a:	2c 31       	cpi	r18, 0x1C	; 28
    {
        drempelSturing =0;
     32c:	38 29       	or	r19, r8
     32e:	3d 72       	andi	r19, 0x2D	; 45
        if (step>800)
     330:	28 30       	cpi	r18, 0x08	; 8
     332:	2c 31       	cpi	r18, 0x1C	; 28
     334:	29 3b       	cpi	r18, 0xB9	; 185
     336:	31 3b       	cpi	r19, 0xB1	; 177
     338:	30 3b       	cpi	r19, 0xB0	; 176
     33a:	00 75       	andi	r16, 0x50	; 80
     33c:	6e 73       	andi	r22, 0x3E	; 62
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
        }
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
     33e:	69 67       	ori	r22, 0x79	; 121
     340:	6e 65       	ori	r22, 0x5E	; 94
     342:	64 20       	and	r6, r4
     344:	5f 46       	sbci	r21, 0x6F	; 111
     346:	72 61       	ori	r23, 0x12	; 18
     348:	63 74       	andi	r22, 0x43	; 67
     34a:	3a 74       	andi	r19, 0x4A	; 74
     34c:	28 30       	cpi	r18, 0x08	; 8
        }
    }
    PORTB &= ~(1<<DDB1);
     34e:	2c 31       	cpi	r18, 0x1C	; 28
     350:	39 29       	or	r19, r9
            if (step == 0)
            {
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
     352:	3d 72       	andi	r19, 0x2D	; 45
     354:	28 30       	cpi	r18, 0x08	; 8
            decimateDrempel = 4;
        }
        else
        {
            // klaar
            decimateDrempel = 40;
     356:	2c 31       	cpi	r18, 0x1C	; 28
     358:	29 3b       	cpi	r18, 0xB9	; 185
     35a:	32 3b       	cpi	r19, 0xB2	; 178
            step = stepTabel[0][0];
     35c:	30 3b       	cpi	r19, 0xB0	; 176
     35e:	00 75       	andi	r16, 0x50	; 80
     360:	6e 73       	andi	r22, 0x3E	; 62
     362:	69 67       	ori	r22, 0x79	; 121
     364:	6e 65       	ori	r22, 0x5E	; 94
     366:	64 20       	and	r6, r4
     368:	6c 6f       	ori	r22, 0xFC	; 252
     36a:	6e 67       	ori	r22, 0x7E	; 126
            if (step>=0)
     36c:	20 5f       	subi	r18, 0xF0	; 240
     36e:	46 72       	andi	r20, 0x26	; 38
     370:	61 63       	ori	r22, 0x31	; 49
     372:	74 3a       	cpi	r23, 0xA4	; 164
     374:	74 28       	or	r7, r4
     376:	30 2c       	mov	r3, r0
            {
                PORTB &= ~(1<<PB0); //vooruit
     378:	32 30       	cpi	r19, 0x02	; 2
            else
            {
                PORTB |= (1<<PB0); // terug
                step = -step;
            }
            doHoming = false;
     37a:	29 3d       	cpi	r18, 0xD9	; 217
     37c:	72 28       	or	r7, r2
            needsHoming = false;
     37e:	30 2c       	mov	r3, r0
     380:	31 29       	or	r19, r1
     382:	3b 34       	cpi	r19, 0x4B	; 75
    static uint8_t decimate;
    Homing();
    decimate+=1;
    if ((decimate>(decimateDrempel)) && (step!=0))
    {
        decimate=0;
     384:	3b 30       	cpi	r19, 0x0B	; 11
     386:	3b 00       	.word	0x003b	; ????
        step -= 1;
     388:	75 6e       	ori	r23, 0xE5	; 229
     38a:	73 69       	ori	r23, 0x93	; 147
     38c:	67 6e       	ori	r22, 0xE7	; 231
     38e:	65 64       	ori	r22, 0x45	; 69
     390:	20 6c       	ori	r18, 0xC0	; 192
     392:	6f 6e       	ori	r22, 0xEF	; 239
     394:	67 20       	and	r6, r7
     396:	6c 6f       	ori	r22, 0xFC	; 252
     398:	6e 67       	ori	r22, 0x7E	; 126
        PORTB |= (1<<DDB1);
     39a:	20 5f       	subi	r18, 0xF0	; 240
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
     39c:	46 72       	andi	r20, 0x26	; 38
     39e:	61 63       	ori	r22, 0x31	; 49
     3a0:	74 3a       	cpi	r23, 0xA4	; 164
    if (drempelSturing > 250)
     3a2:	74 28       	or	r7, r4
     3a4:	30 2c       	mov	r3, r0
        step -= 1;
        PORTB |= (1<<DDB1);
    }

    static uint8_t drempelSturing =0;
    drempelSturing += 1;
     3a6:	32 31       	cpi	r19, 0x12	; 18
     3a8:	29 3d       	cpi	r18, 0xD9	; 217
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
        }
    }
    PORTB &= ~(1<<DDB1);
     3aa:	72 28       	or	r7, r2
     3ac:	30 2c       	mov	r3, r0
    if (drempelSturing > 250)
    {
        drempelSturing =0;
        if (step>800)
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
     3ae:	31 29       	or	r19, r1
     3b0:	3b 38       	cpi	r19, 0x8B	; 139
     3b2:	3b 30       	cpi	r19, 0x0B	; 11
     3b4:	3b 00       	.word	0x003b	; ????
     3b6:	5f 53       	subi	r21, 0x3F	; 63
     3b8:	61 74       	andi	r22, 0x41	; 65
     3ba:	20 73       	andi	r18, 0x30	; 48
     3bc:	68 6f       	ori	r22, 0xF8	; 248
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
        }
    }
    PORTB &= ~(1<<DDB1);
     3be:	72 74       	andi	r23, 0x42	; 66
     3c0:	20 5f       	subi	r18, 0xF0	; 240
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
        }
        else
        {
            decimateDrempel += (decimateDrempel<30) ? 1: 0;
     3c2:	46 72       	andi	r20, 0x26	; 38
     3c4:	61 63       	ori	r22, 0x31	; 49
    {
        if (homingReverse)
        {
            if (step == 0)
            {
                homingReverse = false;
     3c6:	74 3a       	cpi	r23, 0xA4	; 164
     3c8:	74 28       	or	r7, r4
     3ca:	30 2c       	mov	r3, r0
     3cc:	32 32       	cpi	r19, 0x22	; 34
     3ce:	29 3d       	cpi	r18, 0xD9	; 217
    if (drempelSturing > 250)
    {
        drempelSturing =0;
        if (step>800)
        {
            decimateDrempel -= (decimateDrempel>=2) ? 1: 0;
     3d0:	72 28       	or	r7, r2
     3d2:	30 2c       	mov	r3, r0
     3d4:	31 29       	or	r19, r1
     3d6:	3b 31       	cpi	r19, 0x1B	; 27
     3d8:	3b 30       	cpi	r19, 0x0B	; 11
                homingReverse = false;
            }
        }
        else if (PINC & (1<<PC2))
        {
            huidigePositie = 0;
     3da:	3b 00       	.word	0x003b	; ????
     3dc:	5f 53       	subi	r21, 0x3F	; 63
            PORTB |= (1<<PB0); // terug
     3de:	61 74       	andi	r22, 0x41	; 65
            step = 32000;
     3e0:	20 5f       	subi	r18, 0xF0	; 240
     3e2:	46 72       	andi	r20, 0x26	; 38
     3e4:	61 63       	ori	r22, 0x31	; 49
     3e6:	74 3a       	cpi	r23, 0xA4	; 164
     3e8:	74 28       	or	r7, r4
     3ea:	30 2c       	mov	r3, r0
            decimateDrempel = 4;
     3ec:	32 33       	cpi	r19, 0x32	; 50
     3ee:	29 3d       	cpi	r18, 0xD9	; 217
     3f0:	72 28       	or	r7, r2
     3f2:	30 2c       	mov	r3, r0
     3f4:	31 29       	or	r19, r1
            {
                PORTB &= ~(1<<PB0); //vooruit
            }
            else
            {
                PORTB |= (1<<PB0); // terug
     3f6:	3b 32       	cpi	r19, 0x2B	; 43
                step = -step;
     3f8:	3b 30       	cpi	r19, 0x0B	; 11
     3fa:	3b 00       	.word	0x003b	; ????
     3fc:	5f 53       	subi	r21, 0x3F	; 63
     3fe:	61 74       	andi	r22, 0x41	; 65
     400:	20 6c       	ori	r18, 0xC0	; 192
     402:	6f 6e       	ori	r22, 0xEF	; 239
     404:	67 20       	and	r6, r7
     406:	5f 46       	sbci	r21, 0x6F	; 111
     408:	72 61       	ori	r23, 0x12	; 18
     40a:	63 74       	andi	r22, 0x43	; 67
     40c:	3a 74       	andi	r19, 0x4A	; 74
     40e:	28 30       	cpi	r18, 0x08	; 8
    }
    PORTB &= ~(1<<DDB1);
}

ISR(USART_RXC_vect)
{
     410:	2c 32       	cpi	r18, 0x2C	; 44
     412:	34 29       	or	r19, r4
     414:	3d 72       	andi	r19, 0x2D	; 45
     416:	28 30       	cpi	r18, 0x08	; 8
     418:	2c 31       	cpi	r18, 0x1C	; 28
     41a:	29 3b       	cpi	r18, 0xB9	; 185
     41c:	34 3b       	cpi	r19, 0xB4	; 180
     41e:	30 3b       	cpi	r19, 0xB0	; 176
     420:	00 5f       	subi	r16, 0xF0	; 240
     422:	53 61       	ori	r21, 0x13	; 19
     424:	74 20       	and	r7, r4
     426:	6c 6f       	ori	r22, 0xFC	; 252
     428:	6e 67       	ori	r22, 0x7E	; 126
     42a:	20 6c       	ori	r18, 0xC0	; 192
     42c:	6f 6e       	ori	r22, 0xEF	; 239
     42e:	67 20       	and	r6, r7
     430:	5f 46       	sbci	r21, 0x6F	; 111
     432:	72 61       	ori	r23, 0x12	; 18
     434:	63 74       	andi	r22, 0x43	; 67
     436:	3a 74       	andi	r19, 0x4A	; 74
     438:	28 30       	cpi	r18, 0x08	; 8
     43a:	2c 32       	cpi	r18, 0x2C	; 44
    uartData1 = uartData2;
     43c:	35 29       	or	r19, r5
     43e:	3d 72       	andi	r19, 0x2D	; 45
     440:	28 30       	cpi	r18, 0x08	; 8
     442:	2c 31       	cpi	r18, 0x1C	; 28
    uartData2 = UDR;
     444:	29 3b       	cpi	r18, 0xB9	; 185
     446:	38 3b       	cpi	r19, 0xB8	; 184
     448:	30 3b       	cpi	r19, 0xB0	; 176
    if (!inSync)
     44a:	00 5f       	subi	r16, 0xF0	; 240
     44c:	53 61       	ori	r21, 0x13	; 19
     44e:	74 20       	and	r7, r4
     450:	75 6e       	ori	r23, 0xE5	; 229
    {
        // out of sync
        // set het brugblok uit
        DDRD &= ~(1<<PD7);
     452:	73 69       	ori	r23, 0x93	; 147
        PORTD &= ~(1<<PD7);
     454:	67 6e       	ori	r22, 0xE7	; 231
        if ((uartData1 ==0) && (uartData2==0))
     456:	65 64       	ori	r22, 0x45	; 69
     458:	20 73       	andi	r18, 0x30	; 48
     45a:	68 6f       	ori	r22, 0xF8	; 248
     45c:	72 74       	andi	r23, 0x42	; 66
     45e:	20 5f       	subi	r18, 0xF0	; 240
     460:	46 72       	andi	r20, 0x26	; 38
     462:	61 63       	ori	r22, 0x31	; 49
     464:	74 3a       	cpi	r23, 0xA4	; 164
        {
            // sync gevonden
            byteCount = 2;
     466:	74 28       	or	r7, r4
     468:	30 2c       	mov	r3, r0
     46a:	32 36       	cpi	r19, 0x62	; 98
            pulseBreedteCount=0;
            // zit nog iets meer aanvast
        }

    }
}
     46c:	29 3d       	cpi	r18, 0xD9	; 217
     46e:	72 28       	or	r7, r2
     470:	30 2c       	mov	r3, r0
     472:	31 29       	or	r19, r1
     474:	3b 31       	cpi	r19, 0x1B	; 27
     476:	3b 30       	cpi	r19, 0x0B	; 11
     478:	3b 00       	.word	0x003b	; ????
     47a:	5f 53       	subi	r21, 0x3F	; 63
     47c:	61 74       	andi	r22, 0x41	; 65
     47e:	20 75       	andi	r18, 0x50	; 80
     480:	6e 73       	andi	r22, 0x3E	; 62
     482:	69 67       	ori	r22, 0x79	; 121
     484:	6e 65       	ori	r22, 0x5E	; 94
     486:	64 20       	and	r6, r4
     488:	5f 46       	sbci	r21, 0x6F	; 111
     48a:	72 61       	ori	r23, 0x12	; 18
     48c:	63 74       	andi	r22, 0x43	; 67
     48e:	3a 74       	andi	r19, 0x4A	; 74
     490:	28 30       	cpi	r18, 0x08	; 8
     492:	2c 32       	cpi	r18, 0x2C	; 44
     494:	37 29       	or	r19, r7
        }
    }
    else
    {
        // main programma zet deze op 0 als we 2 bytes bereiken
        byteCount += 1;
     496:	3d 72       	andi	r19, 0x2D	; 45
     498:	28 30       	cpi	r18, 0x08	; 8
     49a:	2c 31       	cpi	r18, 0x1C	; 28
     49c:	29 3b       	cpi	r18, 0xB9	; 185
     49e:	32 3b       	cpi	r19, 0xB2	; 178
        // nu eerst de DA converter starten
        // save de status van het brugblok bij de start van de AD converter
        brugBlokDDR = DDRD;
     4a0:	30 3b       	cpi	r19, 0xB0	; 176
     4a2:	00 5f       	subi	r16, 0xF0	; 240
     4a4:	53 61       	ori	r21, 0x13	; 19
        ADCSR |= (1<<ADSC); // start de AD conversie de multiplexer word nu niet ingesteld ik neem aan dat die goed staat voor 1 blok
     4a6:	74 20       	and	r7, r4

        // wacht lus want anders is de adc nog niet klaar met sample hold voordat de uitgang wijzigd.
        // nu 48us voordat de uitgang wijzigd en grogweg 70us nadat de uitgang wijzigd (heb 1.5 adc clock out of 13.5 nodig voor sample hold)
        for (volatile int i=0;i<30;i++);
     4a8:	75 6e       	ori	r23, 0xE5	; 229
     4aa:	73 69       	ori	r23, 0x93	; 147
     4ac:	67 6e       	ori	r22, 0xE7	; 231
     4ae:	65 64       	ori	r22, 0x45	; 69
     4b0:	20 6c       	ori	r18, 0xC0	; 192
     4b2:	6f 6e       	ori	r22, 0xEF	; 239
     4b4:	67 20       	and	r6, r7
     4b6:	5f 46       	sbci	r21, 0x6F	; 111
     4b8:	72 61       	ori	r23, 0x12	; 18
     4ba:	63 74       	andi	r22, 0x43	; 67
     4bc:	3a 74       	andi	r19, 0x4A	; 74
     4be:	28 30       	cpi	r18, 0x08	; 8
     4c0:	2c 32       	cpi	r18, 0x2C	; 44
     4c2:	38 29       	or	r19, r8
     4c4:	3d 72       	andi	r19, 0x2D	; 45

        StepControl();
     4c6:	28 30       	cpi	r18, 0x08	; 8
        if (middenDetectie)
     4c8:	2c 31       	cpi	r18, 0x1C	; 28
     4ca:	29 3b       	cpi	r18, 0xB9	; 185
     4cc:	34 3b       	cpi	r19, 0xB4	; 180
     4ce:	30 3b       	cpi	r19, 0xB0	; 176
        {
            if ((PINC & (1<<PC3)) == 0)
     4d0:	00 5f       	subi	r16, 0xF0	; 240
     4d2:	53 61       	ori	r21, 0x13	; 19
            {
                // loc detected
                middenDetected = true;
     4d4:	74 20       	and	r7, r4
     4d6:	75 6e       	ori	r23, 0xE5	; 229
     4d8:	73 69       	ori	r23, 0x93	; 147
                snelheid = snelheid &0x80; // onthoud richting
     4da:	67 6e       	ori	r22, 0xE7	; 231
     4dc:	65 64       	ori	r22, 0x45	; 69
     4de:	20 6c       	ori	r18, 0xC0	; 192
     4e0:	6f 6e       	ori	r22, 0xEF	; 239
     4e2:	67 20       	and	r6, r7
            }
        }

        uint8_t snel = (snelheid & 0x40) ? 0: snelheid; // als er kortsluiting is dan 0 gebruiken
     4e4:	6c 6f       	ori	r22, 0xFC	; 252
     4e6:	6e 67       	ori	r22, 0x7E	; 126
     4e8:	20 5f       	subi	r18, 0xF0	; 240
     4ea:	46 72       	andi	r20, 0x26	; 38
     4ec:	61 63       	ori	r22, 0x31	; 49
     4ee:	74 3a       	cpi	r23, 0xA4	; 164
        uint8_t pulse = pgm_read_byte(&pulseTabel[snel&0x3f][pulseBreedteCount>>3]);
     4f0:	74 28       	or	r7, r4
     4f2:	30 2c       	mov	r3, r0
     4f4:	32 39       	cpi	r19, 0x92	; 146
     4f6:	29 3d       	cpi	r18, 0xD9	; 217
     4f8:	72 28       	or	r7, r2
     4fa:	30 2c       	mov	r3, r0
     4fc:	31 29       	or	r19, r1
     4fe:	3b 38       	cpi	r19, 0x8B	; 139
     500:	3b 30       	cpi	r19, 0x0B	; 11
     502:	3b 00       	.word	0x003b	; ????
     504:	73 68       	ori	r23, 0x83	; 131
     506:	6f 72       	andi	r22, 0x2F	; 47
     508:	74 20       	and	r7, r4
     50a:	5f 41       	sbci	r21, 0x1F	; 31
     50c:	63 63       	ori	r22, 0x33	; 51
     50e:	75 6d       	ori	r23, 0xD5	; 213
        if (pulse & (1<<(pulseBreedteCount&0x7)))
     510:	3a 74       	andi	r19, 0x4A	; 74
     512:	28 30       	cpi	r18, 0x08	; 8
     514:	2c 33       	cpi	r18, 0x3C	; 60
     516:	30 29       	or	r19, r0
     518:	3d 72       	andi	r19, 0x2D	; 45
     51a:	28 30       	cpi	r18, 0x08	; 8
     51c:	2c 31       	cpi	r18, 0x1C	; 28
     51e:	29 3b       	cpi	r18, 0xB9	; 185
     520:	32 3b       	cpi	r19, 0xB2	; 178
     522:	30 3b       	cpi	r19, 0xB0	; 176
     524:	00 6c       	ori	r16, 0xC0	; 192
        {
            // moet spanning geleverd worden
            // toevalig zit brugBlok op bit 7 en is riching bepaald door bit 7 in snelheid:)
            PORTD = (snelheid&0x80) | (PORTD&0x7f);
     526:	6f 6e       	ori	r22, 0xEF	; 239
     528:	67 20       	and	r6, r7
     52a:	5f 41       	sbci	r21, 0x1F	; 31
     52c:	63 63       	ori	r22, 0x33	; 51
     52e:	75 6d       	ori	r23, 0xD5	; 213
     530:	3a 74       	andi	r19, 0x4A	; 74
     532:	28 30       	cpi	r18, 0x08	; 8
            DDRD |= (1<<DDD7);
     534:	2c 33       	cpi	r18, 0x3C	; 60
            PORTD &= ~(1<<DDD7);
            DDRD &= ~(1<<DDD7);
        }


        pulseBreedteCount += 1;
     536:	31 29       	or	r19, r1
     538:	3d 72       	andi	r19, 0x2D	; 45
     53a:	28 30       	cpi	r18, 0x08	; 8
     53c:	2c 31       	cpi	r18, 0x1C	; 28
     53e:	29 3b       	cpi	r18, 0xB9	; 185
        if (pulseBreedteCount == AANTAL_PULSEN)
     540:	38 3b       	cpi	r19, 0xB8	; 184
     542:	30 3b       	cpi	r19, 0xB0	; 176
     544:	00 6c       	ori	r16, 0xC0	; 192
     546:	6f 6e       	ori	r22, 0xEF	; 239
     548:	67 20       	and	r6, r7
        {
            pulseBreedteCount=0;
     54a:	6c 6f       	ori	r22, 0xFC	; 252
     54c:	6e 67       	ori	r22, 0x7E	; 126
     54e:	20 5f       	subi	r18, 0xF0	; 240
                middenDetected = true;
                snelheid = snelheid &0x80; // onthoud richting
            }
        }

        uint8_t snel = (snelheid & 0x40) ? 0: snelheid; // als er kortsluiting is dan 0 gebruiken
     550:	41 63       	ori	r20, 0x31	; 49
     552:	63 75       	andi	r22, 0x53	; 83
     554:	6d 3a       	cpi	r22, 0xAD	; 173
     556:	74 28       	or	r7, r4
     558:	30 2c       	mov	r3, r0
            DDRD |= (1<<DDD7);
        }
        else
        {
            // geen spanning dus uitgang zwevend (geen pullup dus port op 0
            PORTD &= ~(1<<DDD7);
     55a:	33 32       	cpi	r19, 0x23	; 35
            DDRD &= ~(1<<DDD7);
     55c:	29 3d       	cpi	r18, 0xD9	; 217
     55e:	72 28       	or	r7, r2



// tijdelijk voor testen
ISR(USART_UDRE_vect)
{
     560:	30 2c       	mov	r3, r0
     562:	31 29       	or	r19, r1
     564:	3b 38       	cpi	r19, 0x8B	; 139
     566:	3b 30       	cpi	r19, 0x0B	; 11
     568:	3b 00       	.word	0x003b	; ????
//    UDR = 0xf0;
}
     56a:	75 6e       	ori	r23, 0xE5	; 229
     56c:	73 69       	ori	r23, 0x93	; 147
     56e:	67 6e       	ori	r22, 0xE7	; 231
     570:	65 64       	ori	r22, 0x45	; 69
     572:	20 73       	andi	r18, 0x30	; 48


ISR(ADC_vect)
{
     574:	68 6f       	ori	r22, 0xF8	; 248
     576:	72 74       	andi	r23, 0x42	; 66
     578:	20 5f       	subi	r18, 0xF0	; 240
     57a:	41 63       	ori	r20, 0x31	; 49
     57c:	63 75       	andi	r22, 0x53	; 83
     57e:	6d 3a       	cpi	r22, 0xAD	; 173
     580:	74 28       	or	r7, r4
     582:	30 2c       	mov	r3, r0
     584:	33 33       	cpi	r19, 0x33	; 51
     586:	29 3d       	cpi	r18, 0xD9	; 217
    // LSB x x x x x x x x
    // waarbij x een AD bit is. Tezien is dat het 16bit getal uit de AD
    // geheel naar beneden is geschaald. Wil ik zodadelijk alleen het MSB
    // uit het filter pakken dan gooi ik bijna alle bitten weg. Dus moet
    // het AD getal met 64 vermenigvuldigd worden
    uint16_t input = ADCL + (ADCH<<8);
     588:	72 28       	or	r7, r2
     58a:	30 2c       	mov	r3, r0
     58c:	31 29       	or	r19, r1
     58e:	3b 32       	cpi	r19, 0x2B	; 43
     590:	3b 30       	cpi	r19, 0x0B	; 11
     592:	3b 00       	.word	0x003b	; ????
     594:	75 6e       	ori	r23, 0xE5	; 229
    // elk kanaal een appart filter en ook een
    // apart filter voor spanning en geen spanning
    //
    // convert adInput number to a bit mask

    uint16_t output = blokOff;
     596:	73 69       	ori	r23, 0x93	; 147
     598:	67 6e       	ori	r22, 0xE7	; 231
     59a:	65 64       	ori	r22, 0x45	; 69
     59c:	20 5f       	subi	r18, 0xF0	; 240
    if (brugBlokDDR & (1<<DDD7))
     59e:	41 63       	ori	r20, 0x31	; 49
     5a0:	63 75       	andi	r22, 0x53	; 83
     5a2:	6d 3a       	cpi	r22, 0xAD	; 173
     5a4:	74 28       	or	r7, r4
    // optellen. Bij deze optelling kan een overflow onstaan gelukkig
    // is het filter zo dat ik kan garanderen dat input en output binnen
    // een 16bit word passen dus zal een evetuele tijdelijk overflow in een
    // tussen resultaat geen probleem opleveren.
    //output = input+output - (output>>4);
    output = input+output - (output>>6);
     5a6:	30 2c       	mov	r3, r0
     5a8:	33 34       	cpi	r19, 0x43	; 67
     5aa:	29 3d       	cpi	r18, 0xD9	; 217
     5ac:	72 28       	or	r7, r2
     5ae:	30 2c       	mov	r3, r0
     5b0:	31 29       	or	r19, r1
     5b2:	3b 34       	cpi	r19, 0x4B	; 75
     5b4:	3b 30       	cpi	r19, 0x0B	; 11
     5b6:	3b 00       	.word	0x003b	; ????
     5b8:	75 6e       	ori	r23, 0xE5	; 229
     5ba:	73 69       	ori	r23, 0x93	; 147
     5bc:	67 6e       	ori	r22, 0xE7	; 231
     5be:	65 64       	ori	r22, 0x45	; 69

    if (brugBlokDDR & (1<<DDD7))
     5c0:	20 6c       	ori	r18, 0xC0	; 192
     5c2:	6f 6e       	ori	r22, 0xEF	; 239
     5c4:	67 20       	and	r6, r7
     5c6:	5f 41       	sbci	r21, 0x1F	; 31
        }
        blokOn = output;
    }
    else
    {
        blokOff = output;
     5c8:	63 63       	ori	r22, 0x33	; 51
     5ca:	75 6d       	ori	r23, 0xD5	; 213
     5cc:	3a 74       	andi	r19, 0x4A	; 74
     5ce:	28 30       	cpi	r18, 0x08	; 8
    }
}
     5d0:	2c 33       	cpi	r18, 0x3C	; 60
     5d2:	35 29       	or	r19, r5
     5d4:	3d 72       	andi	r19, 0x2D	; 45
     5d6:	28 30       	cpi	r18, 0x08	; 8
     5d8:	2c 31       	cpi	r18, 0x1C	; 28
     5da:	29 3b       	cpi	r18, 0xB9	; 185
     5dc:	38 3b       	cpi	r19, 0xB8	; 184
     5de:	30 3b       	cpi	r19, 0xB0	; 176
     5e0:	00 75       	andi	r16, 0x50	; 80
     5e2:	6e 73       	andi	r22, 0x3E	; 62
    // convert adInput number to a bit mask

    uint16_t output = blokOff;
    if (brugBlokDDR & (1<<DDD7))
    {
        output = blokOn;
     5e4:	69 67       	ori	r22, 0x79	; 121
     5e6:	6e 65       	ori	r22, 0x5E	; 94
     5e8:	64 20       	and	r6, r4
     5ea:	6c 6f       	ori	r22, 0xFC	; 252
     5ec:	6e 67       	ori	r22, 0x7E	; 126
    output = input+output - (output>>6);

    if (brugBlokDDR & (1<<DDD7))
    {
        // blok heeft spanning
        if ((output > LOW_LEVEL_DREMPEL) && (output < HIGH_LEVEL_DREMPEL))
     5ee:	20 6c       	ori	r18, 0xC0	; 192
     5f0:	6f 6e       	ori	r22, 0xEF	; 239
     5f2:	67 20       	and	r6, r7
     5f4:	5f 41       	sbci	r21, 0x1F	; 31
     5f6:	63 63       	ori	r22, 0x33	; 51
     5f8:	75 6d       	ori	r23, 0xD5	; 213
        {
            // spanning binnen low en high dus concludeer ik kortsluiting
            // zet dit blok nu uit
            DDRD &= ~(1<<DDD7);
     5fa:	3a 74       	andi	r19, 0x4A	; 74
            snelheid |= 0x40;  // zet bit 6 om kortsluiting te melden
     5fc:	28 30       	cpi	r18, 0x08	; 8
     5fe:	2c 33       	cpi	r18, 0x3C	; 60
     600:	36 29       	or	r19, r6
     602:	3d 72       	andi	r19, 0x2D	; 45
     604:	28 30       	cpi	r18, 0x08	; 8
        }
        blokOn = output;
     606:	2c 31       	cpi	r18, 0x1C	; 28
     608:	29 3b       	cpi	r18, 0xB9	; 185
     60a:	38 3b       	cpi	r19, 0xB8	; 184
     60c:	30 3b       	cpi	r19, 0xB0	; 176
     60e:	00 5f       	subi	r16, 0xF0	; 240
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     610:	53 61       	ori	r21, 0x13	; 19
     612:	74 20       	and	r7, r4
     614:	73 68       	ori	r23, 0x83	; 131
     616:	6f 72       	andi	r22, 0x2F	; 47
     618:	74 20       	and	r7, r4
     61a:	5f 41       	sbci	r21, 0x1F	; 31
     61c:	63 63       	ori	r22, 0x33	; 51
     61e:	75 6d       	ori	r23, 0xD5	; 213
     620:	3a 74       	andi	r19, 0x4A	; 74
     622:	28 30       	cpi	r18, 0x08	; 8
     624:	2c 33       	cpi	r18, 0x3C	; 60
     626:	37 29       	or	r19, r7
     628:	3d 72       	andi	r19, 0x2D	; 45
     62a:	28 30       	cpi	r18, 0x08	; 8
     62c:	2c 31       	cpi	r18, 0x1C	; 28
     62e:	29 3b       	cpi	r18, 0xB9	; 185
     630:	32 3b       	cpi	r19, 0xB2	; 178
     632:	30 3b       	cpi	r19, 0xB0	; 176
     634:	00 5f       	subi	r16, 0xF0	; 240
     636:	53 61       	ori	r21, 0x13	; 19
     638:	74 20       	and	r7, r4
     63a:	5f 41       	sbci	r21, 0x1F	; 31
     63c:	63 63       	ori	r22, 0x33	; 51
     63e:	75 6d       	ori	r23, 0xD5	; 213
     640:	3a 74       	andi	r19, 0x4A	; 74
    if (huidigePositie == 0)
     642:	28 30       	cpi	r18, 0x08	; 8
     644:	2c 33       	cpi	r18, 0x3C	; 60
     646:	38 29       	or	r19, r8
     648:	3d 72       	andi	r19, 0x2D	; 45
     64a:	28 30       	cpi	r18, 0x08	; 8
     64c:	2c 31       	cpi	r18, 0x1C	; 28
     64e:	29 3b       	cpi	r18, 0xB9	; 185
     650:	34 3b       	cpi	r19, 0xB4	; 180
     652:	30 3b       	cpi	r19, 0xB0	; 176
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     654:	00 5f       	subi	r16, 0xF0	; 240
     656:	53 61       	ori	r21, 0x13	; 19
     658:	74 20       	and	r7, r4
     65a:	6c 6f       	ori	r22, 0xFC	; 252
     65c:	6e 67       	ori	r22, 0x7E	; 126
     65e:	20 5f       	subi	r18, 0xF0	; 240
     660:	41 63       	ori	r20, 0x31	; 49
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     662:	63 75       	andi	r22, 0x53	; 83
     664:	6d 3a       	cpi	r22, 0xAD	; 173
     666:	74 28       	or	r7, r4
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
     668:	30 2c       	mov	r3, r0
     66a:	33 39       	cpi	r19, 0x93	; 147
    {
        PORTB &= ~(1<<PB0);
     66c:	29 3d       	cpi	r18, 0xD9	; 217
        step = update;
     66e:	72 28       	or	r7, r2
     670:	30 2c       	mov	r3, r0
     672:	31 29       	or	r19, r1
     674:	3b 38       	cpi	r19, 0x8B	; 139
     676:	3b 30       	cpi	r19, 0x0B	; 11
    }
    else
    {
        PORTB |= (1<<PB0);
     678:	3b 00       	.word	0x003b	; ????
        step = -update;
     67a:	5f 53       	subi	r21, 0x3F	; 63
     67c:	61 74       	andi	r22, 0x41	; 65
     67e:	20 6c       	ori	r18, 0xC0	; 192
     680:	6f 6e       	ori	r22, 0xEF	; 239
     682:	67 20       	and	r6, r7
     684:	6c 6f       	ori	r22, 0xFC	; 252
     686:	6e 67       	ori	r22, 0x7E	; 126
     688:	20 5f       	subi	r18, 0xF0	; 240
    }
}

void huisVerlichting( bool aan)
{
    if (aan)
     68a:	41 63       	ori	r20, 0x31	; 49
     68c:	63 75       	andi	r22, 0x53	; 83
    {
        PORTC &= ~(1<<PC4);
        huisDecimation = 0;
    }
    else
        PORTC |= (1<<PC4);
     68e:	6d 3a       	cpi	r22, 0xAD	; 173
     690:	74 28       	or	r7, r4

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
     692:	30 2c       	mov	r3, r0
        huisDecimation = 0;
     694:	34 30       	cpi	r19, 0x04	; 4
     696:	29 3d       	cpi	r18, 0xD9	; 217
     698:	72 28       	or	r7, r2
    else
        PORTC |= (1<<PC4);
}

void main()
{
     69a:	30 2c       	mov	r3, r0
     69c:	31 29       	or	r19, r1
     69e:	3b 38       	cpi	r19, 0x8B	; 139
     6a0:	3b 30       	cpi	r19, 0x0B	; 11
     6a2:	3b 00       	.word	0x003b	; ????
     6a4:	5f 53       	subi	r21, 0x3F	; 63
     6a6:	61 74       	andi	r22, 0x41	; 65
     6a8:	20 75       	andi	r18, 0x50	; 80
     6aa:	6e 73       	andi	r22, 0x3E	; 62
     6ac:	69 67       	ori	r22, 0x79	; 121
     6ae:	6e 65       	ori	r22, 0x5E	; 94
     6b0:	64 20       	and	r6, r4
     6b2:	73 68       	ori	r23, 0x83	; 131
     6b4:	6f 72       	andi	r22, 0x2F	; 47
     6b6:	74 20       	and	r7, r4
     6b8:	5f 41       	sbci	r21, 0x1F	; 31
     6ba:	63 63       	ori	r22, 0x33	; 51
     6bc:	75 6d       	ori	r23, 0xD5	; 213
    //PORTD = (1 << DDD6) | (1 << DDD7); // bit 6..7 pullup
    DDRD = (1 << DDD2)| (1 << DDD3)| (1 << DDD4)| (1 << DDD5)| (1 << DDD6); // 2..6 output 7 input
     6be:	3a 74       	andi	r19, 0x4A	; 74
     6c0:	28 30       	cpi	r18, 0x08	; 8
    PORTD = 31 <<2; // alle Blok Relais uit d2..d6
     6c2:	2c 34       	cpi	r18, 0x4C	; 76
    // PC4 Led Lamp
    // ingang
    // PC2 Homing
    // PC3 Platform middel
    // PC5 locloods lamp
    DDRC = (1 << DDC1) | (1 << DDC4) | (1<<DDC5);
     6c4:	31 29       	or	r19, r1
     6c6:	3d 72       	andi	r19, 0x2D	; 45

    DDRB = (1 << DDB0)| (1 << DDB1)| (1 << DDB2)| (1 << DDB3)| (1 << DDB4)| (1 << DDB5); // 0..5 output
     6c8:	28 30       	cpi	r18, 0x08	; 8
     6ca:	2c 31       	cpi	r18, 0x1C	; 28
    PORTB = (1<<PB2) + STEPPING;  // motor disabled and fullstep enable alleen als we een draai commando krijgen
     6cc:	29 3b       	cpi	r18, 0xB9	; 185
     6ce:	32 3b       	cpi	r19, 0xB2	; 178
    // ADEN  ADSC  ADFR  ADIF  ADIE  ADPS2 ADPS1 ADPS0
    // we enablen de ad converter ADEN en enablen de interrupt ADIE
    // en we selecteren division factor 128 en dat geeft
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);
     6d0:	30 3b       	cpi	r19, 0xB0	; 176
     6d2:	00 5f       	subi	r16, 0xF0	; 240
     6d4:	53 61       	ori	r21, 0x13	; 19
     6d6:	74 20       	and	r7, r4
     6d8:	75 6e       	ori	r23, 0xE5	; 229
     6da:	73 69       	ori	r23, 0x93	; 147
     6dc:	67 6e       	ori	r22, 0xE7	; 231
     6de:	65 64       	ori	r22, 0x45	; 69
     6e0:	20 5f       	subi	r18, 0xF0	; 240
     6e2:	41 63       	ori	r20, 0x31	; 49
     6e4:	63 75       	andi	r22, 0x53	; 83
     6e6:	6d 3a       	cpi	r22, 0xAD	; 173
     6e8:	74 28       	or	r7, r4
     6ea:	30 2c       	mov	r3, r0


    for (uint8_t i=0;i<48;i++)
    {
        stepTabel[i][0] = eeprom_read_word((uint16_t*)&stepTabelRom[i][0]);
     6ec:	34 32       	cpi	r19, 0x24	; 36
     6ee:	29 3d       	cpi	r18, 0xD9	; 217
     6f0:	72 28       	or	r7, r2
     6f2:	30 2c       	mov	r3, r0
     6f4:	31 29       	or	r19, r1
        stepTabel[i][1] = eeprom_read_word((uint16_t*)&stepTabelRom[i][1]);
     6f6:	3b 34       	cpi	r19, 0x4B	; 75
     6f8:	3b 30       	cpi	r19, 0x0B	; 11
     6fa:	3b 00       	.word	0x003b	; ????
     6fc:	5f 53       	subi	r21, 0x3F	; 63
     6fe:	61 74       	andi	r22, 0x41	; 65
     700:	20 75       	andi	r18, 0x50	; 80
     702:	6e 73       	andi	r22, 0x3E	; 62
     704:	69 67       	ori	r22, 0x79	; 121
     706:	6e 65       	ori	r22, 0x5E	; 94
     708:	64 20       	and	r6, r4
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);


    for (uint8_t i=0;i<48;i++)
     70a:	6c 6f       	ori	r22, 0xFC	; 252
     70c:	6e 67       	ori	r22, 0x7E	; 126
     70e:	20 5f       	subi	r18, 0xF0	; 240
     710:	41 63       	ori	r20, 0x31	; 49
    }


    //zet de baud rate van de uart 28800 met 14.7456Mhz
    // klok.geeft 31 voor de deler
    UBRRL = 31;
     712:	63 75       	andi	r22, 0x53	; 83
     714:	6d 3a       	cpi	r22, 0xAD	; 173

    // zet de uart aan
    //   7     6     5     4     3     2     1     0
    // RXCIE TXCIE UDRIE RXEN  TXEN  CHR9  RXB8  TXB8
    // dit is voor een blok
    UCSRB = (1<<RXCIE)+(1<<RXEN)+(1<<TXEN);
     716:	74 28       	or	r7, r4
     718:	30 2c       	mov	r3, r0
    // tijdelijk voor test
    //UCSRB =(1<<RXCIE)+(1<<UDRIE)+(1<<RXEN)+(1<<TXEN);
    //UDR = 0xf0;
    //UCSRA = 0; //(1<<UDRE);

    byteCount = 0;
     71a:	34 33       	cpi	r19, 0x34	; 52
     71c:	29 3d       	cpi	r18, 0xD9	; 217
    syncCount = SYNC_COUNT;
     71e:	72 28       	or	r7, r2
     720:	30 2c       	mov	r3, r0
     722:	31 29       	or	r19, r1
    uartData1 = uartData2 = 1; // geen 0 want er is geen sync
     724:	3b 38       	cpi	r19, 0x8B	; 139
     726:	3b 30       	cpi	r19, 0x0B	; 11
     728:	3b 00       	.word	0x003b	; ????
     72a:	5f 53       	subi	r21, 0x3F	; 63
     72c:	61 74       	andi	r22, 0x41	; 65
     72e:	20 75       	andi	r18, 0x50	; 80
     730:	6e 73       	andi	r22, 0x3E	; 62
     732:	69 67       	ori	r22, 0x79	; 121
     734:	6e 65       	ori	r22, 0x5E	; 94
     736:	64 20       	and	r6, r4
     738:	6c 6f       	ori	r22, 0xFC	; 252
     73a:	6e 67       	ori	r22, 0x7E	; 126
     73c:	20 6c       	ori	r18, 0xC0	; 192
    wdt_enable(WDTO_60MS);
    sei ();
     73e:	6f 6e       	ori	r22, 0xEF	; 239

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
     740:	67 20       	and	r6, r7
        huisDecimation = 0;
     742:	5f 41       	sbci	r21, 0x1F	; 31
     744:	63 63       	ori	r22, 0x33	; 51
     746:	75 6d       	ori	r23, 0xD5	; 213
     748:	3a 74       	andi	r19, 0x4A	; 74
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     74a:	28 30       	cpi	r18, 0x08	; 8
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
                    {
                        step = 1; // correct status
     74c:	2c 34       	cpi	r18, 0x4C	; 76
     74e:	34 29       	or	r19, r4
     750:	3d 72       	andi	r19, 0x2D	; 45
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
        step = -update;
     752:	28 30       	cpi	r18, 0x08	; 8
     754:	2c 31       	cpi	r18, 0x1C	; 28
     756:	29 3b       	cpi	r18, 0xB9	; 185
                    {

                        UDR = blokOff >> 8;
                        snelheid = snelheid &0x80; // onthoud richting
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
     758:	38 3b       	cpi	r19, 0xB8	; 184
     75a:	30 3b       	cpi	r19, 0xB0	; 176
     75c:	00 76       	andi	r16, 0x60	; 96
     75e:	6f 69       	ori	r22, 0x9F	; 159
     760:	64 3a       	cpi	r22, 0xA4	; 164
     762:	74 28       	or	r7, r4
    sei ();
    huisVerlichting(true);

    do
    {
        while(byteCount!=2);
     764:	30 2c       	mov	r3, r0
     766:	34 35       	cpi	r19, 0x54	; 84
     768:	29 3d       	cpi	r18, 0xD9	; 217
     76a:	28 30       	cpi	r18, 0x08	; 8
        byteCount = 0;
     76c:	2c 34       	cpi	r18, 0x4C	; 76
     76e:	35 29       	or	r19, r5
        // er zijn 2 bytes
        syncCount -= 1;
     770:	00 2f       	mov	r16, r16
        if (syncCount)
     772:	75 73       	andi	r23, 0x35	; 53
     774:	72 2f       	mov	r23, r18
     776:	6c 69       	ori	r22, 0x9C	; 156
        {

            if ((uartData1==0) && (uartData2==0))
     778:	62 2f       	mov	r22, r18
     77a:	61 76       	andi	r22, 0x61	; 97
     77c:	72 2f       	mov	r23, r18
     77e:	69 6e       	ori	r22, 0xE9	; 233
     780:	63 6c       	ori	r22, 0xC3	; 195
     782:	75 64       	ori	r23, 0x45	; 69
     784:	65 2f       	mov	r22, r21
     786:	61 76       	andi	r22, 0x61	; 97
            {
                // we hebben een sync
                syncCount = SYNC_COUNT;
     788:	72 2f       	mov	r23, r18
     78a:	69 6f       	ori	r22, 0xF9	; 249
     78c:	2e 68       	ori	r18, 0x8E	; 142
                pulseBreedteCount = 0;
     78e:	00 2f       	mov	r16, r16
     790:	75 73       	andi	r23, 0x35	; 53
                uartData1 = uartData2 = 1;// geen 0 want er is geen sync
     792:	72 2f       	mov	r23, r18
     794:	6c 69       	ori	r22, 0x9C	; 156
     796:	62 2f       	mov	r22, r18
     798:	61 76       	andi	r22, 0x61	; 97
                inSync = true;
     79a:	72 2f       	mov	r23, r18
     79c:	69 6e       	ori	r22, 0xE9	; 233
                if (step == 0)
     79e:	63 6c       	ori	r22, 0xC3	; 195
     7a0:	75 64       	ori	r23, 0x45	; 69
     7a2:	65 2f       	mov	r22, r21
     7a4:	61 76       	andi	r22, 0x61	; 97
     7a6:	72 2f       	mov	r23, r18
     7a8:	73 66       	ori	r23, 0x63	; 99
                {
                    huisDecimation += 1;
     7aa:	72 5f       	subi	r23, 0xF2	; 242
     7ac:	64 65       	ori	r22, 0x54	; 84
     7ae:	66 73       	andi	r22, 0x36	; 54
     7b0:	2e 68       	ori	r18, 0x8E	; 142
     7b2:	00 2f       	mov	r16, r16
                    if (huisDecimation == 250)
     7b4:	75 73       	andi	r23, 0x35	; 53
     7b6:	72 2f       	mov	r23, r18
    // ADEN  ADSC  ADFR  ADIF  ADIE  ADPS2 ADPS1 ADPS0
    // we enablen de ad converter ADEN en enablen de interrupt ADIE
    // en we selecteren division factor 128 en dat geeft
    // ADPS2=1 ADPS1=1 ADPS0=1 zie table 22 op blz 56 van het databook
    // met een klok van 14.7453Mhz en de deler op 128 geeft een AD klok van 115 Khz
    ADCSR =  (1<<ADEN) + (1<<ADIE)+(1<<ADPS2) + (1<<ADPS1) + (1<<ADPS0);
     7b8:	6c 69       	ori	r22, 0x9C	; 156
                    if (huisDecimation == 250)
                    {
                        huisVerlichting(false);
                    }
                }
                wdt_reset();
     7ba:	62 2f       	mov	r22, r18
     7bc:	61 76       	andi	r22, 0x61	; 97
    {
        PORTC &= ~(1<<PC4);
        huisDecimation = 0;
    }
    else
        PORTC |= (1<<PC4);
     7be:	72 2f       	mov	r23, r18
     7c0:	69 6e       	ori	r22, 0xE9	; 233
     7c2:	63 6c       	ori	r22, 0xC3	; 195
     7c4:	75 64       	ori	r23, 0x45	; 69
                wdt_reset();
            }
            else
            {
                // in de assembly van de blok controller word naar een adres 0 gekeken naar een reset commando, Ik geloof niet dat ik daar gebruik van maak
                uint16_t adres = uartData1 | ((uartData2&0x3)<<8);
     7c6:	65 2f       	mov	r22, r21
     7c8:	69 6e       	ori	r22, 0xE9	; 233
     7ca:	74 74       	andi	r23, 0x44	; 68
     7cc:	79 70       	andi	r23, 0x09	; 9
     7ce:	65 73       	andi	r22, 0x35	; 53
     7d0:	2e 68       	ori	r18, 0x8E	; 142
     7d2:	00 2f       	mov	r16, r16
                uint8_t data = uartData2 >> 2;
     7d4:	75 73       	andi	r23, 0x35	; 53
     7d6:	72 2f       	mov	r23, r18
     7d8:	6c 69       	ori	r22, 0x9C	; 156
     7da:	62 2f       	mov	r22, r18

                uint16_t startAdres = eeprom_read_word (&EepromAdres);
     7dc:	67 63       	ori	r22, 0x37	; 55
     7de:	63 2f       	mov	r22, r19
     7e0:	61 76       	andi	r22, 0x61	; 97
                cli();
     7e2:	72 2f       	mov	r23, r18
                if (startAdres == adres)
     7e4:	34 2e       	mov	r3, r20
     7e6:	39 2e       	mov	r3, r25
     7e8:	32 2f       	mov	r19, r18
                        }

                    }

                }
                else if ((startAdres+1) == adres)
     7ea:	69 6e       	ori	r22, 0xE9	; 233
     7ec:	63 6c       	ori	r22, 0xC3	; 195
     7ee:	75 64       	ori	r23, 0x45	; 69
     7f0:	65 2f       	mov	r22, r21
     7f2:	73 74       	andi	r23, 0x43	; 67
     7f4:	64 69       	ori	r22, 0x94	; 148
     7f6:	6e 74       	andi	r22, 0x4E	; 78
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
                }
                else if (((startAdres+2) == adres) || ((startAdres+3) == adres))
     7f8:	2e 68       	ori	r18, 0x8E	; 142
     7fa:	00 2f       	mov	r16, r16
     7fc:	75 73       	andi	r23, 0x35	; 53
     7fe:	72 2f       	mov	r23, r18
     800:	6c 69       	ori	r22, 0x9C	; 156
     802:	62 2f       	mov	r22, r18
     804:	61 76       	andi	r22, 0x61	; 97
     806:	72 2f       	mov	r23, r18
     808:	69 6e       	ori	r22, 0xE9	; 233
     80a:	63 6c       	ori	r22, 0xC3	; 195
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
                    }

                }
                sei ();
     80c:	75 64       	ori	r23, 0x45	; 69
     80e:	65 2f       	mov	r22, r21
     810:	73 74       	andi	r23, 0x43	; 67
     812:	64 69       	ori	r22, 0x94	; 148
                uint16_t startAdres = eeprom_read_word (&EepromAdres);
                cli();
                if (startAdres == adres)
                {
                    //blok ccommandos
                    if (data==VOORUIT)
     814:	6e 74       	andi	r22, 0x4E	; 78
     816:	2e 68       	ori	r18, 0x8E	; 142
     818:	00 69       	ori	r16, 0x90	; 144
                    {
                        snelheid |= 0x80;
                        UDR = blokOn >> 8;
                        blokOn = HIGH_LEVEL;
                    }
                    else if (data==ACHTERUIT)
     81a:	6e 74       	andi	r22, 0x4E	; 78
     81c:	38 5f       	subi	r19, 0xF8	; 248
     81e:	74 3a       	cpi	r23, 0xA4	; 164
                    {
                        snelheid &= ~0x80;
                        UDR = blokOn >> 8;
                        blokOn = LOW_LEVEL;
                    }
                    else if (data>= GROEN)
     820:	74 28       	or	r7, r4
     822:	35 2c       	mov	r3, r5
     824:	31 29       	or	r19, r1
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     826:	3d 28       	or	r3, r13
     828:	30 2c       	mov	r3, r0
     82a:	31 30       	cpi	r19, 0x01	; 1
     82c:	29 00       	.word	0x0029	; ????
     82e:	75 69       	ori	r23, 0x95	; 149
     830:	6e 74       	andi	r22, 0x4E	; 78
     832:	38 5f       	subi	r19, 0xF8	; 248
     834:	74 3a       	cpi	r23, 0xA4	; 164
     836:	74 28       	or	r7, r4
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     838:	35 2c       	mov	r3, r5
     83a:	32 29       	or	r19, r2

void huisVerlichting( bool aan)
{
    if (aan)
    {
        PORTC &= ~(1<<PC4);
     83c:	3d 28       	or	r3, r13
        huisDecimation = 0;
     83e:	30 2c       	mov	r3, r0
     840:	31 31       	cpi	r19, 0x11	; 17
                {
                    bool tweedeIndex = ((startAdres+3) == adres);

                    // draai commando
                    huisVerlichting(true);
                    if (data<=60)
     842:	29 00       	.word	0x0029	; ????
     844:	69 6e       	ori	r22, 0xE9	; 233
     846:	74 31       	cpi	r23, 0x14	; 20

                    else if (data==48)
                    {
                        updatePosition(1);
                    }
                    else if (data==49)
     848:	36 5f       	subi	r19, 0xF6	; 246
     84a:	74 3a       	cpi	r23, 0xA4	; 164
     84c:	74 28       	or	r7, r4
                    {
                        updatePosition(-1);
                    }
                    else if (data==50)
     84e:	35 2c       	mov	r3, r5
     850:	33 29       	or	r19, r3
     852:	3d 28       	or	r3, r13
                    {
                        updatePosition(2);
                    }
                    else if (data==51)
     854:	30 2c       	mov	r3, r0
     856:	31 29       	or	r19, r1
     858:	00 75       	andi	r16, 0x50	; 80
                    {
                        updatePosition(-2);
                    }
                    else if (data==52)
     85a:	69 6e       	ori	r22, 0xE9	; 233
     85c:	74 31       	cpi	r23, 0x14	; 20
     85e:	36 5f       	subi	r19, 0xF6	; 246
                    {
                        updatePosition(4);
                    }
                    else if (data==53)
     860:	74 3a       	cpi	r23, 0xA4	; 164
     862:	74 28       	or	r7, r4
     864:	35 2c       	mov	r3, r5
                    {
                        updatePosition(-4);
                    }
                    else if (data==54)
     866:	34 29       	or	r19, r4
     868:	3d 28       	or	r3, r13
     86a:	30 2c       	mov	r3, r0
                    {
                        updatePosition(8);
                    }
                    else if (data==55)
     86c:	34 29       	or	r19, r4
     86e:	00 69       	ori	r16, 0x90	; 144
     870:	6e 74       	andi	r22, 0x4E	; 78
                    {
                        updatePosition(-8);
                    }
                    else if (data==56)
     872:	33 32       	cpi	r19, 0x23	; 35
     874:	5f 74       	andi	r21, 0x4F	; 79
     876:	3a 74       	andi	r19, 0x4A	; 74
                    {
                        updatePosition(16);
                    }
                    else if (data==57)
     878:	28 35       	cpi	r18, 0x58	; 88
     87a:	2c 35       	cpi	r18, 0x5C	; 92
     87c:	29 3d       	cpi	r18, 0xD9	; 217
                    {
                        updatePosition(-16);
                    }
                    else if (data==58)
     87e:	28 30       	cpi	r18, 0x08	; 8
     880:	2c 33       	cpi	r18, 0x3C	; 60
     882:	29 00       	.word	0x0029	; ????
                    {
                        updatePosition(32);
                    }
                    else if (data==59)
     884:	75 69       	ori	r23, 0x95	; 149
     886:	6e 74       	andi	r22, 0x4E	; 78
     888:	33 32       	cpi	r19, 0x23	; 35
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
     88a:	5f 74       	andi	r21, 0x4F	; 79
     88c:	3a 74       	andi	r19, 0x4A	; 74
     88e:	28 35       	cpi	r18, 0x58	; 88
                            step = stepTabel[1][0];
                            homingReverse = true;
                        }
                        doHoming = true;
                    }
                    else if (data==62)
     890:	2c 36       	cpi	r18, 0x6C	; 108
     892:	29 3d       	cpi	r18, 0xD9	; 217
     894:	28 30       	cpi	r18, 0x08	; 8
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     896:	2c 35       	cpi	r18, 0x5C	; 92
     898:	29 00       	.word	0x0029	; ????
     89a:	69 6e       	ori	r22, 0xE9	; 233
     89c:	74 36       	cpi	r23, 0x64	; 100
     89e:	34 5f       	subi	r19, 0xF4	; 244
     8a0:	74 3a       	cpi	r23, 0xA4	; 164
     8a2:	74 28       	or	r7, r4
     8a4:	35 2c       	mov	r3, r5
     8a6:	37 29       	or	r19, r7
     8a8:	3d 28       	or	r3, r13
     8aa:	30 2c       	mov	r3, r0
     8ac:	36 29       	or	r19, r6
     8ae:	00 75       	andi	r16, 0x50	; 80
     8b0:	69 6e       	ori	r22, 0xE9	; 233
     8b2:	74 36       	cpi	r23, 0x64	; 100
     8b4:	34 5f       	subi	r19, 0xF4	; 244
     8b6:	74 3a       	cpi	r23, 0xA4	; 164
     8b8:	74 28       	or	r7, r4
                    }

                }
                else if ((startAdres+1) == adres)
                {
                    if (data == 63)
     8ba:	35 2c       	mov	r3, r5
     8bc:	38 29       	or	r19, r8
     8be:	3d 28       	or	r3, r13
                    {
                        PORTC |= (1<<PC1);
                    }
                    else if (data == 62)
     8c0:	30 2c       	mov	r3, r0
     8c2:	37 29       	or	r19, r7
     8c4:	00 69       	ori	r16, 0x90	; 144
                    {
                        PORTC &= ~(1<<PC1);
                    }
                    else if (data==60)
     8c6:	6e 74       	andi	r22, 0x4E	; 78
     8c8:	70 74       	andi	r23, 0x40	; 64
     8ca:	72 5f       	subi	r23, 0xF2	; 242
                    {
                        middenDetectie = true;
                    }
                    else if (data==61)
     8cc:	74 3a       	cpi	r23, 0xA4	; 164
     8ce:	74 28       	or	r7, r4
     8d0:	35 2c       	mov	r3, r5
                    {
                        middenDetected = false;
                        middenDetectie = false;
                    }
                    else if (data==58)
     8d2:	39 29       	or	r19, r9
     8d4:	3d 28       	or	r3, r13
     8d6:	35 2c       	mov	r3, r5
                    {
                        PORTC |= (1<<PC5);
                    }
                    else if (data==59)
     8d8:	33 29       	or	r19, r3
     8da:	00 75       	andi	r16, 0x50	; 80
     8dc:	69 6e       	ori	r22, 0xE9	; 233
                    }
                    else
                    {
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
     8de:	74 70       	andi	r23, 0x04	; 4
     8e0:	74 72       	andi	r23, 0x24	; 36
     8e2:	5f 74       	andi	r21, 0x4F	; 79
     8e4:	3a 74       	andi	r19, 0x4A	; 74
     8e6:	28 35       	cpi	r18, 0x58	; 88
     8e8:	2c 31       	cpi	r18, 0x1C	; 28
     8ea:	30 29       	or	r19, r0
     8ec:	3d 28       	or	r3, r13
                    }

                    UDR = 0; // misschien iets van de detectors
     8ee:	35 2c       	mov	r3, r5
     8f0:	34 29       	or	r19, r4

                    // draai commando
                    huisVerlichting(true);
                    if (data<=60)
                    {
                        PORTB = STEPPING;  // motor enabled and fullstep
     8f2:	00 69       	ori	r16, 0x90	; 144
     8f4:	6e 74       	andi	r22, 0x4E	; 78
                    }

                    if (data<48)
     8f6:	5f 6c       	ori	r21, 0xCF	; 207
     8f8:	65 61       	ori	r22, 0x15	; 21
     8fa:	73 74       	andi	r23, 0x43	; 67
                    {
                        if (huidigePositie == data)
     8fc:	38 5f       	subi	r19, 0xF8	; 248
     8fe:	74 3a       	cpi	r23, 0xA4	; 164
     900:	74 28       	or	r7, r4
     902:	35 2c       	mov	r3, r5

                    UDR = 0; // misschien iets van de detectors
                }
                else if (((startAdres+2) == adres) || ((startAdres+3) == adres))
                {
                    bool tweedeIndex = ((startAdres+3) == adres);
     904:	31 31       	cpi	r19, 0x11	; 17
     906:	29 3d       	cpi	r18, 0xD9	; 217
     908:	28 35       	cpi	r18, 0x58	; 88
     90a:	2c 31       	cpi	r18, 0x1C	; 28
     90c:	29 00       	.word	0x0029	; ????
                        if (huidigePositie == data)
                        {
                        }
                        else
                        {
                            int16_t naar = stepTabel[data][tweedeIndex];
     90e:	75 69       	ori	r23, 0x95	; 149
     910:	6e 74       	andi	r22, 0x4E	; 78
     912:	5f 6c       	ori	r21, 0xCF	; 207
     914:	65 61       	ori	r22, 0x15	; 21
     916:	73 74       	andi	r23, 0x43	; 67
     918:	38 5f       	subi	r19, 0xF8	; 248
     91a:	74 3a       	cpi	r23, 0xA4	; 164
     91c:	74 28       	or	r7, r4
     91e:	35 2c       	mov	r3, r5
     920:	31 32       	cpi	r19, 0x21	; 33
     922:	29 3d       	cpi	r18, 0xD9	; 217
     924:	28 35       	cpi	r18, 0x58	; 88
                            int16_t van = stepTabel[huidigePositie][huidigePosititieTweedeIndex];
     926:	2c 32       	cpi	r18, 0x2C	; 44
     928:	29 00       	.word	0x0029	; ????
     92a:	69 6e       	ori	r22, 0xE9	; 233
     92c:	74 5f       	subi	r23, 0xF4	; 244
     92e:	6c 65       	ori	r22, 0x5C	; 92
     930:	61 73       	andi	r22, 0x31	; 49
     932:	74 31       	cpi	r23, 0x14	; 20
     934:	36 5f       	subi	r19, 0xF6	; 246
     936:	74 3a       	cpi	r23, 0xA4	; 164
     938:	74 28       	or	r7, r4
     93a:	35 2c       	mov	r3, r5
     93c:	31 33       	cpi	r19, 0x31	; 49
     93e:	29 3d       	cpi	r18, 0xD9	; 217
     940:	28 35       	cpi	r18, 0x58	; 88
                            if (huidigePositie < data)
     942:	2c 33       	cpi	r18, 0x3C	; 60
     944:	29 00       	.word	0x0029	; ????
     946:	75 69       	ori	r23, 0x95	; 149
                            {
                                PORTB &= ~(1<<PB0);
     948:	6e 74       	andi	r22, 0x4E	; 78
                                step = naar - van;
     94a:	5f 6c       	ori	r21, 0xCF	; 207
     94c:	65 61       	ori	r22, 0x15	; 21
     94e:	73 74       	andi	r23, 0x43	; 67
     950:	31 36       	cpi	r19, 0x61	; 97
     952:	5f 74       	andi	r21, 0x4F	; 79
     954:	3a 74       	andi	r19, 0x4A	; 74
                            else
                            {
                                PORTB |= (1<<PB0);
                                step = van - naar;
                            }
                            huidigePositie = data;
     956:	28 35       	cpi	r18, 0x58	; 88
     958:	2c 31       	cpi	r18, 0x1C	; 28
                            huidigePosititieTweedeIndex = tweedeIndex;
     95a:	34 29       	or	r19, r4
     95c:	3d 28       	or	r3, r13
     95e:	35 2c       	mov	r3, r5
                if (startAdres == adres)
                {
                    //blok ccommandos
                    if (data==VOORUIT)
                    {
                        snelheid |= 0x80;
     960:	34 29       	or	r19, r4
     962:	00 69       	ori	r16, 0x90	; 144
     964:	6e 74       	andi	r22, 0x4E	; 78
     966:	5f 6c       	ori	r21, 0xCF	; 207
     968:	65 61       	ori	r22, 0x15	; 21
                        UDR = blokOn >> 8;
     96a:	73 74       	andi	r23, 0x43	; 67
     96c:	33 32       	cpi	r19, 0x23	; 35
     96e:	5f 74       	andi	r21, 0x4F	; 79
     970:	3a 74       	andi	r19, 0x4A	; 74
     972:	28 35       	cpi	r18, 0x58	; 88
                        blokOn = HIGH_LEVEL;
     974:	2c 31       	cpi	r18, 0x1C	; 28
     976:	35 29       	or	r19, r5
     978:	3d 28       	or	r3, r13
     97a:	35 2c       	mov	r3, r5
     97c:	35 29       	or	r19, r5
                    else if (data>= GROEN)
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
                    }
                    else if (data ==0)
     97e:	00 75       	andi	r16, 0x50	; 80
     980:	69 6e       	ori	r22, 0xE9	; 233
                    {

                        UDR = blokOff >> 8;
     982:	74 5f       	subi	r23, 0xF4	; 244
     984:	6c 65       	ori	r22, 0x5C	; 92
     986:	61 73       	andi	r22, 0x31	; 49
     988:	74 33       	cpi	r23, 0x34	; 52
     98a:	32 5f       	subi	r19, 0xF2	; 242
                        snelheid = snelheid &0x80; // onthoud richting
     98c:	74 3a       	cpi	r23, 0xA4	; 164
     98e:	74 28       	or	r7, r4
     990:	35 2c       	mov	r3, r5
     992:	31 36       	cpi	r19, 0x61	; 97
     994:	29 3d       	cpi	r18, 0xD9	; 217
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
     996:	28 35       	cpi	r18, 0x58	; 88
     998:	2c 36       	cpi	r18, 0x6C	; 108
     99a:	29 00       	.word	0x0029	; ????
     99c:	69 6e       	ori	r22, 0xE9	; 233
     99e:	74 5f       	subi	r23, 0xF4	; 244
     9a0:	6c 65       	ori	r22, 0x5C	; 92
     9a2:	61 73       	andi	r22, 0x31	; 49
     9a4:	74 36       	cpi	r23, 0x64	; 100
     9a6:	34 5f       	subi	r19, 0xF4	; 244
     9a8:	74 3a       	cpi	r23, 0xA4	; 164
     9aa:	74 28       	or	r7, r4
                        UDR = blokOn >> 8;
                        blokOn = HIGH_LEVEL;
                    }
                    else if (data==ACHTERUIT)
                    {
                        snelheid &= ~0x80;
     9ac:	35 2c       	mov	r3, r5
     9ae:	31 37       	cpi	r19, 0x71	; 113
     9b0:	29 3d       	cpi	r18, 0xD9	; 217
     9b2:	28 35       	cpi	r18, 0x58	; 88
     9b4:	2c 37       	cpi	r18, 0x7C	; 124
                        UDR = blokOn >> 8;
     9b6:	29 00       	.word	0x0029	; ????
     9b8:	75 69       	ori	r23, 0x95	; 149
     9ba:	6e 74       	andi	r22, 0x4E	; 78
     9bc:	5f 6c       	ori	r21, 0xCF	; 207
     9be:	65 61       	ori	r22, 0x15	; 21
                        blokOn = LOW_LEVEL;
     9c0:	73 74       	andi	r23, 0x43	; 67
     9c2:	36 34       	cpi	r19, 0x46	; 70
     9c4:	5f 74       	andi	r21, 0x4F	; 79
     9c6:	3a 74       	andi	r19, 0x4A	; 74
     9c8:	28 35       	cpi	r18, 0x58	; 88
                                step = naar - van;

                            }
                            else
                            {
                                PORTB |= (1<<PB0);
     9ca:	2c 31       	cpi	r18, 0x1C	; 28
                                step = van - naar;
     9cc:	38 29       	or	r19, r8
     9ce:	3d 28       	or	r3, r13
     9d0:	35 2c       	mov	r3, r5
     9d2:	38 29       	or	r19, r8
     9d4:	00 69       	ori	r16, 0x90	; 144
     9d6:	6e 74       	andi	r22, 0x4E	; 78
     9d8:	5f 66       	ori	r21, 0x6F	; 111
                }
                else if ((startAdres+1) == adres)
                {
                    if (data == 63)
                    {
                        PORTC |= (1<<PC1);
     9da:	61 73       	andi	r22, 0x31	; 49
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     9dc:	74 38       	cpi	r23, 0x84	; 132
     9de:	5f 74       	andi	r21, 0x4F	; 79
                    }
                    else
                    {
                        // snelheid commando
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     9e0:	3a 74       	andi	r19, 0x4A	; 74
     9e2:	28 35       	cpi	r18, 0x58	; 88
     9e4:	2c 31       	cpi	r18, 0x1C	; 28
     9e6:	39 29       	or	r19, r9
     9e8:	3d 28       	or	r3, r13
     9ea:	35 2c       	mov	r3, r5
     9ec:	31 29       	or	r19, r1
     9ee:	00 75       	andi	r16, 0x50	; 80
     9f0:	69 6e       	ori	r22, 0xE9	; 233
     9f2:	74 5f       	subi	r23, 0xF4	; 244
                        if (middenDetected == false)
     9f4:	66 61       	ori	r22, 0x16	; 22
     9f6:	73 74       	andi	r23, 0x43	; 67
     9f8:	38 5f       	subi	r19, 0xF8	; 248
     9fa:	74 3a       	cpi	r23, 0xA4	; 164
                        {
                            // alleen een snelheid update als er nog geen midden detectie gedaan is.
                            snelheid = (snelheid &0xc0) | data; // onthoud richting en kortsluiting
     9fc:	74 28       	or	r7, r4
     9fe:	35 2c       	mov	r3, r5
     a00:	32 30       	cpi	r19, 0x02	; 2
     a02:	29 3d       	cpi	r18, 0xD9	; 217
     a04:	28 35       	cpi	r18, 0x58	; 88
     a06:	2c 32       	cpi	r18, 0x2C	; 44
     a08:	29 00       	.word	0x0029	; ????
                        blokOn = LOW_LEVEL;
                    }
                    else if (data>= GROEN)
                    {
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     a0a:	69 6e       	ori	r22, 0xE9	; 233
                    }

                    if (data !=62)
                    {
                        // voor alle gevallen return waarde maar behalve voor eeprom write want die is al gedaan
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     a0c:	74 5f       	subi	r23, 0xF4	; 244
     a0e:	66 61       	ori	r22, 0x16	; 22
                    {
                        PORTC &= ~(1<<PC1);
                    }
                    else if (data==60)
                    {
                        middenDetectie = true;
     a10:	73 74       	andi	r23, 0x43	; 67
     a12:	31 36       	cpi	r19, 0x61	; 97
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     a14:	5f 74       	andi	r21, 0x4F	; 79
     a16:	3a 74       	andi	r19, 0x4A	; 74
                    {
                        PORTC |= (1<<PC1);
                    }
                    else if (data == 62)
                    {
                        PORTC &= ~(1<<PC1);
     a18:	28 35       	cpi	r18, 0x58	; 88
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     a1a:	2c 32       	cpi	r18, 0x2C	; 44
     a1c:	31 29       	or	r19, r1
                    }
                    else
                    {
                        // snelheid commando
                        // bij kortsluiting (bit 6 van snelheid) geef 0 terug
                        UDR = (snelheid&0x40) ? 0: (blokOff >> 8);
     a1e:	3d 28       	or	r3, r13
     a20:	35 2c       	mov	r3, r5
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     a22:	33 29       	or	r19, r3
     a24:	00 75       	andi	r16, 0x50	; 80
     a26:	69 6e       	ori	r22, 0xE9	; 233
     a28:	74 5f       	subi	r23, 0xF4	; 244
     a2a:	66 61       	ori	r22, 0x16	; 22
     a2c:	73 74       	andi	r23, 0x43	; 67
     a2e:	31 36       	cpi	r19, 0x61	; 97
     a30:	5f 74       	andi	r21, 0x4F	; 79
     a32:	3a 74       	andi	r19, 0x4A	; 74
     a34:	28 35       	cpi	r18, 0x58	; 88
     a36:	2c 32       	cpi	r18, 0x2C	; 44
     a38:	32 29       	or	r19, r2
     a3a:	3d 28       	or	r3, r13
     a3c:	35 2c       	mov	r3, r5
     a3e:	34 29       	or	r19, r4
     a40:	00 69       	ori	r16, 0x90	; 144
     a42:	6e 74       	andi	r22, 0x4E	; 78
     a44:	5f 66       	ori	r21, 0x6F	; 111
     a46:	61 73       	andi	r22, 0x31	; 49
     a48:	74 33       	cpi	r23, 0x34	; 52
     a4a:	32 5f       	subi	r19, 0xF2	; 242
    if (huidigePositie == 0)
     a4c:	74 3a       	cpi	r23, 0xA4	; 164
     a4e:	74 28       	or	r7, r4
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
     a50:	35 2c       	mov	r3, r5
        step = update;
     a52:	32 33       	cpi	r19, 0x32	; 50
     a54:	29 3d       	cpi	r18, 0xD9	; 217
     a56:	28 35       	cpi	r18, 0x58	; 88
     a58:	2c 35       	cpi	r18, 0x5C	; 92
     a5a:	29 00       	.word	0x0029	; ????
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     a5c:	75 69       	ori	r23, 0x95	; 149
     a5e:	6e 74       	andi	r22, 0x4E	; 78
     a60:	5f 66       	ori	r21, 0x6F	; 111
     a62:	61 73       	andi	r22, 0x31	; 49
     a64:	74 33       	cpi	r23, 0x34	; 52
     a66:	32 5f       	subi	r19, 0xF2	; 242
     a68:	74 3a       	cpi	r23, 0xA4	; 164
     a6a:	74 28       	or	r7, r4
     a6c:	35 2c       	mov	r3, r5
     a6e:	32 34       	cpi	r19, 0x42	; 66
     a70:	29 3d       	cpi	r18, 0xD9	; 217
     a72:	28 35       	cpi	r18, 0x58	; 88
     a74:	2c 36       	cpi	r18, 0x6C	; 108
     a76:	29 00       	.word	0x0029	; ????
     a78:	69 6e       	ori	r22, 0xE9	; 233
     a7a:	74 5f       	subi	r23, 0xF4	; 244
     a7c:	66 61       	ori	r22, 0x16	; 22
     a7e:	73 74       	andi	r23, 0x43	; 67
     a80:	36 34       	cpi	r19, 0x46	; 70
     a82:	5f 74       	andi	r21, 0x4F	; 79
     a84:	3a 74       	andi	r19, 0x4A	; 74
    if (huidigePositie == 0)
     a86:	28 35       	cpi	r18, 0x58	; 88
     a88:	2c 32       	cpi	r18, 0x2C	; 44
        PORTB &= ~(1<<PB0);
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
     a8a:	35 29       	or	r19, r5
        step = -update;
     a8c:	3d 28       	or	r3, r13
     a8e:	35 2c       	mov	r3, r5
     a90:	37 29       	or	r19, r7
     a92:	00 75       	andi	r16, 0x50	; 80
     a94:	69 6e       	ori	r22, 0xE9	; 233
     a96:	74 5f       	subi	r23, 0xF4	; 244
     a98:	66 61       	ori	r22, 0x16	; 22
     a9a:	73 74       	andi	r23, 0x43	; 67
     a9c:	36 34       	cpi	r19, 0x46	; 70
     a9e:	5f 74       	andi	r21, 0x4F	; 79
     aa0:	3a 74       	andi	r19, 0x4A	; 74
     aa2:	28 35       	cpi	r18, 0x58	; 88
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     aa4:	2c 32       	cpi	r18, 0x2C	; 44
     aa6:	36 29       	or	r19, r6
     aa8:	3d 28       	or	r3, r13
     aaa:	35 2c       	mov	r3, r5
     aac:	38 29       	or	r19, r8
     aae:	00 69       	ori	r16, 0x90	; 144
     ab0:	6e 74       	andi	r22, 0x4E	; 78
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     ab2:	6d 61       	ori	r22, 0x1D	; 29
     ab4:	78 5f       	subi	r23, 0xF8	; 248
     ab6:	74 3a       	cpi	r23, 0xA4	; 164
     ab8:	74 28       	or	r7, r4
     aba:	35 2c       	mov	r3, r5
     abc:	32 37       	cpi	r19, 0x72	; 114
     abe:	29 3d       	cpi	r18, 0xD9	; 217
     ac0:	28 35       	cpi	r18, 0x58	; 88
     ac2:	2c 37       	cpi	r18, 0x7C	; 124
     ac4:	29 00       	.word	0x0029	; ????
     ac6:	75 69       	ori	r23, 0x95	; 149
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     ac8:	6e 74       	andi	r22, 0x4E	; 78
     aca:	6d 61       	ori	r22, 0x1D	; 29
     acc:	78 5f       	subi	r23, 0xF8	; 248
     ace:	74 3a       	cpi	r23, 0xA4	; 164
     ad0:	74 28       	or	r7, r4
     ad2:	35 2c       	mov	r3, r5
     ad4:	32 38       	cpi	r19, 0x82	; 130
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     ad6:	29 3d       	cpi	r18, 0xD9	; 217
     ad8:	28 35       	cpi	r18, 0x58	; 88
     ada:	2c 38       	cpi	r18, 0x8C	; 140
     adc:	29 00       	.word	0x0029	; ????
                    {

                        UDR = blokOff >> 8;
                        snelheid = snelheid &0x80; // onthoud richting
                        // reset de blok on meeting
                        blokOn = (snelheid & 0x80) ?  HIGH_LEVEL: LOW_LEVEL;
     ade:	69 6e       	ori	r22, 0xE9	; 233
     ae0:	74 5f       	subi	r23, 0xF4	; 244
     ae2:	66 61       	ori	r22, 0x16	; 22
                    {
                        middenDetectie = true;
                    }
                    else if (data==61)
                    {
                        middenDetected = false;
     ae4:	72 70       	andi	r23, 0x02	; 2
     ae6:	74 72       	andi	r23, 0x24	; 36
                        middenDetectie = false;
     ae8:	5f 74       	andi	r21, 0x4F	; 79
     aea:	3a 74       	andi	r19, 0x4A	; 74
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     aec:	28 33       	cpi	r18, 0x38	; 56
     aee:	2c 31       	cpi	r18, 0x1C	; 28
                    {
                        PORTC |= (1<<PC5);
                    }
                    else if (data==59)
                    {
                        PORTC &= ~(1<<PC5);
     af0:	29 3d       	cpi	r18, 0xD9	; 217
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     af2:	28 35       	cpi	r18, 0x58	; 88
     af4:	2c 35       	cpi	r18, 0x5C	; 92
                        middenDetected = false;
                        middenDetectie = false;
                    }
                    else if (data==58)
                    {
                        PORTC |= (1<<PC5);
     af6:	29 00       	.word	0x0029	; ????
                        // blok relais aansturing
                        // relais pd2..pd6
                        PORTD = (PORTD & 0b10000011) | ((data&0b011111)<<2);
                    }

                    UDR = 0; // misschien iets van de detectors
     af8:	75 69       	ori	r23, 0x95	; 149
     afa:	6e 74       	andi	r22, 0x4E	; 78
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     afc:	5f 66       	ori	r21, 0x6F	; 111
     afe:	61 72       	andi	r22, 0x21	; 33
     b00:	70 74       	andi	r23, 0x40	; 64
     b02:	72 5f       	subi	r23, 0xF2	; 242
     b04:	74 3a       	cpi	r23, 0xA4	; 164
     b06:	74 28       	or	r7, r4
     b08:	33 2c       	mov	r3, r3
     b0a:	32 29       	or	r19, r2
     b0c:	3d 28       	or	r3, r13
     b0e:	35 2c       	mov	r3, r5
     b10:	36 29       	or	r19, r6
     b12:	00 2f       	mov	r16, r16
     b14:	75 73       	andi	r23, 0x35	; 53
     b16:	72 2f       	mov	r23, r18
     b18:	6c 69       	ori	r22, 0x9C	; 156
     b1a:	62 2f       	mov	r22, r18
     b1c:	61 76       	andi	r22, 0x61	; 97
     b1e:	72 2f       	mov	r23, r18
     b20:	69 6e       	ori	r22, 0xE9	; 233
     b22:	63 6c       	ori	r22, 0xC3	; 195
     b24:	75 64       	ori	r23, 0x45	; 69
    if (huidigePositie == 0)
     b26:	65 2f       	mov	r22, r21
     b28:	61 76       	andi	r22, 0x61	; 97
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
     b2a:	72 2f       	mov	r23, r18
        step = update;
     b2c:	66 75       	andi	r22, 0x56	; 86
     b2e:	73 65       	ori	r23, 0x53	; 83
     b30:	2e 68       	ori	r18, 0x8E	; 142
     b32:	00 5f       	subi	r16, 0xF0	; 240
     b34:	5f 66       	ori	r21, 0x6F	; 111
     b36:	75 73       	andi	r23, 0x35	; 53
     b38:	65 5f       	subi	r22, 0xF5	; 245
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     b3a:	74 3a       	cpi	r23, 0xA4	; 164
     b3c:	74 28       	or	r7, r4
     b3e:	36 2c       	mov	r3, r6
     b40:	31 29       	or	r19, r1
     b42:	3d 28       	or	r3, r13
     b44:	36 2c       	mov	r3, r6
     b46:	32 29       	or	r19, r2
     b48:	3d 73       	andi	r19, 0x3D	; 61
     b4a:	32 6c       	ori	r19, 0xC2	; 194
     b4c:	6f 77       	andi	r22, 0x7F	; 127
     b4e:	3a 28       	or	r3, r10
     b50:	30 2c       	mov	r3, r0
     b52:	31 31       	cpi	r19, 0x11	; 17
     b54:	29 2c       	mov	r2, r9
     b56:	30 2c       	mov	r3, r0
     b58:	38 3b       	cpi	r19, 0xB8	; 184
     b5a:	68 69       	ori	r22, 0x98	; 152
     b5c:	67 68       	ori	r22, 0x87	; 135
     b5e:	3a 28       	or	r3, r10
     b60:	30 2c       	mov	r3, r0
     b62:	31 31       	cpi	r19, 0x11	; 17
    if (huidigePositie == 0)
     b64:	29 2c       	mov	r2, r9
     b66:	38 2c       	mov	r3, r8
        PORTB &= ~(1<<PB0);
        step = update;
    }
    else
    {
        PORTB |= (1<<PB0);
     b68:	38 3b       	cpi	r19, 0xB8	; 184
        step = -update;
     b6a:	3b 00       	.word	0x003b	; ????
     b6c:	2f 75       	andi	r18, 0x5F	; 95
     b6e:	73 72       	andi	r23, 0x23	; 35
     b70:	2f 6c       	ori	r18, 0xCF	; 207
     b72:	69 62       	ori	r22, 0x29	; 41
     b74:	2f 61       	ori	r18, 0x1F	; 31
     b76:	76 72       	andi	r23, 0x26	; 38
     b78:	2f 69       	ori	r18, 0x9F	; 159
     b7a:	6e 63       	ori	r22, 0x3E	; 62
     b7c:	6c 75       	andi	r22, 0x5C	; 92
     b7e:	64 65       	ori	r22, 0x54	; 84
     b80:	2f 61       	ori	r18, 0x1F	; 31
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     b82:	76 72       	andi	r23, 0x26	; 38
     b84:	2f 65       	ori	r18, 0x5F	; 95
     b86:	65 70       	andi	r22, 0x05	; 5
     b88:	72 6f       	ori	r23, 0xF2	; 242
     b8a:	6d 2e       	mov	r6, r29
     b8c:	68 00       	.word	0x0068	; ????
     b8e:	2f 75       	andi	r18, 0x5F	; 95
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     b90:	73 72       	andi	r23, 0x23	; 35
     b92:	2f 6c       	ori	r18, 0xCF	; 207
     b94:	69 62       	ori	r22, 0x29	; 41
     b96:	2f 67       	ori	r18, 0x7F	; 127
     b98:	63 63       	ori	r22, 0x33	; 51
     b9a:	2f 61       	ori	r18, 0x1F	; 31
     b9c:	76 72       	andi	r23, 0x26	; 38
     b9e:	2f 34       	cpi	r18, 0x4F	; 79
     ba0:	2e 39       	cpi	r18, 0x9E	; 158
     ba2:	2e 32       	cpi	r18, 0x2E	; 46
     ba4:	2f 69       	ori	r18, 0x9F	; 159
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     ba6:	6e 63       	ori	r22, 0x3E	; 62
     ba8:	6c 75       	andi	r22, 0x5C	; 92
     baa:	64 65       	ori	r22, 0x54	; 84
     bac:	2f 73       	andi	r18, 0x3F	; 63
     bae:	74 64       	ori	r23, 0x44	; 68
     bb0:	64 65       	ori	r22, 0x54	; 84
     bb2:	66 2e       	mov	r6, r22
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     bb4:	68 00       	.word	0x0068	; ????
     bb6:	70 74       	andi	r23, 0x40	; 64
     bb8:	72 64       	ori	r23, 0x42	; 66
     bba:	69 66       	ori	r22, 0x69	; 105
                    {
                        updatePosition(-4);
                    }
                    else if (data==54)
                    {
                        updatePosition(8);
     bbc:	66 5f       	subi	r22, 0xF6	; 246
     bbe:	74 3a       	cpi	r23, 0xA4	; 164
     bc0:	74 28       	or	r7, r4
                    {
                        updatePosition(4);
                    }
                    else if (data==53)
                    {
                        updatePosition(-4);
     bc2:	38 2c       	mov	r3, r8
     bc4:	31 29       	or	r19, r1
     bc6:	3d 28       	or	r3, r13
                    {
                        updatePosition(-32);
                    }
                    else if (data==60) // alleen als we geen contact zien anders kunnen we door de hystiresus gaan schuiven
                    {
                        step = 1; // correct status
     bc8:	30 2c       	mov	r3, r0
     bca:	31 29       	or	r19, r1
     bcc:	00 73       	andi	r16, 0x30	; 48
     bce:	69 7a       	andi	r22, 0xA9	; 169
                        if ((PINC & (1<<PC2)) == 0)
     bd0:	65 5f       	subi	r22, 0xF5	; 245
     bd2:	74 3a       	cpi	r23, 0xA4	; 164
                        {
                            // we zijn al thuis dus rij even weg
                            PORTB &= ~(1<<PB0); // voorwaarts
     bd4:	74 28       	or	r7, r4
                            step = stepTabel[1][0];
     bd6:	38 2c       	mov	r3, r8
     bd8:	32 29       	or	r19, r2
     bda:	3d 28       	or	r3, r13
     bdc:	30 2c       	mov	r3, r0
     bde:	34 29       	or	r19, r4
     be0:	00 77       	andi	r16, 0x70	; 112
     be2:	63 68       	ori	r22, 0x83	; 131
     be4:	61 72       	andi	r22, 0x21	; 33
                            homingReverse = true;
     be6:	5f 74       	andi	r21, 0x4F	; 79
     be8:	3a 74       	andi	r19, 0x4A	; 74
                        }
                        doHoming = true;
     bea:	28 38       	cpi	r18, 0x88	; 136
     bec:	2c 33       	cpi	r18, 0x3C	; 60
     bee:	29 3d       	cpi	r18, 0xD9	; 217
                    {
                        updatePosition(32);
                    }
                    else if (data==59)
                    {
                        updatePosition(-32);
     bf0:	28 30       	cpi	r18, 0x08	; 8
     bf2:	2c 31       	cpi	r18, 0x1C	; 28
     bf4:	29 00       	.word	0x0029	; ????
                    // eind updates in de stap tabel
                    // 60 home
                    // 62 write eeprom staptabel
                    // 63 get bitfiled status bit 0 = TURNING  bit 1 = middenDetected  bit 2 = needsHoming

                    else if (data==48)
     bf6:	48 6f       	ori	r20, 0xF8	; 248
     bf8:	6d 69       	ori	r22, 0x9D	; 157
     bfa:	6e 67       	ori	r22, 0x7E	; 126
    }
}

void updatePosition(int8_t update)
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
     bfc:	3a 46       	sbci	r19, 0x6A	; 106
     bfe:	28 30       	cpi	r18, 0x08	; 8
     c00:	2c 34       	cpi	r18, 0x4C	; 76
     c02:	35 29       	or	r19, r5
     c04:	00 53       	subi	r16, 0x30	; 48
     c06:	74 65       	ori	r23, 0x54	; 84
     c08:	70 43       	sbci	r23, 0x30	; 48
     c0a:	6f 6e       	ori	r22, 0xEF	; 239
     c0c:	74 72       	andi	r23, 0x24	; 36
     c0e:	6f 6c       	ori	r22, 0xCF	; 207
     c10:	3a 46       	sbci	r19, 0x6A	; 106
     c12:	28 30       	cpi	r18, 0x08	; 8
     c14:	2c 34       	cpi	r18, 0x4C	; 76
     c16:	35 29       	or	r19, r5
     c18:	00 64       	ori	r16, 0x40	; 64
     c1a:	65 63       	ori	r22, 0x35	; 53
     c1c:	69 6d       	ori	r22, 0xD9	; 217
     c1e:	61 74       	andi	r22, 0x41	; 65
     c20:	65 3a       	cpi	r22, 0xA5	; 165
     c22:	56 28       	or	r5, r6
     c24:	35 2c       	mov	r3, r5
    if (huidigePositie == 0)
     c26:	32 29       	or	r19, r2
     c28:	00 64       	ori	r16, 0x40	; 64
     c2a:	72 65       	ori	r23, 0x52	; 82
     c2c:	6d 70       	andi	r22, 0x0D	; 13
     c2e:	65 6c       	ori	r22, 0xC5	; 197
     c30:	53 74       	andi	r21, 0x43	; 67
     c32:	75 72       	andi	r23, 0x25	; 37
     c34:	69 6e       	ori	r22, 0xE9	; 233
     c36:	67 3a       	cpi	r22, 0xA7	; 167
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
        {
            stepTabel[i][huidigePosititieTweedeIndex] += update;
     c38:	56 28       	or	r5, r6
     c3a:	35 2c       	mov	r3, r5
     c3c:	32 29       	or	r19, r2
     c3e:	00 5f       	subi	r16, 0xF0	; 240
     c40:	5f 76       	andi	r21, 0x6F	; 111
     c42:	65 63       	ori	r22, 0x35	; 53
     c44:	74 6f       	ori	r23, 0xF4	; 244
{
    stepTabel[huidigePositie][huidigePosititieTweedeIndex] += update;
    if (huidigePositie == 0)
    {
        // voor de home position alles tabel entries updaten
        for (int i=1;i<48;i++)
     c46:	72 5f       	subi	r23, 0xF2	; 242
     c48:	31 31       	cpi	r19, 0x11	; 17
     c4a:	3a 46       	sbci	r19, 0x6A	; 106
            stepTabel[i][huidigePosititieTweedeIndex] += update;
        }
    }
    if (update>=0)
    {
        PORTB &= ~(1<<PB0);
     c4c:	28 30       	cpi	r18, 0x08	; 8
        step = update;
     c4e:	2c 34       	cpi	r18, 0x4C	; 76
     c50:	35 29       	or	r19, r5
     c52:	00 73       	andi	r16, 0x30	; 48
     c54:	6e 65       	ori	r22, 0x5E	; 94
     c56:	6c 3a       	cpi	r22, 0xAC	; 172
                        doHoming = true;
                    }
                    else if (data==62)
                    {
                        // dit duurt telang zodat het antwoord niet optijd is.
                        UDR = ((step == 0) ? TURNING_DONE : TURNING) + middenDetected*2 + needsHoming*4;
     c58:	72 28       	or	r7, r2
     c5a:	35 2c       	mov	r3, r5
     c5c:	32 29       	or	r19, r2
     c5e:	00 69       	ori	r16, 0x90	; 144
     c60:	3a 28       	or	r3, r10
     c62:	30 2c       	mov	r3, r0
     c64:	34 36       	cpi	r19, 0x64	; 100
     c66:	29 3d       	cpi	r18, 0xD9	; 217
     c68:	42 28       	or	r4, r2
     c6a:	30 2c       	mov	r3, r0
     c6c:	31 29       	or	r19, r1
     c6e:	00 5f       	subi	r16, 0xF0	; 240
     c70:	5f 76       	andi	r21, 0x6F	; 111
     c72:	65 63       	ori	r22, 0x35	; 53
     c74:	74 6f       	ori	r23, 0xF4	; 244
     c76:	72 5f       	subi	r23, 0xF2	; 242
     c78:	31 32       	cpi	r19, 0x21	; 33
                        // grofweg 800 ms duren
                        // daarna is alle communicatie verloren dus wachten tot de watch dog een reset door voerd.
                        // Houd de watchdog in leven zolang we in de loop zitten.
                        for (uint8_t i=0;i<48;i++)
                        {
                            eeprom_write_word((uint16_t*)&stepTabelRom[i][0], (uint16_t)stepTabel[i][0]);
     c7a:	3a 46       	sbci	r19, 0x6A	; 106
     c7c:	28 30       	cpi	r18, 0x08	; 8
     c7e:	2c 34       	cpi	r18, 0x4C	; 76
     c80:	35 29       	or	r19, r5
     c82:	00 5f       	subi	r16, 0xF0	; 240
                            wdt_reset();
     c84:	5f 76       	andi	r21, 0x6F	; 111
                            eeprom_write_word((uint16_t*)&stepTabelRom[i][1], (uint16_t)stepTabel[i][1]);
     c86:	65 63       	ori	r22, 0x35	; 53
     c88:	74 6f       	ori	r23, 0xF4	; 244
     c8a:	72 5f       	subi	r23, 0xF2	; 242
     c8c:	31 34       	cpi	r19, 0x41	; 65
     c8e:	3a 46       	sbci	r19, 0x6A	; 106
     c90:	28 30       	cpi	r18, 0x08	; 8
                            wdt_reset();
     c92:	2c 34       	cpi	r18, 0x4C	; 76
     c94:	35 29       	or	r19, r5
     c96:	00 69       	ori	r16, 0x90	; 144
     c98:	6e 70       	andi	r22, 0x0E	; 14
     c9a:	75 74       	andi	r23, 0x45	; 69
     c9c:	3a 72       	andi	r19, 0x2A	; 42
                        // houd de interrupt disabled want deze loop kan lang duren.
                        // het duurd 8.5ms per byte voor een write dus totaal voor de gehele table kan het dus
                        // grofweg 800 ms duren
                        // daarna is alle communicatie verloren dus wachten tot de watch dog een reset door voerd.
                        // Houd de watchdog in leven zolang we in de loop zitten.
                        for (uint8_t i=0;i<48;i++)
     c9e:	28 35       	cpi	r18, 0x58	; 88
     ca0:	2c 34       	cpi	r18, 0x4C	; 76
     ca2:	29 00       	.word	0x0029	; ????
        }


    }
    while(1);
}
     ca4:	75 70       	andi	r23, 0x05	; 5
     ca6:	64 61       	ori	r22, 0x14	; 20
     ca8:	74 65       	ori	r23, 0x54	; 84
     caa:	50 6f       	ori	r21, 0xF0	; 240
     cac:	73 69       	ori	r23, 0x93	; 147
     cae:	74 69       	ori	r23, 0x94	; 148
     cb0:	6f 6e       	ori	r22, 0xEF	; 239
     cb2:	3a 46       	sbci	r19, 0x6A	; 106
     cb4:	28 30       	cpi	r18, 0x08	; 8
     cb6:	2c 34       	cpi	r18, 0x4C	; 76
     cb8:	35 29       	or	r19, r5
     cba:	00 75       	andi	r16, 0x50	; 80
     cbc:	70 64       	ori	r23, 0x40	; 64
     cbe:	61 74       	andi	r22, 0x41	; 65
     cc0:	65 3a       	cpi	r22, 0xA5	; 165
     cc2:	50 28       	or	r5, r0
     cc4:	35 2c       	mov	r3, r5
     cc6:	31 29       	or	r19, r1
     cc8:	00 68       	ori	r16, 0x80	; 128
                    {
                        updatePosition(-16);
                    }
                    else if (data==58)
                    {
                        updatePosition(32);
     cca:	75 69       	ori	r23, 0x95	; 149
     ccc:	73 56       	subi	r23, 0x63	; 99
     cce:	65 72       	andi	r22, 0x25	; 37
                    {
                        updatePosition(-8);
                    }
                    else if (data==56)
                    {
                        updatePosition(16);
     cd0:	6c 69       	ori	r22, 0x9C	; 156
     cd2:	63 68       	ori	r22, 0x83	; 131
     cd4:	74 69       	ori	r23, 0x94	; 148
                    {
                        updatePosition(8);
                    }
                    else if (data==55)
                    {
                        updatePosition(-8);
     cd6:	6e 67       	ori	r22, 0x7E	; 126
     cd8:	3a 46       	sbci	r19, 0x6A	; 106
     cda:	28 30       	cpi	r18, 0x08	; 8
                    {
                        updatePosition(16);
                    }
                    else if (data==57)
                    {
                        updatePosition(-16);
     cdc:	2c 34       	cpi	r18, 0x4C	; 76
     cde:	35 29       	or	r19, r5
     ce0:	00 61       	ori	r16, 0x10	; 16
     ce2:	61 6e       	ori	r22, 0xE1	; 225
     ce4:	3a 50       	subi	r19, 0x0A	; 10
     ce6:	28 30       	cpi	r18, 0x08	; 8
     ce8:	2c 34       	cpi	r18, 0x4C	; 76
     cea:	37 29       	or	r19, r7
     cec:	3d 40       	sbci	r19, 0x0D	; 13
     cee:	73 38       	cpi	r23, 0x83	; 131
     cf0:	3b 2d       	mov	r19, r11
     cf2:	31 36       	cpi	r19, 0x61	; 97
     cf4:	3b 00       	.word	0x003b	; ????
     cf6:	6d 61       	ori	r22, 0x1D	; 29
     cf8:	69 6e       	ori	r22, 0xE9	; 233
     cfa:	3a 46       	sbci	r19, 0x6A	; 106
     cfc:	28 30       	cpi	r18, 0x08	; 8
     cfe:	2c 34       	cpi	r18, 0x4C	; 76
     d00:	35 29       	or	r19, r5
     d02:	00 2f       	mov	r16, r16
     d04:	75 73       	andi	r23, 0x35	; 53
     d06:	72 2f       	mov	r23, r18
     d08:	6c 69       	ori	r22, 0x9C	; 156
     d0a:	62 2f       	mov	r22, r18
     d0c:	61 76       	andi	r22, 0x61	; 97
     d0e:	72 2f       	mov	r23, r18
     d10:	69 6e       	ori	r22, 0xE9	; 233
     d12:	63 6c       	ori	r22, 0xC3	; 195
     d14:	75 64       	ori	r23, 0x45	; 69
     d16:	65 2f       	mov	r22, r21
     d18:	61 76       	andi	r22, 0x61	; 97
     d1a:	72 2f       	mov	r23, r18
     d1c:	77 64       	ori	r23, 0x47	; 71
     d1e:	74 2e       	mov	r7, r20
     d20:	68 00       	.word	0x0068	; ????
     d22:	61 64       	ori	r22, 0x41	; 65
     d24:	72 65       	ori	r23, 0x52	; 82
     d26:	73 3a       	cpi	r23, 0xA3	; 163
     d28:	72 28       	or	r7, r2
     d2a:	35 2c       	mov	r3, r5
     d2c:	34 29       	or	r19, r4
     d2e:	00 64       	ori	r16, 0x40	; 64
     d30:	61 74       	andi	r22, 0x41	; 65
     d32:	61 3a       	cpi	r22, 0xA1	; 161
     d34:	72 28       	or	r7, r2
     d36:	35 2c       	mov	r3, r5
     d38:	32 29       	or	r19, r2
     d3a:	00 73       	andi	r16, 0x30	; 48
     d3c:	74 61       	ori	r23, 0x14	; 20
     d3e:	72 74       	andi	r23, 0x42	; 66
     d40:	41 64       	ori	r20, 0x41	; 65
     d42:	72 65       	ori	r23, 0x52	; 82
     d44:	73 3a       	cpi	r23, 0xA3	; 163
     d46:	72 28       	or	r7, r2
     d48:	35 2c       	mov	r3, r5
     d4a:	34 29       	or	r19, r4
     d4c:	00 74       	andi	r16, 0x40	; 64
     d4e:	77 65       	ori	r23, 0x57	; 87
     d50:	65 64       	ori	r22, 0x45	; 69
     d52:	65 49       	sbci	r22, 0x95	; 149
     d54:	6e 64       	ori	r22, 0x4E	; 78
     d56:	65 78       	andi	r22, 0x85	; 133
     d58:	3a 72       	andi	r19, 0x2A	; 42
     d5a:	28 30       	cpi	r18, 0x08	; 8
     d5c:	2c 34       	cpi	r18, 0x4C	; 76
     d5e:	37 29       	or	r19, r7
     d60:	00 6e       	ori	r16, 0xE0	; 224
     d62:	61 61       	ori	r22, 0x11	; 17
     d64:	72 3a       	cpi	r23, 0xA2	; 162
     d66:	72 28       	or	r7, r2
     d68:	35 2c       	mov	r3, r5
     d6a:	33 29       	or	r19, r3
     d6c:	00 76       	andi	r16, 0x60	; 96
     d6e:	61 6e       	ori	r22, 0xE1	; 225
     d70:	3a 72       	andi	r19, 0x2A	; 42
     d72:	28 35       	cpi	r18, 0x58	; 88
     d74:	2c 33       	cpi	r18, 0x3C	; 60
     d76:	29 00       	.word	0x0029	; ????
     d78:	70 75       	andi	r23, 0x50	; 80
     d7a:	6c 73       	andi	r22, 0x3C	; 60
     d7c:	65 54       	subi	r22, 0x45	; 69
     d7e:	61 62       	ori	r22, 0x21	; 33
     d80:	65 6c       	ori	r22, 0xC5	; 197
     d82:	3a 47       	sbci	r19, 0x7A	; 122
     d84:	28 30       	cpi	r18, 0x08	; 8
     d86:	2c 34       	cpi	r18, 0x4C	; 76
     d88:	38 29       	or	r19, r8
     d8a:	3d 61       	ori	r19, 0x1D	; 29
     d8c:	72 28       	or	r7, r2
     d8e:	30 2c       	mov	r3, r0
     d90:	34 39       	cpi	r19, 0x94	; 148
     d92:	29 3d       	cpi	r18, 0xD9	; 217
     d94:	72 28       	or	r7, r2
     d96:	30 2c       	mov	r3, r0
     d98:	34 39       	cpi	r19, 0x94	; 148
     d9a:	29 3b       	cpi	r18, 0xB9	; 185
     d9c:	30 3b       	cpi	r19, 0xB0	; 176
     d9e:	30 31       	cpi	r19, 0x10	; 16
     da0:	37 37       	cpi	r19, 0x77	; 119
     da2:	37 37       	cpi	r19, 0x77	; 119
     da4:	37 3b       	cpi	r19, 0xB7	; 183
     da6:	3b 30       	cpi	r19, 0x0B	; 11
     da8:	3b 36       	cpi	r19, 0x6B	; 107
     daa:	33 3b       	cpi	r19, 0xB3	; 179
     dac:	28 30       	cpi	r18, 0x08	; 8
     dae:	2c 35       	cpi	r18, 0x5C	; 92
     db0:	30 29       	or	r19, r0
     db2:	3d 61       	ori	r19, 0x1D	; 29
     db4:	72 28       	or	r7, r2
     db6:	30 2c       	mov	r3, r0
     db8:	34 39       	cpi	r19, 0x94	; 148
     dba:	29 3b       	cpi	r18, 0xB9	; 185
     dbc:	30 3b       	cpi	r19, 0xB0	; 176
     dbe:	37 3b       	cpi	r19, 0xB7	; 183
     dc0:	28 30       	cpi	r18, 0x08	; 8
     dc2:	2c 35       	cpi	r18, 0x5C	; 92
     dc4:	31 29       	or	r19, r1
     dc6:	3d 6b       	ori	r19, 0xBD	; 189
     dc8:	28 35       	cpi	r18, 0x58	; 88
     dca:	2c 32       	cpi	r18, 0x2C	; 44
     dcc:	29 00       	.word	0x0029	; ????
     dce:	75 61       	ori	r23, 0x15	; 21
     dd0:	72 74       	andi	r23, 0x42	; 66
     dd2:	44 61       	ori	r20, 0x14	; 20
     dd4:	74 61       	ori	r23, 0x14	; 20
     dd6:	31 3a       	cpi	r19, 0xA1	; 161
     dd8:	47 28       	or	r4, r7
     dda:	30 2c       	mov	r3, r0
     ddc:	35 32       	cpi	r19, 0x25	; 37
     dde:	29 3d       	cpi	r18, 0xD9	; 217
     de0:	42 28       	or	r4, r2
     de2:	35 2c       	mov	r3, r5
     de4:	32 29       	or	r19, r2
     de6:	00 75       	andi	r16, 0x50	; 80
     de8:	61 72       	andi	r22, 0x21	; 33
     dea:	74 44       	sbci	r23, 0x44	; 68
     dec:	61 74       	andi	r22, 0x41	; 65
     dee:	61 32       	cpi	r22, 0x21	; 33
     df0:	3a 47       	sbci	r19, 0x7A	; 122
     df2:	28 30       	cpi	r18, 0x08	; 8
     df4:	2c 35       	cpi	r18, 0x5C	; 92
     df6:	32 29       	or	r19, r2
     df8:	00 62       	ori	r16, 0x20	; 32
     dfa:	79 74       	andi	r23, 0x49	; 73
     dfc:	65 43       	sbci	r22, 0x35	; 53
     dfe:	6f 75       	andi	r22, 0x5F	; 95
     e00:	6e 74       	andi	r22, 0x4E	; 78
     e02:	3a 47       	sbci	r19, 0x7A	; 122
     e04:	28 30       	cpi	r18, 0x08	; 8
     e06:	2c 35       	cpi	r18, 0x5C	; 92
     e08:	32 29       	or	r19, r2
     e0a:	00 69       	ori	r16, 0x90	; 144
     e0c:	6e 53       	subi	r22, 0x3E	; 62
     e0e:	79 6e       	ori	r23, 0xE9	; 233
     e10:	63 3a       	cpi	r22, 0xA3	; 163
     e12:	47 28       	or	r4, r7
     e14:	30 2c       	mov	r3, r0
     e16:	35 33       	cpi	r19, 0x35	; 53
     e18:	29 3d       	cpi	r18, 0xD9	; 217
     e1a:	42 28       	or	r4, r2
     e1c:	30 2c       	mov	r3, r0
     e1e:	34 37       	cpi	r19, 0x74	; 116
     e20:	29 00       	.word	0x0029	; ????
     e22:	62 72       	andi	r22, 0x22	; 34
     e24:	75 67       	ori	r23, 0x75	; 117
     e26:	42 6c       	ori	r20, 0xC2	; 194
     e28:	6f 6b       	ori	r22, 0xBF	; 191
     e2a:	44 44       	sbci	r20, 0x44	; 68
     e2c:	52 3a       	cpi	r21, 0xA2	; 162
     e2e:	47 28       	or	r4, r7
     e30:	30 2c       	mov	r3, r0
     e32:	35 32       	cpi	r19, 0x25	; 37
     e34:	29 00       	.word	0x0029	; ????
     e36:	73 79       	andi	r23, 0x93	; 147
     e38:	6e 63       	ori	r22, 0x3E	; 62
     e3a:	43 6f       	ori	r20, 0xF3	; 243
     e3c:	75 6e       	ori	r23, 0xE5	; 229
     e3e:	74 3a       	cpi	r23, 0xA4	; 164
     e40:	47 28       	or	r4, r7
     e42:	35 2c       	mov	r3, r5
     e44:	32 29       	or	r19, r2
     e46:	00 64       	ori	r16, 0x40	; 64
     e48:	6f 48       	sbci	r22, 0x8F	; 143
     e4a:	6f 6d       	ori	r22, 0xDF	; 223
     e4c:	69 6e       	ori	r22, 0xE9	; 233
     e4e:	67 3a       	cpi	r22, 0xA7	; 167
     e50:	47 28       	or	r4, r7
     e52:	30 2c       	mov	r3, r0
     e54:	35 33       	cpi	r19, 0x35	; 53
     e56:	29 00       	.word	0x0029	; ????
     e58:	68 6f       	ori	r22, 0xF8	; 248
     e5a:	6d 69       	ori	r22, 0x9D	; 157
     e5c:	6e 67       	ori	r22, 0x7E	; 126
     e5e:	52 65       	ori	r21, 0x52	; 82
     e60:	76 65       	ori	r23, 0x56	; 86
     e62:	72 73       	andi	r23, 0x32	; 50
     e64:	65 3a       	cpi	r22, 0xA5	; 165
     e66:	47 28       	or	r4, r7
     e68:	30 2c       	mov	r3, r0
     e6a:	35 33       	cpi	r19, 0x35	; 53
     e6c:	29 00       	.word	0x0029	; ????
     e6e:	70 75       	andi	r23, 0x50	; 80
     e70:	6c 73       	andi	r22, 0x3C	; 60
     e72:	65 42       	sbci	r22, 0x25	; 37
     e74:	72 65       	ori	r23, 0x52	; 82
     e76:	65 64       	ori	r22, 0x45	; 69
     e78:	74 65       	ori	r23, 0x54	; 84
     e7a:	43 6f       	ori	r20, 0xF3	; 243
     e7c:	75 6e       	ori	r23, 0xE5	; 229
     e7e:	74 3a       	cpi	r23, 0xA4	; 164
     e80:	47 28       	or	r4, r7
     e82:	30 2c       	mov	r3, r0
     e84:	35 32       	cpi	r19, 0x25	; 37
     e86:	29 00       	.word	0x0029	; ????
     e88:	73 6e       	ori	r23, 0xE3	; 227
     e8a:	65 6c       	ori	r22, 0xC5	; 197
     e8c:	68 65       	ori	r22, 0x58	; 88
     e8e:	69 64       	ori	r22, 0x49	; 73
     e90:	3a 47       	sbci	r19, 0x7A	; 122
     e92:	28 30       	cpi	r18, 0x08	; 8
     e94:	2c 35       	cpi	r18, 0x5C	; 92
     e96:	32 29       	or	r19, r2
     e98:	00 6d       	ori	r16, 0xD0	; 208
     e9a:	69 64       	ori	r22, 0x49	; 73
     e9c:	64 65       	ori	r22, 0x54	; 84
     e9e:	6e 44       	sbci	r22, 0x4E	; 78
     ea0:	65 74       	andi	r22, 0x45	; 69
     ea2:	65 63       	ori	r22, 0x35	; 53
     ea4:	74 69       	ori	r23, 0x94	; 148
     ea6:	65 3a       	cpi	r22, 0xA5	; 165
     ea8:	47 28       	or	r4, r7
     eaa:	30 2c       	mov	r3, r0
     eac:	35 33       	cpi	r19, 0x35	; 53
     eae:	29 00       	.word	0x0029	; ????
     eb0:	6d 69       	ori	r22, 0x9D	; 157
     eb2:	64 64       	ori	r22, 0x44	; 68
     eb4:	65 6e       	ori	r22, 0xE5	; 229
     eb6:	44 65       	ori	r20, 0x54	; 84
     eb8:	74 65       	ori	r23, 0x54	; 84
     eba:	63 74       	andi	r22, 0x43	; 67
     ebc:	65 64       	ori	r22, 0x45	; 69
     ebe:	3a 47       	sbci	r19, 0x7A	; 122
     ec0:	28 30       	cpi	r18, 0x08	; 8
     ec2:	2c 35       	cpi	r18, 0x5C	; 92
     ec4:	33 29       	or	r19, r3
     ec6:	00 62       	ori	r16, 0x20	; 32
     ec8:	6c 6f       	ori	r22, 0xFC	; 252
     eca:	6b 4f       	sbci	r22, 0xFB	; 251
     ecc:	6e 3a       	cpi	r22, 0xAE	; 174
     ece:	47 28       	or	r4, r7
     ed0:	30 2c       	mov	r3, r0
     ed2:	35 34       	cpi	r19, 0x45	; 69
     ed4:	29 3d       	cpi	r18, 0xD9	; 217
     ed6:	42 28       	or	r4, r2
     ed8:	35 2c       	mov	r3, r5
     eda:	34 29       	or	r19, r4
     edc:	00 62       	ori	r16, 0x20	; 32
     ede:	6c 6f       	ori	r22, 0xFC	; 252
     ee0:	6b 4f       	sbci	r22, 0xFB	; 251
     ee2:	66 66       	ori	r22, 0x66	; 102
     ee4:	3a 47       	sbci	r19, 0x7A	; 122
     ee6:	28 30       	cpi	r18, 0x08	; 8
     ee8:	2c 35       	cpi	r18, 0x5C	; 92
     eea:	34 29       	or	r19, r4
     eec:	00 73       	andi	r16, 0x30	; 48
     eee:	74 65       	ori	r23, 0x54	; 84
     ef0:	70 54       	subi	r23, 0x40	; 64
     ef2:	61 62       	ori	r22, 0x21	; 33
     ef4:	65 6c       	ori	r22, 0xC5	; 197
     ef6:	52 6f       	ori	r21, 0xF2	; 242
     ef8:	6d 3a       	cpi	r22, 0xAD	; 173
     efa:	47 28       	or	r4, r7
     efc:	30 2c       	mov	r3, r0
     efe:	35 35       	cpi	r19, 0x55	; 85
     f00:	29 3d       	cpi	r18, 0xD9	; 217
     f02:	61 72       	andi	r22, 0x21	; 33
     f04:	28 30       	cpi	r18, 0x08	; 8
     f06:	2c 34       	cpi	r18, 0x4C	; 76
     f08:	39 29       	or	r19, r9
     f0a:	3b 30       	cpi	r19, 0x0B	; 11
     f0c:	3b 34       	cpi	r19, 0x4B	; 75
     f0e:	37 3b       	cpi	r19, 0xB7	; 183
     f10:	28 30       	cpi	r18, 0x08	; 8
     f12:	2c 35       	cpi	r18, 0x5C	; 92
     f14:	36 29       	or	r19, r6
     f16:	3d 61       	ori	r19, 0x1D	; 29
     f18:	72 28       	or	r7, r2
     f1a:	30 2c       	mov	r3, r0
     f1c:	34 39       	cpi	r19, 0x94	; 148
     f1e:	29 3b       	cpi	r18, 0xB9	; 185
     f20:	30 3b       	cpi	r19, 0xB0	; 176
     f22:	31 3b       	cpi	r19, 0xB1	; 177
     f24:	28 30       	cpi	r18, 0x08	; 8
     f26:	2c 35       	cpi	r18, 0x5C	; 92
     f28:	37 29       	or	r19, r7
     f2a:	3d 6b       	ori	r19, 0xBD	; 189
     f2c:	28 35       	cpi	r18, 0x58	; 88
     f2e:	2c 33       	cpi	r18, 0x3C	; 60
     f30:	29 00       	.word	0x0029	; ????
     f32:	45 65       	ori	r20, 0x55	; 85
     f34:	70 72       	andi	r23, 0x20	; 32
     f36:	6f 6d       	ori	r22, 0xDF	; 223
     f38:	54 79       	andi	r21, 0x94	; 148
     f3a:	70 65       	ori	r23, 0x50	; 80
     f3c:	3a 47       	sbci	r19, 0x7A	; 122
     f3e:	28 30       	cpi	r18, 0x08	; 8
     f40:	2c 35       	cpi	r18, 0x5C	; 92
     f42:	31 29       	or	r19, r1
     f44:	00 45       	sbci	r16, 0x50	; 80
     f46:	65 70       	andi	r22, 0x05	; 5
     f48:	72 6f       	ori	r23, 0xF2	; 242
     f4a:	6d 41       	sbci	r22, 0x1D	; 29
     f4c:	64 72       	andi	r22, 0x24	; 36
     f4e:	65 73       	andi	r22, 0x35	; 53
     f50:	3a 47       	sbci	r19, 0x7A	; 122
     f52:	28 30       	cpi	r18, 0x08	; 8
     f54:	2c 35       	cpi	r18, 0x5C	; 92
     f56:	38 29       	or	r19, r8
     f58:	3d 6b       	ori	r19, 0xBD	; 189
     f5a:	28 35       	cpi	r18, 0x58	; 88
     f5c:	2c 34       	cpi	r18, 0x4C	; 76
     f5e:	29 00       	.word	0x0029	; ????
     f60:	73 74       	andi	r23, 0x43	; 67
     f62:	65 70       	andi	r22, 0x05	; 5
     f64:	3a 47       	sbci	r19, 0x7A	; 122
     f66:	28 30       	cpi	r18, 0x08	; 8
     f68:	2c 35       	cpi	r18, 0x5C	; 92
     f6a:	39 29       	or	r19, r9
     f6c:	3d 42       	sbci	r19, 0x2D	; 45
     f6e:	28 35       	cpi	r18, 0x58	; 88
     f70:	2c 33       	cpi	r18, 0x3C	; 60
     f72:	29 00       	.word	0x0029	; ????
     f74:	68 75       	andi	r22, 0x58	; 88
     f76:	69 64       	ori	r22, 0x49	; 73
     f78:	69 67       	ori	r22, 0x79	; 121
     f7a:	65 50       	subi	r22, 0x05	; 5
     f7c:	6f 73       	andi	r22, 0x3F	; 63
     f7e:	69 74       	andi	r22, 0x49	; 73
     f80:	69 65       	ori	r22, 0x59	; 89
     f82:	3a 47       	sbci	r19, 0x7A	; 122
     f84:	28 35       	cpi	r18, 0x58	; 88
     f86:	2c 32       	cpi	r18, 0x2C	; 44
     f88:	29 00       	.word	0x0029	; ????
     f8a:	68 75       	andi	r22, 0x58	; 88
     f8c:	69 64       	ori	r22, 0x49	; 73
     f8e:	69 67       	ori	r22, 0x79	; 121
     f90:	65 50       	subi	r22, 0x05	; 5
     f92:	6f 73       	andi	r22, 0x3F	; 63
     f94:	69 74       	andi	r22, 0x49	; 73
     f96:	69 74       	andi	r22, 0x49	; 73
     f98:	69 65       	ori	r22, 0x59	; 89
     f9a:	54 77       	andi	r21, 0x74	; 116
     f9c:	65 65       	ori	r22, 0x55	; 85
     f9e:	64 65       	ori	r22, 0x54	; 84
     fa0:	49 6e       	ori	r20, 0xE9	; 233
     fa2:	64 65       	ori	r22, 0x54	; 84
     fa4:	78 3a       	cpi	r23, 0xA8	; 168
     fa6:	47 28       	or	r4, r7
     fa8:	30 2c       	mov	r3, r0
     faa:	34 37       	cpi	r19, 0x74	; 116
     fac:	29 00       	.word	0x0029	; ????
     fae:	73 74       	andi	r23, 0x43	; 67
     fb0:	65 70       	andi	r22, 0x05	; 5
     fb2:	54 61       	ori	r21, 0x14	; 20
     fb4:	62 65       	ori	r22, 0x52	; 82
     fb6:	6c 3a       	cpi	r22, 0xAC	; 172
     fb8:	47 28       	or	r4, r7
     fba:	30 2c       	mov	r3, r0
     fbc:	36 30       	cpi	r19, 0x06	; 6
     fbe:	29 3d       	cpi	r18, 0xD9	; 217
     fc0:	61 72       	andi	r22, 0x21	; 33
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	2c 34       	cpi	r18, 0x4C	; 76
     fc6:	39 29       	or	r19, r9
     fc8:	3b 30       	cpi	r19, 0x0B	; 11
     fca:	3b 34       	cpi	r19, 0x4B	; 75
     fcc:	37 3b       	cpi	r19, 0xB7	; 183
     fce:	28 30       	cpi	r18, 0x08	; 8
     fd0:	2c 36       	cpi	r18, 0x6C	; 108
     fd2:	31 29       	or	r19, r1
     fd4:	3d 61       	ori	r19, 0x1D	; 29
     fd6:	72 28       	or	r7, r2
     fd8:	30 2c       	mov	r3, r0
     fda:	34 39       	cpi	r19, 0x94	; 148
     fdc:	29 3b       	cpi	r18, 0xB9	; 185
     fde:	30 3b       	cpi	r19, 0xB0	; 176
     fe0:	31 3b       	cpi	r19, 0xB1	; 177
     fe2:	28 35       	cpi	r18, 0x58	; 88
     fe4:	2c 33       	cpi	r18, 0x3C	; 60
     fe6:	29 00       	.word	0x0029	; ????
     fe8:	64 65       	ori	r22, 0x54	; 84
     fea:	63 69       	ori	r22, 0x93	; 147
     fec:	6d 61       	ori	r22, 0x1D	; 29
     fee:	74 65       	ori	r23, 0x54	; 84
     ff0:	44 72       	andi	r20, 0x24	; 36
     ff2:	65 6d       	ori	r22, 0xD5	; 213
     ff4:	70 65       	ori	r23, 0x50	; 80
     ff6:	6c 3a       	cpi	r22, 0xAC	; 172
     ff8:	47 28       	or	r4, r7
     ffa:	35 2c       	mov	r3, r5
     ffc:	32 29       	or	r19, r2
     ffe:	00 68       	ori	r16, 0x80	; 128
    1000:	75 69       	ori	r23, 0x95	; 149
    1002:	73 44       	sbci	r23, 0x43	; 67
    1004:	65 63       	ori	r22, 0x35	; 53
    1006:	69 6d       	ori	r22, 0xD9	; 217
    1008:	61 74       	andi	r22, 0x41	; 65
    100a:	69 6f       	ori	r22, 0xF9	; 249
    100c:	6e 3a       	cpi	r22, 0xAE	; 174
    100e:	47 28       	or	r4, r7
    1010:	35 2c       	mov	r3, r5
    1012:	32 29       	or	r19, r2
    1014:	00 6e       	ori	r16, 0xE0	; 224
    1016:	65 65       	ori	r22, 0x55	; 85
    1018:	64 73       	andi	r22, 0x34	; 52
    101a:	48 6f       	ori	r20, 0xF8	; 248
    101c:	6d 69       	ori	r22, 0x9D	; 157
    101e:	6e 67       	ori	r22, 0x7E	; 126
    1020:	3a 47       	sbci	r19, 0x7A	; 122
    1022:	28 30       	cpi	r18, 0x08	; 8
    1024:	2c 34       	cpi	r18, 0x4C	; 76
    1026:	37 29       	or	r19, r7
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47 43       	sbci	r20, 0x37	; 55
   2:	43 3a       	cpi	r20, 0xA3	; 163
   4:	20 28       	or	r2, r0
   6:	47 4e       	sbci	r20, 0xE7	; 231
   8:	55 29       	or	r21, r5
   a:	20 34       	cpi	r18, 0x40	; 64
   c:	2e 39       	cpi	r18, 0x9E	; 158
   e:	2e 32       	cpi	r18, 0x2E	; 46
	...

Disassembly of section .note.gnu.avr.deviceinfo:

00000000 <.note.gnu.avr.deviceinfo>:
   0:	04 00       	.word	0x0004	; ????
   2:	00 00       	nop
   4:	2a 00       	.word	0x002a	; ????
   6:	00 00       	nop
   8:	01 00       	.word	0x0001	; ????
   a:	00 00       	nop
   c:	41 56       	subi	r20, 0x61	; 97
   e:	52 00       	.word	0x0052	; ????
  10:	00 00       	nop
  12:	00 00       	nop
  14:	00 20       	and	r0, r0
  16:	00 00       	nop
  18:	60 00       	.word	0x0060	; ????
  1a:	00 00       	nop
  1c:	00 04       	cpc	r0, r0
  1e:	00 00       	nop
  20:	00 00       	nop
  22:	00 00       	nop
  24:	00 02       	muls	r16, r16
  26:	00 00       	nop
  28:	08 00       	.word	0x0008	; ????
  2a:	00 00       	nop
  2c:	01 00       	.word	0x0001	; ????
  2e:	00 00       	nop
  30:	00 61       	ori	r16, 0x10	; 16
  32:	74 6d       	ori	r23, 0xD4	; 212
  34:	65 67       	ori	r22, 0x75	; 117
  36:	61 38       	cpi	r22, 0x81	; 129
  38:	00 00       	nop
	...
